--------------------------------------------------------------------------------
-- Filename:          lyt_axi_mi250.vhd
-- Version:           v1_00_a
-- Description:       User Logic implementation module
-- Generated by:      khalid.bensadek
-- Date:              2012-11-06 09:40:46
-- Generated:         using LyrtechRD REGGENUTIL based on Xilinx IPIF Wizard.
-- VHDL Standard:     VHDL'93
------------------------------------------------------------------------------
-- Copyright (c) 2001-2012 LYRtech RD Inc.  All rights reserved.
------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use ieee.std_logic_misc.all;

library unisim;
use unisim.vcomponents.all;

library lyt_axi_mi250_v1_00_a;
use lyt_axi_mi250_v1_00_a.axi_mi250;
use lyt_axi_mi250_v1_00_a.mi250_wrapper_p.all;

entity lyt_axi_mi250 is
generic
(
  -- ADD USER GENERICS BELOW THIS LINE ---------------
  	C_REFCLK_FREQ_MHZ               : integer := 100;
    C_CLOCK_MASTER                  : boolean := true;
    C_FMC_POSITION                  : integer := 0;
  -- ADD USER GENERICS ABOVE THIS LINE ---------------

  -- DO NOT EDIT BELOW THIS LINE ---------------------
  -- Bus protocol parameters, do not add to or delete
      C_S_AXI_DATA_WIDTH             : integer              := 32;
      C_S_AXI_ADDR_WIDTH             : integer              := 32;
      C_S_AXI_MIN_SIZE               : std_logic_vector     := X"000001FF";
      C_USE_WSTRB                    : integer              := 0;
      C_DPHASE_TIMEOUT               : integer              := 8;
      C_BASEADDR                     : std_logic_vector     := X"FFFFFFFF";
      C_HIGHADDR                     : std_logic_vector     := X"00000000";
      C_FAMILY                       : string               := "virtex6"
  -- DO NOT EDIT ABOVE THIS LINE ---------------------
);
port
(
  -- User ports
  i_RefClk200MHz_p             : in std_logic;

  -- SPI PLL
  o_Mi250PllScl_p              : out std_logic;
  o_Mi250PllMosi_p             : out std_logic;
  i_Mi250PllMiso_p             : in  std_logic;
  o_nMi250PllCs_p              : out std_logic;

  -- SPI shared ADC
  o_Mi250AdcScl_p              : out std_logic;
  o_Mi250AdcMosi_p             : out std_logic;
  i_Mi250AdcMiso12_p           : in  std_logic;
  i_Mi250AdcMiso34_p           : in  std_logic;
  i_Mi250AdcMiso56_p           : in  std_logic;
  i_Mi250AdcMiso78_p           : in  std_logic;
  o_nMi250AdcCs12_p            : out std_logic;
  o_nMi250AdcCs34_p            : out std_logic;
  o_nMi250AdcCs56_p            : out std_logic;
  o_nMi250AdcCs78_p            : out std_logic;
  o_Mi250AdcRst_p              : out std_logic;

  -- PLL control
  o_Mi250PllRefEn_p            : out std_logic;
  i_Mi250PllStatus_p           : in std_logic;
  o_Mi250PllFunction_p         : out std_logic;
  o_Mi250VcoPwrEn_p            : out std_logic;

  -- Monitor interrupt
  i_nMi250MonInt_p             : in  std_logic;

  -- Trigger
  i_Mi250TrigToFpga_p          : in  std_logic;
  o_Mi250AdcTrigout_p          : out std_logic;
  
  -- Clocks for test
  i_pMi250ClkToFpga_p          : in  std_logic;
  i_nMi250ClkToFpga_p          : in  std_logic;
  i_pMi250ExternClk_p          : in  std_logic;
  i_nMi250ExternClk_p          : in  std_logic;

  -- ADC interface clocks
  idp_Mi250AdcClk12_p          : in std_logic;
  idn_Mi250AdcClk12_p          : in std_logic;
  idp_Mi250AdcClk34_p          : in std_logic;
  idn_Mi250AdcClk34_p          : in std_logic;
  idp_Mi250AdcClk56_p          : in std_logic;
  idn_Mi250AdcClk56_p          : in std_logic;
  idp_Mi250AdcClk78_p          : in std_logic;
  idn_Mi250AdcClk78_p          : in std_logic;

  -- ADC interface data
  iv7dp_Mi250Adc1Data_p        : in std_logic_vector(6 downto 0);
  iv7dn_Mi250Adc1Data_p        : in std_logic_vector(6 downto 0);
  iv7dp_Mi250Adc2Data_p        : in std_logic_vector(6 downto 0);
  iv7dn_Mi250Adc2Data_p        : in std_logic_vector(6 downto 0);
  iv7dp_Mi250Adc3Data_p        : in std_logic_vector(6 downto 0);
  iv7dn_Mi250Adc3Data_p        : in std_logic_vector(6 downto 0);
  iv7dp_Mi250Adc4Data_p        : in std_logic_vector(6 downto 0);
  iv7dn_Mi250Adc4Data_p        : in std_logic_vector(6 downto 0);
  iv7dp_Mi250Adc5Data_p        : in std_logic_vector(6 downto 0);
  iv7dn_Mi250Adc5Data_p        : in std_logic_vector(6 downto 0);
  iv7dp_Mi250Adc6Data_p        : in std_logic_vector(6 downto 0);
  iv7dn_Mi250Adc6Data_p        : in std_logic_vector(6 downto 0);
  iv7dp_Mi250Adc7Data_p        : in std_logic_vector(6 downto 0);
  iv7dn_Mi250Adc7Data_p        : in std_logic_vector(6 downto 0);
  iv7dp_Mi250Adc8Data_p        : in std_logic_vector(6 downto 0);
  iv7dn_Mi250Adc8Data_p        : in std_logic_vector(6 downto 0);

  -- ADC data clock output
  o_Mi250AdcDataClkOut_p       : out std_logic;

  -- ADC data clock input when clock slave
  i_ClkFromClockMaster_p       : in  std_logic;

  -- ADC data outputs
  ov14_Mi250Adc1DataOut_p      : out std_logic_vector(13 downto 0);
  ov14_Mi250Adc2DataOut_p      : out std_logic_vector(13 downto 0);
  ov14_Mi250Adc3DataOut_p      : out std_logic_vector(13 downto 0);
  ov14_Mi250Adc4DataOut_p      : out std_logic_vector(13 downto 0);
  ov14_Mi250Adc5DataOut_p      : out std_logic_vector(13 downto 0);
  ov14_Mi250Adc6DataOut_p      : out std_logic_vector(13 downto 0);
  ov14_Mi250Adc7DataOut_p      : out std_logic_vector(13 downto 0);
  ov14_Mi250Adc8DataOut_p      : out std_logic_vector(13 downto 0);

  -- ADC data valid outputs
  o_Mi250Adc1DataValid_p       : out std_logic;
  o_Mi250Adc2DataValid_p       : out std_logic;
  o_Mi250Adc3DataValid_p       : out std_logic;
  o_Mi250Adc4DataValid_p       : out std_logic;
  o_Mi250Adc5DataValid_p       : out std_logic;
  o_Mi250Adc6DataValid_p       : out std_logic;
  o_Mi250Adc7DataValid_p       : out std_logic;
  o_Mi250Adc8DataValid_p       : out std_logic;

  -- DO NOT EDIT BELOW THIS LINE ---------------------
  -- Bus protocol ports, do not add to or delete
     S_AXI_ACLK                     : in  std_logic;
     S_AXI_ARESETN                  : in  std_logic;
     S_AXI_AWADDR                   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);
     S_AXI_AWVALID                  : in  std_logic;
     S_AXI_WDATA                    : in  std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
     S_AXI_WSTRB                    : in  std_logic_vector((C_S_AXI_DATA_WIDTH/8)-1 downto 0);
     S_AXI_WVALID                   : in  std_logic;
     S_AXI_BREADY                   : in  std_logic;
     S_AXI_ARADDR                   : in  std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);
     S_AXI_ARVALID                  : in  std_logic;
     S_AXI_RREADY                   : in  std_logic;
     S_AXI_ARREADY                  : out std_logic;
     S_AXI_RDATA                    : out std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
     S_AXI_RRESP                    : out std_logic_vector(1 downto 0);
     S_AXI_RVALID                   : out std_logic;
     S_AXI_WREADY                   : out std_logic;
     S_AXI_BRESP                    : out std_logic_vector(1 downto 0);
     S_AXI_BVALID                   : out std_logic;
     S_AXI_AWREADY                  : out std_logic
  -- DO NOT EDIT ABOVE THIS LINE --
);

 attribute MAX_FANOUT                     : string;
 attribute SIGIS                          : string;
 attribute MAX_FANOUT of S_AXI_ACLK       : signal is "10000";
 attribute MAX_FANOUT of S_AXI_ARESETN    : signal is "10000";
 attribute SIGIS of S_AXI_ACLK            : signal is "Clk";
 attribute SIGIS of S_AXI_ARESETN         : signal is "Rst";

end entity lyt_axi_mi250;

------------------------------------------------------------------------------
-- Architecture section
------------------------------------------------------------------------------

architecture arch of lyt_axi_mi250 is

 ----------------------------------------
 -- Signals declaration
 ----------------------------------------
 -- SPI control
  signal v32_Spi2PlbData_s              : std_logic_vector(31 downto 0);
  signal v32_Plb2SpiData_s              : std_logic_vector(31 downto 0);
  signal v9_PlbRegWriteSel_s            : std_logic_vector(8 downto 0);
  signal v9_PlbRegReadSel_s             : std_logic_vector(8 downto 0);

  signal CoreResetPulse_s              : std_logic;
  signal v2_FmcConnector_s             : std_logic_vector(1 downto 0);
  signal AdcSpiReset_s                 : std_logic;
  signal ChArmed_s                     : std_logic;
  signal v2_TestMode_s                 : std_logic_vector(1 downto 0);
  signal PllStatus_s                     : std_logic;
  signal PllFunction_s                     : std_logic;
  signal PllRefEn_s                     : std_logic;
  signal VcoPwrEn_s                     : std_logic;
  signal SpiUpdaterBusy_s                     : std_logic;
  signal SpiBusy_s                     : std_logic;
  signal SpiReq2_s                     : std_logic;
  signal SpiGnt2_s                     : std_logic;
  signal SpiAck2_s                     : std_logic;
  signal Adc12bMmcmRst_s                : std_logic;
  signal Adc12MmcmLocked_s             : std_logic;
  signal Adc34MmcmRst_s                : std_logic;
  signal Adc34MmcmLocked_s             : std_logic;
  signal Adc56MmcmRst_s                : std_logic;
  signal Adc56MmcmLocked_s             : std_logic;
  signal Adc78MmcmRst_s                : std_logic;
  signal Adc78MmcmLocked_s             : std_logic;

  signal v16_ExternClkFreq_s           : std_logic_vector(15 downto 0);
  signal v16_ClkToFpgaFreq_s           : std_logic_vector(15 downto 0);
  signal v16_Adc12ClkFreq_s            : std_logic_vector(15 downto 0);
  signal v16_Adc34ClkFreq_s            : std_logic_vector(15 downto 0);
  signal v16_Adc56ClkFreq_s            : std_logic_vector(15 downto 0);
  signal v16_Adc78ClkFreq_s            : std_logic_vector(15 downto 0);

  signal v5_Adc12IdelayValue_s        : std_logic_vector(4 downto 0);
  signal v5_Adc34IdelayValue_s        : std_logic_vector(4 downto 0);
  signal v5_Adc56IdelayValue_s        : std_logic_vector(4 downto 0);
  signal v5_Adc78IdelayValue_s        : std_logic_vector(4 downto 0);
  signal v5_Adc12ClkIdelayValue_s     : std_logic_vector(4 downto 0);
  signal v5_Adc34ClkIdelayValue_s     : std_logic_vector(4 downto 0);
  signal v5_Adc56ClkIdelayValue_s     : std_logic_vector(4 downto 0);
  signal v5_Adc78ClkIdelayValue_s     : std_logic_vector(4 downto 0);

  signal Adc12BitSlip_s               : std_logic;
  signal Adc34BitSlip_s               : std_logic;
  signal Adc56BitSlip_s               : std_logic;
  signal Adc78BitSlip_s               : std_logic;

  signal v2_Adc12PatternError_s        : std_logic_vector(1 downto 0);
  signal v2_Adc34PatternError_s        : std_logic_vector(1 downto 0);
  signal v2_Adc56PatternError_s        : std_logic_vector(1 downto 0);
  signal v2_Adc78PatternError_s        : std_logic_vector(1 downto 0);

  -- User signals
  signal v8_SignalStretch_s			      : std_logic_vector(7 downto 0);
  signal CoreReset_s				          : std_logic;

  signal TrigToRegisterR1_s           : std_logic;
  signal TrigToRegister_s             : std_logic;
  signal TrigOutR1_s                  : std_logic;
  
  -- ADC clocks
  signal Adc12ClkBufr_s                : std_logic;
  signal Adc34ClkBufr_s                : std_logic;
  signal Adc56ClkBufr_s                : std_logic;
  signal Adc78ClkBufr_s                : std_logic;
  signal Adc12ClkBufg_s                 : std_logic;
  signal Adc34ClkOut_s                 : std_logic;
  signal Adc56ClkOut_s                 : std_logic;
  signal Adc78ClkOut_s                 : std_logic;

  -- Clock testing signals
  signal ClkToFpga_s                    : std_logic;
  signal ExternClk_s                    : std_logic;
  signal ClkToFpgaBufr_s                : std_logic;
  signal ExternClkBufr_s                : std_logic;

  -- Clock master logic signal
  signal clock_master_s         : std_logic;
  signal DesignClk_s            : std_logic;

  ----------------------------------------
  -- Attribute declaration
  ----------------------------------------
  attribute MAX_FANOUT of CoreReset_s   : signal is "1000";

begin

 ------------------------------------------
 -- instantiate your component here!
 ------------------------------------------
 mi250Top_u0 : mi250_top
  port map(
    -- Global ports
    i_SystemClk_p               => S_AXI_ACLK,
    i_RefClk200MHz_p            => i_RefClk200MHz_p,
    i_Rst_p                     => CoreReset_s,

    -- SPI PLL
    o_Mi250PllScl_p             => o_Mi250PllScl_p,
    o_Mi250PllMosi_p            => o_Mi250PllMosi_p,
    i_Mi250PllMiso_p            => i_Mi250PllMiso_p,
    o_nMi250PllCs_p             => o_nMi250PllCs_p,

    -- SPI shared ADC
    o_Mi250AdcScl_p             => o_Mi250AdcScl_p,
    o_Mi250AdcMosi_p            => o_Mi250AdcMosi_p,
    i_Mi250AdcMiso12_p          => i_Mi250AdcMiso12_p,
    i_Mi250AdcMiso34_p          => i_Mi250AdcMiso34_p,
    i_Mi250AdcMiso56_p          => i_Mi250AdcMiso56_p,
    i_Mi250AdcMiso78_p          => i_Mi250AdcMiso78_p,
    o_nMi250AdcCs12_p           => o_nMi250AdcCs12_p,
    o_nMi250AdcCs34_p           => o_nMi250AdcCs34_p,
    o_nMi250AdcCs56_p           => o_nMi250AdcCs56_p,
    o_nMi250AdcCs78_p           => o_nMi250AdcCs78_p,
    o_Mi250AdcRst_p             => o_Mi250AdcRst_p,

    -- PLL control
    i_Mi250PllStatus_p          => i_Mi250PllStatus_p,
    o_Mi250PllFunction_p        => o_Mi250PllFunction_p,

    -- Monitor interrupt
    i_nMi250MonInt_p            => i_nMi250MonInt_p,

    -- ADC interface clocks
    idp_Mi250AdcClk12_p         => idp_Mi250AdcClk12_p,
    idn_Mi250AdcClk12_p         => idn_Mi250AdcClk12_p,
    idp_Mi250AdcClk34_p         => idp_Mi250AdcClk34_p,
    idn_Mi250AdcClk34_p         => idn_Mi250AdcClk34_p,
    idp_Mi250AdcClk56_p         => idp_Mi250AdcClk56_p,
    idn_Mi250AdcClk56_p         => idn_Mi250AdcClk56_p,
    idp_Mi250AdcClk78_p         => idp_Mi250AdcClk78_p,
    idn_Mi250AdcClk78_p         => idn_Mi250AdcClk78_p,

    -- ADC interface data
    iv7dp_Mi250Adc1Data_p       => iv7dp_Mi250Adc1Data_p,
    iv7dn_Mi250Adc1Data_p       => iv7dn_Mi250Adc1Data_p,
    iv7dp_Mi250Adc2Data_p       => iv7dp_Mi250Adc2Data_p,
    iv7dn_Mi250Adc2Data_p       => iv7dn_Mi250Adc2Data_p,
    iv7dp_Mi250Adc3Data_p       => iv7dp_Mi250Adc3Data_p,
    iv7dn_Mi250Adc3Data_p       => iv7dn_Mi250Adc3Data_p,
    iv7dp_Mi250Adc4Data_p       => iv7dp_Mi250Adc4Data_p,
    iv7dn_Mi250Adc4Data_p       => iv7dn_Mi250Adc4Data_p,
    iv7dp_Mi250Adc5Data_p       => iv7dp_Mi250Adc5Data_p,
    iv7dn_Mi250Adc5Data_p       => iv7dn_Mi250Adc5Data_p,
    iv7dp_Mi250Adc6Data_p       => iv7dp_Mi250Adc6Data_p,
    iv7dn_Mi250Adc6Data_p       => iv7dn_Mi250Adc6Data_p,
    iv7dp_Mi250Adc7Data_p       => iv7dp_Mi250Adc7Data_p,
    iv7dn_Mi250Adc7Data_p       => iv7dn_Mi250Adc7Data_p,
    iv7dp_Mi250Adc8Data_p       => iv7dp_Mi250Adc8Data_p,
    iv7dn_Mi250Adc8Data_p       => iv7dn_Mi250Adc8Data_p,

    iv5_Adc12IdelayValue_p      => v5_Adc12IdelayValue_s,
    iv5_Adc34IdelayValue_p      => v5_Adc34IdelayValue_s,
    iv5_Adc56IdelayValue_p      => v5_Adc56IdelayValue_s,
    iv5_Adc78IdelayValue_p      => v5_Adc78IdelayValue_s,
    iv5_Adc12ClkIdelayValue_p   => v5_Adc12ClkIdelayValue_s,
    iv5_Adc34ClkIdelayValue_p   => v5_Adc34ClkIdelayValue_s,
    iv5_Adc56ClkIdelayValue_p   => v5_Adc56ClkIdelayValue_s,
    iv5_Adc78ClkIdelayValue_p   => v5_Adc78ClkIdelayValue_s,

    i_Adc12BitSlip_p            => Adc12BitSlip_s,
    i_Adc34BitSlip_p            => Adc34BitSlip_s,
    i_Adc56BitSlip_p            => Adc56BitSlip_s,
    i_Adc78BitSlip_p            => Adc78BitSlip_s,

    ov2_Adc12PatternError_p     => v2_Adc12PatternError_s,
    ov2_Adc34PatternError_p     => v2_Adc34PatternError_s,
    ov2_Adc56PatternError_p     => v2_Adc56PatternError_s,
    ov2_Adc78PatternError_p     => v2_Adc78PatternError_s,

    -- ADC interface control signals
    i_ChArmed_p                 => ChArmed_s,
    iv2_TestMode_p              => v2_TestMode_s,

    -- ADC data outputs
    ov14_Mi250Adc1DataOut_p     => ov14_Mi250Adc1DataOut_p,
    ov14_Mi250Adc2DataOut_p     => ov14_Mi250Adc2DataOut_p,
    ov14_Mi250Adc3DataOut_p     => ov14_Mi250Adc3DataOut_p,
    ov14_Mi250Adc4DataOut_p     => ov14_Mi250Adc4DataOut_p,
    ov14_Mi250Adc5DataOut_p     => ov14_Mi250Adc5DataOut_p,
    ov14_Mi250Adc6DataOut_p     => ov14_Mi250Adc6DataOut_p,
    ov14_Mi250Adc7DataOut_p     => ov14_Mi250Adc7DataOut_p,
    ov14_Mi250Adc8DataOut_p     => ov14_Mi250Adc8DataOut_p,

    -- ADC data valid outputs
    o_Mi250Adc1DataValid_p      => o_Mi250Adc1DataValid_p,
    o_Mi250Adc2DataValid_p      => o_Mi250Adc2DataValid_p,
    o_Mi250Adc3DataValid_p      => o_Mi250Adc3DataValid_p,
    o_Mi250Adc4DataValid_p      => o_Mi250Adc4DataValid_p,
    o_Mi250Adc5DataValid_p      => o_Mi250Adc5DataValid_p,
    o_Mi250Adc6DataValid_p      => o_Mi250Adc6DataValid_p,
    o_Mi250Adc7DataValid_p      => o_Mi250Adc7DataValid_p,
    o_Mi250Adc8DataValid_p      => o_Mi250Adc8DataValid_p,

    -- ADC Clock outputs (from BUFR)
    o_Adc12ClkBufr_p            => Adc12ClkBufr_s,
    o_Adc34ClkBufr_p            => Adc34ClkBufr_s,
    o_Adc56ClkBufr_p            => Adc56ClkBufr_s,
    o_Adc78ClkBufr_p            => Adc78ClkBufr_s,

    -- ADC Global clocks (from BUFG)
    i_AdcClkBufg_p              => DesignClk_s,

    -- TO user logic
    o_SpiBusy_p                 => SpiBusy_s,

    -- External module 2 interface
    iv9_writeaddr2_p            => v9_PlbRegWriteSel_s,
    iv9_readaddr2_p             => v9_PlbRegReadSel_s,
    i_req2_p                    => SpiReq2_s,
    iv32_din2_p                 => v32_Plb2SpiData_s,
    o_gnt2_p                    => SpiGnt2_s,
    ov32_dout2_p                => v32_Spi2PlbData_s,
    o_ack2_p                    => SpiAck2_s,

    --From/To custom logic
    i_AdcSpiReset_p             => AdcSpiReset_s,

    o_PllStatus_p               => PllStatus_s,
    i_PllFunction_p             => PllFunction_s
  );

  o_Mi250AdcDataClkOut_p <= DesignClk_s;

  ------------------------------------------------------
  -- Frequency counter for testing Clock-to-FPGA
  ------------------------------------------------------

  ClkToFpga_IBUFDS : IBUFDS
  port map
  (
    O    => ClkToFpga_s,
    I    => i_pMi250ClkToFpga_p,
    IB   => i_nMi250ClkToFpga_p
  );

  ClkToFpga_BUFR_inst : BUFR
  generic map (
    BUFR_DIVIDE => "BYPASS",
    SIM_DEVICE => "VIRTEX6"
  )
  port map (
    O    => ClkToFpgaBufr_s,
    CE   => '1',
    CLR  => '0',
    I    => ClkToFpga_s
  );
  ------------------------------------------------------
  -- Frequency counter for testing External Clock
  ------------------------------------------------------

  ExternClk_IBUFDS : IBUFDS
  port map
  (
    O    => ExternClk_s,
    I    => i_pMi250ExternClk_p,
    IB   => i_nMi250ExternClk_p
  );

  ExternClk_BUFR_inst : BUFR
  generic map (
    BUFR_DIVIDE => "BYPASS",
    SIM_DEVICE => "VIRTEX6"
  )
  port map (
    O    => ExternClkBufr_s,
    CE   => '1',
    CLR  => '0',
    I    => ExternClk_s
  );

  ------------------------------------------------------
  -- Frequency counter for testing External Clock
  ------------------------------------------------------

  ClkModule_l : entity work.clk_module
  generic map (
    C_REFCLK_FREQ_MHZ    => C_REFCLK_FREQ_MHZ
  )
  port map (
    i_Rst_p              => CoreReset_s,
    i_RefClk_p           => S_AXI_ACLK,
    -- Clock inputs (from BUFR)
    i_ClkToFpgaBufr_p    => ClkToFpgaBufr_s,
    i_ExternClkBufr_p    => ExternClkBufr_s,
    i_Adc12ClkBufr_p     => Adc12ClkBufr_s,
    i_Adc34ClkBufr_p     => Adc34ClkBufr_s,
    i_Adc56ClkBufr_p     => Adc56ClkBufr_s,
    i_Adc78ClkBufr_p     => Adc78ClkBufr_s,
    -- Global clock outputs (from BUFG)
    o_Adc12ClkBufg_p        => Adc12ClkBufg_s,
    o_Adc12ClkBufgLocked_p  => Adc12MmcmLocked_s,
    -- Frequency counter outputs
    ov16_ClkToFpgaFreq_p => v16_ClkToFpgaFreq_s,
    ov16_ExternClkFreq_p => v16_ExternClkFreq_s,
    ov16_Adc12ClkFreq_p  => v16_Adc12ClkFreq_s,
    ov16_Adc34ClkFreq_p  => v16_Adc34ClkFreq_s,
    ov16_Adc56ClkFreq_p  => v16_Adc56ClkFreq_s,
    ov16_Adc78ClkFreq_p  => v16_Adc78ClkFreq_s
  );

  -------------------------------------------------------------------------------
  --  If clock master instance, use MMCM generated clock
  -------------------------------------------------------------------------------
  clock_master_gen: if C_CLOCK_MASTER generate
  begin
      clock_master_s  <= '1';
      DesignClk_s     <= Adc12ClkBufg_s;
  end generate clock_master_gen;

  -------------------------------------------------------------------------------
  --  If clock slave instance, use clocks from an other MO1000 core
  -------------------------------------------------------------------------------
  clock_slave_gen: if not C_CLOCK_MASTER generate
  begin
      clock_master_s  <= '0';
      DesignClk_s     <= i_ClkFromClockMaster_p;
  end generate clock_slave_gen;

 --------------------------------------------
 -- User memory mapped logic
 --------------------------------------------
 v2_FmcConnector_s <= std_logic_vector(to_unsigned(C_FMC_POSITION,2));

 USER_LOGIC_I : entity lyt_axi_mi250_v1_00_a.axi_mi250
   generic map
   (
     -- MAP USER GENERICS BELOW THIS LINE ---------------
     --USER generics mapped here
     -- MAP USER GENERICS ABOVE THIS LINE ---------------
     C_S_AXI_DATA_WIDTH        => C_S_AXI_DATA_WIDTH,
     C_S_AXI_ADDR_WIDTH        => C_S_AXI_ADDR_WIDTH,
     C_S_AXI_MIN_SIZE          => C_S_AXI_MIN_SIZE  ,
     C_USE_WSTRB               => C_USE_WSTRB       ,
     C_DPHASE_TIMEOUT          => C_DPHASE_TIMEOUT  ,
     C_BASEADDR                => C_BASEADDR        ,
     C_HIGHADDR                => C_HIGHADDR        ,
     C_FAMILY                  => C_FAMILY
   )
   port map
   (
     -- user_logic entity ports mapping  ---------------
    i_CoreReset_p                   => CoreReset_s,
    o_CoreResetPulse_p              => CoreResetPulse_s,
    iv2_FmcConnector_p              => v2_FmcConnector_s,
    i_clock_master_p                => clock_master_s,
    -- BELOW NEEDED FOR SPI INTERFACE
    iv32_Spi2PlbData_p              => v32_Spi2PlbData_s,
    ov32_Plb2SpiData_p              => v32_Plb2SpiData_s,
    ov9_PlbRegWriteSel_p            => v9_PlbRegWriteSel_s,
    ov9_PlbRegReadSel_p             => v9_PlbRegReadSel_s,
    -- ABOVE NEEDED FOR SPI INTERFACE
     -- ADC control
     o_AdcSpiReset_p                => AdcSpiReset_s,
    i_TriggerToFpga_p               => TrigToRegisterR1_s,
     -- ADC interface control signals
     o_ChArmed_p                    => ChArmed_s,
     ov2_TestMode_p                 => v2_TestMode_s,
     -- PLL control
     i_PllStatus_p                  => PllStatus_s,
     o_PllFunction_p                => PllFunction_s,
    o_PllRefEn_p                    => o_Mi250PllRefEn_p,
    o_VcoPwrEn_p                    => o_Mi250VcoPwrEn_p,
     -- SPI control
     i_SpiUpdaterBusy_p             => SpiUpdaterBusy_s,
     i_SpiBusy_p                    => SpiBusy_s,
     o_SpiReq2_p                    => SpiReq2_s,
     i_SpiGnt2_p                    => SpiGnt2_s,
     i_SpiAck2_p                    => SpiAck2_s,
     -- ADC channels 1 and 2
     o_Adc12MmcmRst_p               => Adc12bMmcmRst_s,
     ov5_Adc12IdelayValue_p         => v5_Adc12IdelayValue_s,
     ov5_Adc12ClkIdelayValue_p      => v5_Adc12ClkIdelayValue_s,
     o_Adc12BitSlip_p               => Adc12BitSlip_s,
     iv2_Adc12PatternError_p        => v2_Adc12PatternError_s,
     i_Adc12MmcmLocked_p            => Adc12MmcmLocked_s,
     -- ADC channels 3 and 4
     o_Adc34MmcmRst_p               => Adc34MmcmRst_s,
     ov5_Adc34IdelayValue_p         => v5_Adc34IdelayValue_s,
     ov5_Adc34ClkIdelayValue_p      => v5_Adc34ClkIdelayValue_s,
     o_Adc34BitSlip_p               => Adc34BitSlip_s,
     iv2_Adc34PatternError_p        => v2_Adc34PatternError_s,
     i_Adc34MmcmLocked_p            => Adc34MmcmLocked_s,
     -- ADC channels 5 and 6
     o_Adc56MmcmRst_p               => Adc56MmcmRst_s,
     ov5_Adc56IdelayValue_p         => v5_Adc56IdelayValue_s,
     ov5_Adc56ClkIdelayValue_p      => v5_Adc56ClkIdelayValue_s,
     o_Adc56BitSlip_p               => Adc56BitSlip_s,
     iv2_Adc56PatternError_p        => v2_Adc56PatternError_s,
     i_Adc56MmcmLocked_p            => Adc56MmcmLocked_s,
     -- ADC channels 7 and 8
     o_Adc78MmcmRst_p               => Adc78MmcmRst_s,
     ov5_Adc78IdelayValue_p         => v5_Adc78IdelayValue_s,
     ov5_Adc78ClkIdelayValue_p      => v5_Adc78ClkIdelayValue_s,
     o_Adc78BitSlip_p               => Adc78BitSlip_s,
     iv2_Adc78PatternError_p        => v2_Adc78PatternError_s,
     i_Adc78MmcmLocked_p            => Adc78MmcmLocked_s,
     -- Voltage monitor
    i_MonInterrupt_p                => i_nMi250MonInt_p,
     -- Clock frequencies
     iv16_ExternClkFreq_p           => v16_ExternClkFreq_s,
     iv16_ClkToFpgaFreq_p           => v16_ClkToFpgaFreq_s,
     iv16_Adc12ClkFreq_p            => v16_Adc12ClkFreq_s,
     iv16_Adc34ClkFreq_p            => v16_Adc34ClkFreq_s,
     iv16_Adc56ClkFreq_p            => v16_Adc56ClkFreq_s,
     iv16_Adc78ClkFreq_p            => v16_Adc78ClkFreq_s,
     -- Bus Protocol Ports mapping --
     S_AXI_ACLK     => S_AXI_ACLK    ,
     S_AXI_ARESETN  => S_AXI_ARESETN ,
     S_AXI_AWADDR   => S_AXI_AWADDR  ,
     S_AXI_AWVALID  => S_AXI_AWVALID ,
     S_AXI_WDATA    => S_AXI_WDATA   ,
     S_AXI_WSTRB    => S_AXI_WSTRB   ,
     S_AXI_WVALID   => S_AXI_WVALID  ,
     S_AXI_BREADY   => S_AXI_BREADY  ,
     S_AXI_ARADDR   => S_AXI_ARADDR  ,
     S_AXI_ARVALID  => S_AXI_ARVALID ,
     S_AXI_RREADY   => S_AXI_RREADY  ,
     S_AXI_ARREADY  => S_AXI_ARREADY ,
     S_AXI_RDATA    => S_AXI_RDATA   ,
     S_AXI_RRESP    => S_AXI_RRESP   ,
     S_AXI_RVALID   => S_AXI_RVALID  ,
     S_AXI_WREADY   => S_AXI_WREADY  ,
     S_AXI_BRESP    => S_AXI_BRESP   ,
     S_AXI_BVALID   => S_AXI_BVALID  ,
     S_AXI_AWREADY  => S_AXI_AWREADY
    );

  --------------------------------------------
  -- SW reset pulse stretcher.
  --------------------------------------------
  Process(S_AXI_ACLK)
  begin
    if rising_edge(S_AXI_ACLK) then
      v8_SignalStretch_s <= v8_SignalStretch_s(6 downto 0) & CoreResetPulse_s;
      CoreReset_s <= or_reduce(v8_SignalStretch_s);
    end if;
  end process;

  ------------------------------------------------------
  -- Trigger signal
  ------------------------------------------------------
  -- Double latch to avoid metastability
  process(designClk_s)
  begin
    if rising_edge(designClk_s) then
      TrigOutR1_s <= i_Mi250TrigToFpga_p;
      o_Mi250AdcTrigout_p <= TrigOutR1_s;
      
      TrigToRegister_s <= i_Mi250TrigToFpga_p;
      TrigToRegisterR1_s <= TrigToRegister_s;
      
    end if;
  end process;
  
end arch;
