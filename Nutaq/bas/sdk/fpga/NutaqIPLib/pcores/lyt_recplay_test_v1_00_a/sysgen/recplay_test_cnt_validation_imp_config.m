
function recplay_test_cnt_validation_imp_config(this_block)

  % Revision History:
  %
  %   27-Sep-2012  (13:53 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     C:\dev_perseus\projets\adp\matlab\examples\perseus601x\perseus601x_record_playback_rtdex_fpga_files\recplay_test_cnt_validation_imp.vhd
  %
  %

  this_block.setTopLevelLanguage('VHDL');

  this_block.setEntityName('RecPlayTestCntValidationImp');

  % System Generator has to assume that your entity  has a combinational feed through;
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;

  this_block.addSimulinkInport('i_Reset_p');
  this_block.addSimulinkInport('i_Start_p');
  this_block.addSimulinkInport('iv_DataPort0_p');
  this_block.addSimulinkInport('iv_DataPort1_p');
  this_block.addSimulinkInport('i_Valid_p');
  this_block.addSimulinkInport('iv32_Divnt_p');
  this_block.addSimulinkInport('iv32_MaxData_p');

  this_block.addSimulinkOutport('ov16_NbErrorsPort0_p');
  this_block.addSimulinkOutport('ov16_NbErrorsPort1_p');
  this_block.addSimulinkOutport('ov32_RampCnt_p');

  ov16_NbErrorsPort0_p_port = this_block.port('ov16_NbErrorsPort0_p');
  ov16_NbErrorsPort0_p_port.setType('UFix_16_0');
  ov16_NbErrorsPort1_p_port = this_block.port('ov16_NbErrorsPort1_p');
  ov16_NbErrorsPort1_p_port.setType('UFix_16_0');
  ov32_RampCnt_p_port = this_block.port('ov32_RampCnt_p');
  ov32_RampCnt_p_port.setType('UFix_32_0');

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('i_Reset_p').width ~= 1);
      this_block.setError('Input data type for port "i_Reset_p" must have width=1.');
    end

    this_block.port('i_Reset_p').useHDLVector(false);

    if (this_block.port('i_Start_p').width ~= 1);
      this_block.setError('Input data type for port "i_Start_p" must have width=1.');
    end

    this_block.port('i_Start_p').useHDLVector(false);

    if (this_block.port('iv_DataPort0_p').width ~= 16);
      this_block.setError('Input data type for port "iv_DataPort0_p" must have width=16.');
    end

    if (this_block.port('iv_DataPort1_p').width ~= 16);
      this_block.setError('Input data type for port "iv_DataPort1_p" must have width=16.');
    end

    if (this_block.port('i_Valid_p').width ~= 1);
      this_block.setError('Input data type for port "i_Valid_p" must have width=1.');
    end

    this_block.port('i_Valid_p').useHDLVector(false);

    if (this_block.port('iv32_Divnt_p').width ~= 32);
      this_block.setError('Input data type for port "iv32_Divnt_p" must have width=32.');
    end

    if (this_block.port('iv32_MaxData_p').width ~= 32);
      this_block.setError('Input data type for port "iv32_MaxData_p" must have width=32.');
    end

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk','ce')
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);


  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  basroot = getenv('BASROOT');
  this_block.addFile([basroot '/sdk/fpga/NutaqIPLib/pcores/lyt_recplay_test_v1_00_a/sysgen/recplay_test_cnt_validation_imp.vhd']);
  this_block.addFile([basroot '/sdk/fpga/NutaqIPLib/pcores/lyt_recplay_test_v1_00_a/hdl/vhdl/recplay_test_cnt_validation.vhd']);

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename)
  inputRates = block.inputRates;
  uniqueInputRates = unique(inputRates);
  if (length(uniqueInputRates)==1 && uniqueInputRates(1)==Inf)
    block.addError('The inputs to this block cannot all be constant.');
    return;
  end
  if (uniqueInputRates(end) == Inf)
     hasConstantInput = true;
     uniqueInputRates = uniqueInputRates(1:end-1);
  end
  if (length(uniqueInputRates) ~= 1)
    block.addError('The inputs to this block must run at a single rate.');
    return;
  end
  theInputRate = uniqueInputRates(1);
  for i = 1:block.numSimulinkOutports
     block.outport(i).setRate(theInputRate);
  end
  block.addClkCEPair(clkname,cename,theInputRate);
  return;

% ------------------------------------------------------------

