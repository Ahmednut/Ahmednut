
function lyt_rtdex_test_imp_config(this_block)

  % Revision History:
  %
  %   16-Nov-2015  (14:43 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     C:\CVS_projets_CBOU\projets\bas\sdk\fpga\NutaqIPLib\pcores\lyt_rtdex_test_v1_00_a\sysgen\lyt_rtdex_test_imp.vhd
  %
  %

  this_block.setTopLevelLanguage('VHDL');

  this_block.setEntityName('lyt_rtdex_test_imp');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;

  this_block.addSimulinkInport('iv8_TxReset_p');
  this_block.addSimulinkInport('iv8_RxStart_p');
  this_block.addSimulinkInport('iv8_TxStart_p');
  this_block.addSimulinkInport('iv8_RxReset_p');
  this_block.addSimulinkInport('iv32_DivntCh0_p');
  this_block.addSimulinkInport('iv32_DivntCh1_p');
  this_block.addSimulinkInport('iv32_DivntCh2_p');
  this_block.addSimulinkInport('iv32_DivntCh3_p');
  this_block.addSimulinkInport('iv32_DivntCh4_p');
  this_block.addSimulinkInport('iv32_DivntCh5_p');
  this_block.addSimulinkInport('iv32_DivntCh6_p');
  this_block.addSimulinkInport('iv32_DivntCh7_p');
  this_block.addSimulinkInport('iv32_TxInitDataCh0_p');
  this_block.addSimulinkInport('iv32_TxInitDataCh1_p');
  this_block.addSimulinkInport('iv32_TxInitDataCh2_p');
  this_block.addSimulinkInport('iv32_TxInitDataCh3_p');
  this_block.addSimulinkInport('iv32_TxInitDataCh4_p');
  this_block.addSimulinkInport('iv32_TxInitDataCh5_p');
  this_block.addSimulinkInport('iv32_TxInitDataCh6_p');
  this_block.addSimulinkInport('iv32_TxInitDataCh7_p');
  this_block.addSimulinkInport('iv8_RxTxLoopBackEn_p');
  this_block.addSimulinkInport('iv32_RxEnDivCnt_p');
  this_block.addSimulinkInport('i_RxReadyCh0_p');
  this_block.addSimulinkInport('iv_RxDataCh0_p');
  this_block.addSimulinkInport('i_RxDataValidCh0_p');
  this_block.addSimulinkInport('i_RxReadyCh1_p');
  this_block.addSimulinkInport('iv_RxDataCh1_p');
  this_block.addSimulinkInport('i_RxDataValidCh1_p');
  this_block.addSimulinkInport('i_RxReadyCh2_p');
  this_block.addSimulinkInport('iv_RxDataCh2_p');
  this_block.addSimulinkInport('i_RxDataValidCh2_p');
  this_block.addSimulinkInport('i_RxReadyCh3_p');
  this_block.addSimulinkInport('iv_RxDataCh3_p');
  this_block.addSimulinkInport('i_RxDataValidCh3_p');
  this_block.addSimulinkInport('i_RxReadyCh4_p');
  this_block.addSimulinkInport('iv_RxDataCh4_p');
  this_block.addSimulinkInport('i_RxDataValidCh4_p');
  this_block.addSimulinkInport('i_RxReadyCh5_p');
  this_block.addSimulinkInport('iv_RxDataCh5_p');
  this_block.addSimulinkInport('i_RxDataValidCh5_p');
  this_block.addSimulinkInport('i_RxReadyCh6_p');
  this_block.addSimulinkInport('iv_RxDataCh6_p');
  this_block.addSimulinkInport('i_RxDataValidCh6_p');
  this_block.addSimulinkInport('i_RxReadyCh7_p');
  this_block.addSimulinkInport('iv_RxDataCh7_p');
  this_block.addSimulinkInport('i_RxDataValidCh7_p');
  this_block.addSimulinkInport('i_TxReadyCh0_p');
  this_block.addSimulinkInport('i_TxReadyCh1_p');
  this_block.addSimulinkInport('i_TxReadyCh2_p');
  this_block.addSimulinkInport('i_TxReadyCh3_p');
  this_block.addSimulinkInport('i_TxReadyCh4_p');
  this_block.addSimulinkInport('i_TxReadyCh5_p');
  this_block.addSimulinkInport('i_TxReadyCh6_p');
  this_block.addSimulinkInport('i_TxReadyCh7_p');
  this_block.addSimulinkInport('i_DisableFlowControl_p');

  this_block.addSimulinkOutport('ov32_ErrorCntCh0_p');
  this_block.addSimulinkOutport('ov32_ErrorCntCh1_p');
  this_block.addSimulinkOutport('ov32_ErrorCntCh2_p');
  this_block.addSimulinkOutport('ov32_ErrorCntCh3_p');
  this_block.addSimulinkOutport('ov32_ErrorCntCh4_p');
  this_block.addSimulinkOutport('ov32_ErrorCntCh5_p');
  this_block.addSimulinkOutport('ov32_ErrorCntCh6_p');
  this_block.addSimulinkOutport('ov32_ErrorCntCh7_p');
  this_block.addSimulinkOutport('ov32_RxReceivedBytesCh0_p');
  this_block.addSimulinkOutport('ov32_RxReceivedBytesCh1_p');
  this_block.addSimulinkOutport('ov32_RxReceivedBytesCh2_p');
  this_block.addSimulinkOutport('ov32_RxReceivedBytesCh3_p');
  this_block.addSimulinkOutport('ov32_RxReceivedBytesCh4_p');
  this_block.addSimulinkOutport('ov32_RxReceivedBytesCh5_p');
  this_block.addSimulinkOutport('ov32_RxReceivedBytesCh6_p');
  this_block.addSimulinkOutport('ov32_RxReceivedBytesCh7_p');
  this_block.addSimulinkOutport('o_RxReCh0_p');
  this_block.addSimulinkOutport('o_RxReCh1_p');
  this_block.addSimulinkOutport('o_RxReCh2_p');
  this_block.addSimulinkOutport('o_RxReCh3_p');
  this_block.addSimulinkOutport('o_RxReCh4_p');
  this_block.addSimulinkOutport('o_RxReCh5_p');
  this_block.addSimulinkOutport('o_RxReCh6_p');
  this_block.addSimulinkOutport('o_RxReCh7_p');
  this_block.addSimulinkOutport('o_TxWeCh0_p');
  this_block.addSimulinkOutport('ov_TxDataCh0_p');
  this_block.addSimulinkOutport('o_TxWeCh1_p');
  this_block.addSimulinkOutport('ov_TxDataCh1_p');
  this_block.addSimulinkOutport('o_TxWeCh2_p');
  this_block.addSimulinkOutport('ov_TxDataCh2_p');
  this_block.addSimulinkOutport('o_TxWeCh3_p');
  this_block.addSimulinkOutport('ov_TxDataCh3_p');
  this_block.addSimulinkOutport('o_TxWeCh4_p');
  this_block.addSimulinkOutport('ov_TxDataCh4_p');
  this_block.addSimulinkOutport('o_TxWeCh5_p');
  this_block.addSimulinkOutport('ov_TxDataCh5_p');
  this_block.addSimulinkOutport('o_TxWeCh6_p');
  this_block.addSimulinkOutport('ov_TxDataCh6_p');
  this_block.addSimulinkOutport('o_TxWeCh7_p');
  this_block.addSimulinkOutport('ov_TxDataCh7_p');
  this_block.addSimulinkOutport('ov32_TxOverflowCh0_p');
  this_block.addSimulinkOutport('ov32_TxOverflowCh1_p');
  this_block.addSimulinkOutport('ov32_TxOverflowCh2_p');
  this_block.addSimulinkOutport('ov32_TxOverflowCh3_p');
  this_block.addSimulinkOutport('ov32_TxOverflowCh4_p');
  this_block.addSimulinkOutport('ov32_TxOverflowCh5_p');
  this_block.addSimulinkOutport('ov32_TxOverflowCh6_p');
  this_block.addSimulinkOutport('ov32_TxOverflowCh7_p');
  this_block.addSimulinkOutport('ov32_RxUnderflowCh0_p');
  this_block.addSimulinkOutport('ov32_RxUnderflowCh1_p');
  this_block.addSimulinkOutport('ov32_RxUnderflowCh2_p');
  this_block.addSimulinkOutport('ov32_RxUnderflowCh3_p');
  this_block.addSimulinkOutport('ov32_RxUnderflowCh4_p');
  this_block.addSimulinkOutport('ov32_RxUnderflowCh5_p');
  this_block.addSimulinkOutport('ov32_RxUnderflowCh6_p');
  this_block.addSimulinkOutport('ov32_RxUnderflowCh7_p');

  ov32_ErrorCntCh0_p_port = this_block.port('ov32_ErrorCntCh0_p');
  ov32_ErrorCntCh0_p_port.setType('UFix_32_0');
  ov32_ErrorCntCh1_p_port = this_block.port('ov32_ErrorCntCh1_p');
  ov32_ErrorCntCh1_p_port.setType('UFix_32_0');
  ov32_ErrorCntCh2_p_port = this_block.port('ov32_ErrorCntCh2_p');
  ov32_ErrorCntCh2_p_port.setType('UFix_32_0');
  ov32_ErrorCntCh3_p_port = this_block.port('ov32_ErrorCntCh3_p');
  ov32_ErrorCntCh3_p_port.setType('UFix_32_0');
  ov32_ErrorCntCh4_p_port = this_block.port('ov32_ErrorCntCh4_p');
  ov32_ErrorCntCh4_p_port.setType('UFix_32_0');
  ov32_ErrorCntCh5_p_port = this_block.port('ov32_ErrorCntCh5_p');
  ov32_ErrorCntCh5_p_port.setType('UFix_32_0');
  ov32_ErrorCntCh6_p_port = this_block.port('ov32_ErrorCntCh6_p');
  ov32_ErrorCntCh6_p_port.setType('UFix_32_0');
  ov32_ErrorCntCh7_p_port = this_block.port('ov32_ErrorCntCh7_p');
  ov32_ErrorCntCh7_p_port.setType('UFix_32_0');
  ov32_RxReceivedBytesCh0_p_port = this_block.port('ov32_RxReceivedBytesCh0_p');
  ov32_RxReceivedBytesCh0_p_port.setType('UFix_32_0');
  ov32_RxReceivedBytesCh1_p_port = this_block.port('ov32_RxReceivedBytesCh1_p');
  ov32_RxReceivedBytesCh1_p_port.setType('UFix_32_0');
  ov32_RxReceivedBytesCh2_p_port = this_block.port('ov32_RxReceivedBytesCh2_p');
  ov32_RxReceivedBytesCh2_p_port.setType('UFix_32_0');
  ov32_RxReceivedBytesCh3_p_port = this_block.port('ov32_RxReceivedBytesCh3_p');
  ov32_RxReceivedBytesCh3_p_port.setType('UFix_32_0');
  ov32_RxReceivedBytesCh4_p_port = this_block.port('ov32_RxReceivedBytesCh4_p');
  ov32_RxReceivedBytesCh4_p_port.setType('UFix_32_0');
  ov32_RxReceivedBytesCh5_p_port = this_block.port('ov32_RxReceivedBytesCh5_p');
  ov32_RxReceivedBytesCh5_p_port.setType('UFix_32_0');
  ov32_RxReceivedBytesCh6_p_port = this_block.port('ov32_RxReceivedBytesCh6_p');
  ov32_RxReceivedBytesCh6_p_port.setType('UFix_32_0');
  ov32_RxReceivedBytesCh7_p_port = this_block.port('ov32_RxReceivedBytesCh7_p');
  ov32_RxReceivedBytesCh7_p_port.setType('UFix_32_0');
  o_RxReCh0_p_port = this_block.port('o_RxReCh0_p');
  o_RxReCh0_p_port.setType('UFix_1_0');
  o_RxReCh0_p_port.useHDLVector(false);
  o_RxReCh1_p_port = this_block.port('o_RxReCh1_p');
  o_RxReCh1_p_port.setType('UFix_1_0');
  o_RxReCh1_p_port.useHDLVector(false);
  o_RxReCh2_p_port = this_block.port('o_RxReCh2_p');
  o_RxReCh2_p_port.setType('UFix_1_0');
  o_RxReCh2_p_port.useHDLVector(false);
  o_RxReCh3_p_port = this_block.port('o_RxReCh3_p');
  o_RxReCh3_p_port.setType('UFix_1_0');
  o_RxReCh3_p_port.useHDLVector(false);
  o_RxReCh4_p_port = this_block.port('o_RxReCh4_p');
  o_RxReCh4_p_port.setType('UFix_1_0');
  o_RxReCh4_p_port.useHDLVector(false);
  o_RxReCh5_p_port = this_block.port('o_RxReCh5_p');
  o_RxReCh5_p_port.setType('UFix_1_0');
  o_RxReCh5_p_port.useHDLVector(false);
  o_RxReCh6_p_port = this_block.port('o_RxReCh6_p');
  o_RxReCh6_p_port.setType('UFix_1_0');
  o_RxReCh6_p_port.useHDLVector(false);
  o_RxReCh7_p_port = this_block.port('o_RxReCh7_p');
  o_RxReCh7_p_port.setType('UFix_1_0');
  o_RxReCh7_p_port.useHDLVector(false);
  o_TxWeCh0_p_port = this_block.port('o_TxWeCh0_p');
  o_TxWeCh0_p_port.setType('UFix_1_0');
  o_TxWeCh0_p_port.useHDLVector(false);
  ov_TxDataCh0_p_port = this_block.port('ov_TxDataCh0_p');
  ov_TxDataCh0_p_port.setType('UFix_32_0');
  o_TxWeCh1_p_port = this_block.port('o_TxWeCh1_p');
  o_TxWeCh1_p_port.setType('UFix_1_0');
  o_TxWeCh1_p_port.useHDLVector(false);
  ov_TxDataCh1_p_port = this_block.port('ov_TxDataCh1_p');
  ov_TxDataCh1_p_port.setType('UFix_32_0');
  o_TxWeCh2_p_port = this_block.port('o_TxWeCh2_p');
  o_TxWeCh2_p_port.setType('UFix_1_0');
  o_TxWeCh2_p_port.useHDLVector(false);
  ov_TxDataCh2_p_port = this_block.port('ov_TxDataCh2_p');
  ov_TxDataCh2_p_port.setType('UFix_32_0');
  o_TxWeCh3_p_port = this_block.port('o_TxWeCh3_p');
  o_TxWeCh3_p_port.setType('UFix_1_0');
  o_TxWeCh3_p_port.useHDLVector(false);
  ov_TxDataCh3_p_port = this_block.port('ov_TxDataCh3_p');
  ov_TxDataCh3_p_port.setType('UFix_32_0');
  o_TxWeCh4_p_port = this_block.port('o_TxWeCh4_p');
  o_TxWeCh4_p_port.setType('UFix_1_0');
  o_TxWeCh4_p_port.useHDLVector(false);
  ov_TxDataCh4_p_port = this_block.port('ov_TxDataCh4_p');
  ov_TxDataCh4_p_port.setType('UFix_32_0');
  o_TxWeCh5_p_port = this_block.port('o_TxWeCh5_p');
  o_TxWeCh5_p_port.setType('UFix_1_0');
  o_TxWeCh5_p_port.useHDLVector(false);
  ov_TxDataCh5_p_port = this_block.port('ov_TxDataCh5_p');
  ov_TxDataCh5_p_port.setType('UFix_32_0');
  o_TxWeCh6_p_port = this_block.port('o_TxWeCh6_p');
  o_TxWeCh6_p_port.setType('UFix_1_0');
  o_TxWeCh6_p_port.useHDLVector(false);
  ov_TxDataCh6_p_port = this_block.port('ov_TxDataCh6_p');
  ov_TxDataCh6_p_port.setType('UFix_32_0');
  o_TxWeCh7_p_port = this_block.port('o_TxWeCh7_p');
  o_TxWeCh7_p_port.setType('UFix_1_0');
  o_TxWeCh7_p_port.useHDLVector(false);
  ov_TxDataCh7_p_port = this_block.port('ov_TxDataCh7_p');
  ov_TxDataCh7_p_port.setType('UFix_32_0');
  ov32_TxOverflowCh0_p_port = this_block.port('ov32_TxOverflowCh0_p');
  ov32_TxOverflowCh0_p_port.setType('UFix_32_0');
  ov32_TxOverflowCh1_p_port = this_block.port('ov32_TxOverflowCh1_p');
  ov32_TxOverflowCh1_p_port.setType('UFix_32_0');
  ov32_TxOverflowCh2_p_port = this_block.port('ov32_TxOverflowCh2_p');
  ov32_TxOverflowCh2_p_port.setType('UFix_32_0');
  ov32_TxOverflowCh3_p_port = this_block.port('ov32_TxOverflowCh3_p');
  ov32_TxOverflowCh3_p_port.setType('UFix_32_0');
  ov32_TxOverflowCh4_p_port = this_block.port('ov32_TxOverflowCh4_p');
  ov32_TxOverflowCh4_p_port.setType('UFix_32_0');
  ov32_TxOverflowCh5_p_port = this_block.port('ov32_TxOverflowCh5_p');
  ov32_TxOverflowCh5_p_port.setType('UFix_32_0');
  ov32_TxOverflowCh6_p_port = this_block.port('ov32_TxOverflowCh6_p');
  ov32_TxOverflowCh6_p_port.setType('UFix_32_0');
  ov32_TxOverflowCh7_p_port = this_block.port('ov32_TxOverflowCh7_p');
  ov32_TxOverflowCh7_p_port.setType('UFix_32_0');
  ov32_RxUnderflowCh0_p_port = this_block.port('ov32_RxUnderflowCh0_p');
  ov32_RxUnderflowCh0_p_port.setType('UFix_32_0');
  ov32_RxUnderflowCh1_p_port = this_block.port('ov32_RxUnderflowCh1_p');
  ov32_RxUnderflowCh1_p_port.setType('UFix_32_0');
  ov32_RxUnderflowCh2_p_port = this_block.port('ov32_RxUnderflowCh2_p');
  ov32_RxUnderflowCh2_p_port.setType('UFix_32_0');
  ov32_RxUnderflowCh3_p_port = this_block.port('ov32_RxUnderflowCh3_p');
  ov32_RxUnderflowCh3_p_port.setType('UFix_32_0');
  ov32_RxUnderflowCh4_p_port = this_block.port('ov32_RxUnderflowCh4_p');
  ov32_RxUnderflowCh4_p_port.setType('UFix_32_0');
  ov32_RxUnderflowCh5_p_port = this_block.port('ov32_RxUnderflowCh5_p');
  ov32_RxUnderflowCh5_p_port.setType('UFix_32_0');
  ov32_RxUnderflowCh6_p_port = this_block.port('ov32_RxUnderflowCh6_p');
  ov32_RxUnderflowCh6_p_port.setType('UFix_32_0');
  ov32_RxUnderflowCh7_p_port = this_block.port('ov32_RxUnderflowCh7_p');
  ov32_RxUnderflowCh7_p_port.setType('UFix_32_0');

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('iv8_TxReset_p').width ~= 8);
      this_block.setError('Input data type for port "iv8_TxReset_p" must have width=8.');
    end

    if (this_block.port('iv8_RxStart_p').width ~= 8);
      this_block.setError('Input data type for port "iv8_RxStart_p" must have width=8.');
    end

    if (this_block.port('iv8_TxStart_p').width ~= 8);
      this_block.setError('Input data type for port "iv8_TxStart_p" must have width=8.');
    end

    if (this_block.port('iv8_RxReset_p').width ~= 8);
      this_block.setError('Input data type for port "iv8_RxReset_p" must have width=8.');
    end

    if (this_block.port('iv32_DivntCh0_p').width ~= 32);
      this_block.setError('Input data type for port "iv32_DivntCh0_p" must have width=32.');
    end

    if (this_block.port('iv32_DivntCh1_p').width ~= 32);
      this_block.setError('Input data type for port "iv32_DivntCh1_p" must have width=32.');
    end

    if (this_block.port('iv32_DivntCh2_p').width ~= 32);
      this_block.setError('Input data type for port "iv32_DivntCh2_p" must have width=32.');
    end

    if (this_block.port('iv32_DivntCh3_p').width ~= 32);
      this_block.setError('Input data type for port "iv32_DivntCh3_p" must have width=32.');
    end

    if (this_block.port('iv32_DivntCh4_p').width ~= 32);
      this_block.setError('Input data type for port "iv32_DivntCh4_p" must have width=32.');
    end

    if (this_block.port('iv32_DivntCh5_p').width ~= 32);
      this_block.setError('Input data type for port "iv32_DivntCh5_p" must have width=32.');
    end

    if (this_block.port('iv32_DivntCh6_p').width ~= 32);
      this_block.setError('Input data type for port "iv32_DivntCh6_p" must have width=32.');
    end

    if (this_block.port('iv32_DivntCh7_p').width ~= 32);
      this_block.setError('Input data type for port "iv32_DivntCh7_p" must have width=32.');
    end

    if (this_block.port('iv32_TxInitDataCh0_p').width ~= 32);
      this_block.setError('Input data type for port "iv32_TxInitDataCh0_p" must have width=32.');
    end

    if (this_block.port('iv32_TxInitDataCh1_p').width ~= 32);
      this_block.setError('Input data type for port "iv32_TxInitDataCh1_p" must have width=32.');
    end

    if (this_block.port('iv32_TxInitDataCh2_p').width ~= 32);
      this_block.setError('Input data type for port "iv32_TxInitDataCh2_p" must have width=32.');
    end

    if (this_block.port('iv32_TxInitDataCh3_p').width ~= 32);
      this_block.setError('Input data type for port "iv32_TxInitDataCh3_p" must have width=32.');
    end

    if (this_block.port('iv32_TxInitDataCh4_p').width ~= 32);
      this_block.setError('Input data type for port "iv32_TxInitDataCh4_p" must have width=32.');
    end

    if (this_block.port('iv32_TxInitDataCh5_p').width ~= 32);
      this_block.setError('Input data type for port "iv32_TxInitDataCh5_p" must have width=32.');
    end

    if (this_block.port('iv32_TxInitDataCh6_p').width ~= 32);
      this_block.setError('Input data type for port "iv32_TxInitDataCh6_p" must have width=32.');
    end

    if (this_block.port('iv32_TxInitDataCh7_p').width ~= 32);
      this_block.setError('Input data type for port "iv32_TxInitDataCh7_p" must have width=32.');
    end

    if (this_block.port('iv8_RxTxLoopBackEn_p').width ~= 8);
      this_block.setError('Input data type for port "iv8_RxTxLoopBackEn_p" must have width=8.');
    end

    if (this_block.port('iv32_RxEnDivCnt_p').width ~= 32);
      this_block.setError('Input data type for port "iv32_RxEnDivCnt_p" must have width=32.');
    end

    if (this_block.port('i_RxReadyCh0_p').width ~= 1);
      this_block.setError('Input data type for port "i_RxReadyCh0_p" must have width=1.');
    end

    this_block.port('i_RxReadyCh0_p').useHDLVector(false);

    if (this_block.port('iv_RxDataCh0_p').width ~= 32);
      this_block.setError('Input data type for port "iv_RxDataCh0_p" must have width=32.');
    end

    if (this_block.port('i_RxDataValidCh0_p').width ~= 1);
      this_block.setError('Input data type for port "i_RxDataValidCh0_p" must have width=1.');
    end

    this_block.port('i_RxDataValidCh0_p').useHDLVector(false);

    if (this_block.port('i_RxReadyCh1_p').width ~= 1);
      this_block.setError('Input data type for port "i_RxReadyCh1_p" must have width=1.');
    end

    this_block.port('i_RxReadyCh1_p').useHDLVector(false);

    if (this_block.port('iv_RxDataCh1_p').width ~= 32);
      this_block.setError('Input data type for port "iv_RxDataCh1_p" must have width=32.');
    end

    if (this_block.port('i_RxDataValidCh1_p').width ~= 1);
      this_block.setError('Input data type for port "i_RxDataValidCh1_p" must have width=1.');
    end

    this_block.port('i_RxDataValidCh1_p').useHDLVector(false);

    if (this_block.port('i_RxReadyCh2_p').width ~= 1);
      this_block.setError('Input data type for port "i_RxReadyCh2_p" must have width=1.');
    end

    this_block.port('i_RxReadyCh2_p').useHDLVector(false);

    if (this_block.port('iv_RxDataCh2_p').width ~= 32);
      this_block.setError('Input data type for port "iv_RxDataCh2_p" must have width=32.');
    end

    if (this_block.port('i_RxDataValidCh2_p').width ~= 1);
      this_block.setError('Input data type for port "i_RxDataValidCh2_p" must have width=1.');
    end

    this_block.port('i_RxDataValidCh2_p').useHDLVector(false);

    if (this_block.port('i_RxReadyCh3_p').width ~= 1);
      this_block.setError('Input data type for port "i_RxReadyCh3_p" must have width=1.');
    end

    this_block.port('i_RxReadyCh3_p').useHDLVector(false);

    if (this_block.port('iv_RxDataCh3_p').width ~= 32);
      this_block.setError('Input data type for port "iv_RxDataCh3_p" must have width=32.');
    end

    if (this_block.port('i_RxDataValidCh3_p').width ~= 1);
      this_block.setError('Input data type for port "i_RxDataValidCh3_p" must have width=1.');
    end

    this_block.port('i_RxDataValidCh3_p').useHDLVector(false);

    if (this_block.port('i_RxReadyCh4_p').width ~= 1);
      this_block.setError('Input data type for port "i_RxReadyCh4_p" must have width=1.');
    end

    this_block.port('i_RxReadyCh4_p').useHDLVector(false);

    if (this_block.port('iv_RxDataCh4_p').width ~= 32);
      this_block.setError('Input data type for port "iv_RxDataCh4_p" must have width=32.');
    end

    if (this_block.port('i_RxDataValidCh4_p').width ~= 1);
      this_block.setError('Input data type for port "i_RxDataValidCh4_p" must have width=1.');
    end

    this_block.port('i_RxDataValidCh4_p').useHDLVector(false);

    if (this_block.port('i_RxReadyCh5_p').width ~= 1);
      this_block.setError('Input data type for port "i_RxReadyCh5_p" must have width=1.');
    end

    this_block.port('i_RxReadyCh5_p').useHDLVector(false);

    if (this_block.port('iv_RxDataCh5_p').width ~= 32);
      this_block.setError('Input data type for port "iv_RxDataCh5_p" must have width=32.');
    end

    if (this_block.port('i_RxDataValidCh5_p').width ~= 1);
      this_block.setError('Input data type for port "i_RxDataValidCh5_p" must have width=1.');
    end

    this_block.port('i_RxDataValidCh5_p').useHDLVector(false);

    if (this_block.port('i_RxReadyCh6_p').width ~= 1);
      this_block.setError('Input data type for port "i_RxReadyCh6_p" must have width=1.');
    end

    this_block.port('i_RxReadyCh6_p').useHDLVector(false);

    if (this_block.port('iv_RxDataCh6_p').width ~= 32);
      this_block.setError('Input data type for port "iv_RxDataCh6_p" must have width=32.');
    end

    if (this_block.port('i_RxDataValidCh6_p').width ~= 1);
      this_block.setError('Input data type for port "i_RxDataValidCh6_p" must have width=1.');
    end

    this_block.port('i_RxDataValidCh6_p').useHDLVector(false);

    if (this_block.port('i_RxReadyCh7_p').width ~= 1);
      this_block.setError('Input data type for port "i_RxReadyCh7_p" must have width=1.');
    end

    this_block.port('i_RxReadyCh7_p').useHDLVector(false);

    if (this_block.port('iv_RxDataCh7_p').width ~= 32);
      this_block.setError('Input data type for port "iv_RxDataCh7_p" must have width=32.');
    end

    if (this_block.port('i_RxDataValidCh7_p').width ~= 1);
      this_block.setError('Input data type for port "i_RxDataValidCh7_p" must have width=1.');
    end

    this_block.port('i_RxDataValidCh7_p').useHDLVector(false);

    if (this_block.port('i_TxReadyCh0_p').width ~= 1);
      this_block.setError('Input data type for port "i_TxReadyCh0_p" must have width=1.');
    end

    this_block.port('i_TxReadyCh0_p').useHDLVector(false);

    if (this_block.port('i_TxReadyCh1_p').width ~= 1);
      this_block.setError('Input data type for port "i_TxReadyCh1_p" must have width=1.');
    end

    this_block.port('i_TxReadyCh1_p').useHDLVector(false);

    if (this_block.port('i_TxReadyCh2_p').width ~= 1);
      this_block.setError('Input data type for port "i_TxReadyCh2_p" must have width=1.');
    end

    this_block.port('i_TxReadyCh2_p').useHDLVector(false);

    if (this_block.port('i_TxReadyCh3_p').width ~= 1);
      this_block.setError('Input data type for port "i_TxReadyCh3_p" must have width=1.');
    end

    this_block.port('i_TxReadyCh3_p').useHDLVector(false);

    if (this_block.port('i_TxReadyCh4_p').width ~= 1);
      this_block.setError('Input data type for port "i_TxReadyCh4_p" must have width=1.');
    end

    this_block.port('i_TxReadyCh4_p').useHDLVector(false);

    if (this_block.port('i_TxReadyCh5_p').width ~= 1);
      this_block.setError('Input data type for port "i_TxReadyCh5_p" must have width=1.');
    end

    this_block.port('i_TxReadyCh5_p').useHDLVector(false);

    if (this_block.port('i_TxReadyCh6_p').width ~= 1);
      this_block.setError('Input data type for port "i_TxReadyCh6_p" must have width=1.');
    end

    this_block.port('i_TxReadyCh6_p').useHDLVector(false);

    if (this_block.port('i_TxReadyCh7_p').width ~= 1);
      this_block.setError('Input data type for port "i_TxReadyCh7_p" must have width=1.');
    end

    this_block.port('i_TxReadyCh7_p').useHDLVector(false);

    if (this_block.port('i_DisableFlowControl_p').width ~= 1);
      this_block.setError('Input data type for port "i_DisableFlowControl_p" must have width=1.');
    end

    this_block.port('i_DisableFlowControl_p').useHDLVector(false);

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk','ce')
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);


  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  basroot = getenv('BASROOT');
  this_block.addFile([basroot '/sdk/fpga/NutaqIPLib/pcores/lyt_rtdex_test_v1_00_a/sysgen/lyt_rtdex_test_imp.vhd']);
  this_block.addFile([basroot '/sdk/fpga/NutaqIPLib/pcores/lyt_rtdex_test_v1_00_a/hdl/vhdl/lyt_rtdex_test.vhd']);

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

