#-- Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : axi_v6_ddrx
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axi_v6_ddrx

## Peripheral Options
OPTION HDL = MIXED
OPTION IMP_NETLIST = TRUE
OPTION IPTYPE = PERIPHERAL
OPTION RUN_NGCBUILD = TRUE
OPTION USAGE_LEVEL = BASE_USER
OPTION STYLE = HDL
OPTION IPLEVEL_DRC_PROC = check_iplevel_drcs
OPTION SYSLEVEL_DRC_PROC = check_syslevel_drcs
OPTION PLATGEN_SYSLEVEL_UPDATE_PROC = platgen_syslevel_update
OPTION SYSLEVEL_UPDATE_PROC = syslevel_update_proc
OPTION ADDITIONAL_OUTPUTS = UCF_CONSTRAINTS
OPTION CLK_FREQ_RATIOS = (clk / clk_mem=(1/2), clk / clk_rd_base=(1/2))
OPTION DESC = AXI V6 Memory Controller(DDR2/DDR3)
OPTION LONG_DESC = Virtex-6 memory controller.
OPTION IP_GROUP = Memory and Memory Controller:MICROBLAZE
OPTION DATASHEET_NAME = ug406_axi_v6_ddrx
OPTION ARCH_SUPPORT_MAP = (virtex6lx=PRODUCTION, virtex6sx=PRODUCTION, virtex6cx=PRODUCTION, virtex6llx=PRODUCTION, virtex6lsx=PRODUCTION, qvirtex6lx=PRODUCTION, qvirtex6sx=PRODUCTION, qvirtex6fx=PRODUCTION, qvirtex6tx=PRODUCTION)

IO_INTERFACE IO_IF = memory_0, IO_TYPE = hide_122_XIL_MEMORY_V1

## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = S_AXI_CTRL, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = ([xstrncmp C_ECC ON])

## Generics for VHDL or Parameters for Verilog
PARAMETER C_MEM_PARTNO = NOT_SET, DT = STRING, IO_IS = C_MEM_PARTNO, IO_IF = memory_0, TYPE = NON_HDL, ASSIGNMENT = REQUIRE
PARAMETER C_MEM_BASEPARTNO = NOT_SET, DT = STRING, IO_IS = C_MEM_PARTNO, IO_IF = memory_0, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_REFCLK_FREQ = 200, DT = INTEGER, RANGE = (200, 300), CLK_PORT = clk_ref, CLK_UNIT = MHz, ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_BYPASS_INIT_CAL = FAST, DT = STRING, VALUES = (OFF=OFF, FAST=FAST, SKIP=SKIP)
PARAMETER C_IODELAY_GRP = IODELAY_MIG, DT = STRING, ASSIGNMENT = OPTIONAL_UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_iodelay_grp, EXT_ASSIGNMENT = SKIP_BATCH
PARAMETER C_USE_EXTERNAL_IODELAY_CTRL = 0, DT = INTEGER, RANGE = (0,1), ASSIGNMENT = UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_use_external_iodelay_ctrl, EXT_ASSIGNMENT = SKIP
PARAMETER C_DRAM_TYPE = DDR3, DT = STRING, VALUES = (DDR3=DDR3, DDR2=DDR2)
PARAMETER C_NCS_PER_RANK = 1, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = CHECK
PARAMETER C_BANK_WIDTH = 3, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = CHECK
PARAMETER C_CK_WIDTH = 1, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = CHECK
PARAMETER C_CKE_WIDTH = 1, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = CHECK
PARAMETER C_COL_WIDTH = 10, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_CS_WIDTH = 1, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = CHECK
PARAMETER C_DM_WIDTH = 8, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = C_USE_DM_PORT
PARAMETER C_USE_DM_PORT = 1, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE
PARAMETER C_DRAM_WIDTH = 8, DT = INTEGER, RANGE = ( 4, 8, 16 )
PARAMETER C_DQS_WIDTH = 8, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = CHECK
PARAMETER C_ROW_WIDTH = 13, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = CHECK
PARAMETER C_DQ_WIDTH = 64, DT = INTEGER, RANGE = (8, 16, 32, 64, 72, 128, 144 ), ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = CHECK
PARAMETER C_BURST_MODE = 8, DT = STRING, VALUES = (8=8, 4=4, OTF=OTF)
PARAMETER C_BURST_TYPE = SEQ, DT = STRING, VALUES = (SEQ=SEQ, INT=INT)
PARAMETER C_IODELAY_HP_MODE = ON, DT = STRING, VALUES = (ON=ON, OFF=OFF)
PARAMETER C_CL = 6, DT = INTEGER, ASSIGNMENT = UPDATE
PARAMETER C_CWL = 5, DT = INTEGER, ASSIGNMENT = UPDATE
PARAMETER C_ADDR_CMD_MODE = 1T, DT = STRING, VALUES = (1T=1T, 2T=2T), ASSIGNMENT = UPDATE
PARAMETER C_NBANK_MACHS = 4, DT = INTEGER, RANGE = (2:8)
PARAMETER C_ORDERING = NORM, DT = STRING, VALUES = (NORM=NORM, STRICT=STRICT, RELAXED=RELAXED)
PARAMETER C_RANKS = 1, DT = INTEGER, ASSIGNMENT = UPDATE
PARAMETER C_CAL_WIDTH = HALF, DT = STRING, VALUES = (HALF=HALF, FULL=FULL)
PARAMETER C_RTT_NOM = 40, DT = STRING, VALUES = (DISABLED=DISABLED, 120=RZQ/2, 60=RZQ/4, 40=RZQ/6, 150=150Ohms, 75=75Ohms,50=50Ohms)
PARAMETER C_RTT_WR = OFF, DT = STRING, VALUES = (OFF=OFF, 120=RZQ/2, 60=RZQ/4), ISVALID = ([xstrncmp C_DRAM_TYPE DDR3])
PARAMETER C_OUTPUT_DRV = HIGH, DT = STRING, VALUES = (HIGH=RZQ/7, LOW=RZQ/6)
PARAMETER C_REG_CTRL = OFF, DT = STRING, VALUES = (ON=ON, OFF=OFF)
PARAMETER C_NDQS_COL0 = 3, DT = INTEGER, ASSIGNMENT = UPDATE
PARAMETER C_NDQS_COL1 = 5, DT = INTEGER, ASSIGNMENT = UPDATE
PARAMETER C_NDQS_COL2 = 0, DT = INTEGER, ASSIGNMENT = UPDATE
PARAMETER C_NDQS_COL3 = 0, DT = INTEGER, ASSIGNMENT = UPDATE
PARAMETER C_DQS_LOC_COL0 = 0x000000000000000000000000000000020100, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_DQS_LOC_COL1 = 0x000000000000000000000000000706050403, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_DQS_LOC_COL2 = 0x000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_DQS_LOC_COL3 = 0x000000000000000000000000000000000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_TCK = 0, DT = INTEGER, CLK_PORT = clk_mem, CLK_UNIT = PS, ASSIGNMENT = OPTIONAL_UPDATE, EXT_ASSIGNMENT = SKIP_BATCH, EXT_NOVALUE = 0
PARAMETER C_TFAW = -1, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_TPRDI = -1, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_TRRD = -1, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_TRAS = -1, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_TRCD = -1, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_TREFI = -1, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_TRFC = -1, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_TRP = -1, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_TRTP = -1, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_TWTR = -1, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_TZQI = -1, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_TZQCS = -1, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, ISVALID = ([xstrncmp C_MEM_PARTNO CUSTOM])
PARAMETER C_SLOT_0_CONFIG = 0b00000001, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_SLOT_1_CONFIG = 0b00000000, DT = STD_LOGIC_VECTOR, ASSIGNMENT = UPDATE
PARAMETER C_MEM_ADDR_ORDER = BANK_ROW_COLUMN, DT = STRING, VALUES = (BANK_ROW_COLUMN=BANK_ROW_COLUMN, ROW_BANK_COLUMN=ROW_BANK_COLUMN)
PARAMETER C_ECC = OFF, DT = STRING, VALUES = (ON=ON, OFF=OFF), EXT_ASSIGNMENT = CHECK
PARAMETER C_ECC_TEST = OFF, DT = STRING, VALUES = (ON=ON, OFF=OFF), EXT_ASSIGNMENT = CHECK, ISVALID = ([xstrncmp C_ECC ON])
PARAMETER C_S_AXI_ID_WIDTH = 4, DT = INTEGER, BUS = S_AXI, RANGE = (1:16), ASSIGNMENT = UPDATE, EXT_ASSIGNMENT = SKIP
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, RANGE = (32, 64, 128, 256, 512)
PARAMETER C_S_AXI_SUPPORTS_NARROW_BURST = 1, DT = INTEGER, RANGE = (0:1), BUS = S_AXI, ASSIGNMENT = OPTIONAL_UPDATE, EXT_NOVALUE = Auto
PARAMETER C_S_AXI_REG_EN0 = 0x00000, DT = STD_LOGIC_VECTOR, BUS = S_AXI, EXT_ASSIGNMENT = SKIP
PARAMETER C_S_AXI_REG_EN1 = 0x01000, DT = STD_LOGIC_VECTOR, BUS = S_AXI, EXT_ASSIGNMENT = SKIP
PARAMETER C_RD_WR_ARB_ALGORITHM = RD_PRI_REG, DT = STRING, VALUES = (TDM=TDM, ROUND_ROBIN=ROUND_ROBIN, RD_PRI_REG=RD_PRI_REG, RD_PRI_REG_STARVE_LIMIT=RD_PRI_REG_STARVE_LIMIT)
PARAMETER C_S_AXI_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, ADDRESS = BASE, PAIR = C_S_AXI_HIGHADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, MIN_SIZE = 0x1000
PARAMETER C_S_AXI_HIGHADDR = 0x00000000, BUS = S_AXI, ADDRESS = HIGH, PAIR = C_S_AXI_BASEADDR, DT = STD_LOGIC_VECTOR, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, MIN_SIZE = 0x1000
PARAMETER C_S_AXI_PROTOCOL = AXI4, DT = STRING, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, BUS = S_AXI
PARAMETER C_INTERCONNECT_S_AXI_READ_ACCEPTANCE = 4, DT = INTEGER, RANGE = (1:32), BUS = S_AXI, ASSIGNMENT = OPTIONAL, TYPE = NON_HDL
PARAMETER C_INTERCONNECT_S_AXI_WRITE_ACCEPTANCE = 4, DT = INTEGER, RANGE = (1:32), BUS = S_AXI, ASSIGNMENT = OPTIONAL, TYPE = NON_HDL
PARAMETER C_S_AXI_CTRL_PROTOCOL = AXI4LITE, DT = STRING, BUS = S_AXI_CTRL, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, ISVALID = ([xstrncmp C_ECC ON])
PARAMETER C_S_AXI_CTRL_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_CTRL, RANGE = (32), ASSIGNMENT = CONSTANT, ISVALID = ([xstrncmp C_ECC ON])
PARAMETER C_S_AXI_CTRL_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI_CTRL, RANGE = (32), ASSIGNMENT = CONSTANT, ISVALID = ([xstrncmp C_ECC ON])
PARAMETER C_S_AXI_CTRL_BASEADDR = 0xFFFFFFFF, BUS = S_AXI_CTRL, ADDRESS = BASE, PAIR = C_S_AXI_CTRL_HIGHADDR, DT = STD_LOGIC_VECTOR, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, ISVALID = ([xstrncmp C_ECC ON])
PARAMETER C_S_AXI_CTRL_HIGHADDR = 0x00000000, BUS = S_AXI_CTRL, ADDRESS = HIGH, PAIR = C_S_AXI_CTRL_BASEADDR, DT = STD_LOGIC_VECTOR, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL, ISVALID = ([xstrncmp C_ECC ON])
PARAMETER C_ECC_ONOFF_RESET_VALUE = 1, DT = INTEGER, RANGE = (0,1), ISVALID = ([xstrncmp C_ECC ON])
PARAMETER C_MMCM_EXT_LOC = NOT_SET, DT = STRING, TYPE = NON_HDL, ASSIGNMENT = OPTIONAL

## Ports
PORT clk = "", DIR = I, ASSIGNMENT = REQUIRE, SIGIS = CLK, BUS = S_AXI:S_AXI_CTRL
PORT clk_mem = "", DIR = I, ASSIGNMENT = REQUIRE, SIGIS = CLK
PORT clk_rd_base = "", DIR = I, ASSIGNMENT = REQUIRE, SIGIS = CLK
PORT aresetn = aresetn, DIR = I, ASSIGNMENT = REQUIRE, SIGIS = RST, BUS = S_AXI:S_AXI_CTRL
PORT clk_ref = "", DIR = I, ASSIGNMENT = REQUIRE, SIGIS = CLK
PORT iodelay_ctrl_rdy_i = "", DIR = I, ASSIGNMENT = OPTIONAL, INITIALVAL = VCC
PORT iodelay_ctrl_rdy_o = "", DIR = O, ASSIGNMENT = OPTIONAL
PORT pd_PSEN = "", DIR = O, ASSIGNMENT = REQUIRE
PORT pd_PSINCDEC = "", DIR = O, ASSIGNMENT = REQUIRE
PORT pd_PSDONE = "", DIR = I, ASSIGNMENT = REQUIRE
PORT phy_init_done = "", DIR = O
PORT interrupt = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, ISVALID = ([xstrncmp C_ECC ON])
PORT ddr_addr = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_ADDRESS, VEC = [C_ROW_WIDTH-1:0]
PORT ddr_ba = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_BANKADDR, VEC = [C_BANK_WIDTH-1:0]
PORT ddr_cas_n = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_COL_ADDR_SELECT
PORT ddr_ck_p = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_Clk, VEC = [C_CK_WIDTH-1:0], SIGIS = CLK
PORT ddr_ck_n = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_Clk_n, VEC = [C_CK_WIDTH-1:0], SIGIS = CLK
PORT ddr_cke = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_CLK_ENABLE, VEC = [C_CKE_WIDTH-1:0]
PORT ddr_cs_n = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_CHIP_SELECT, VEC = [C_CS_WIDTH*C_NCS_PER_RANK-1:0]
PORT ddr_dm = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_DATA_MASK, VEC = [C_DM_WIDTH-1:0], ISVALID = C_USE_DM_PORT
PORT ddr_odt = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_ODT, VEC = [C_CS_WIDTH*C_NCS_PER_RANK-1:0]
PORT ddr_ras_n = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_ROW_ADDR_SELECT
PORT ddr_reset_n = "", DIR = O, ASSIGNMENT = OPTIONAL, IO_IF = memory_0, IO_IS = DDR_RESET_N
PORT ddr_parity = "", DIR = O, ASSIGNMENT = OPTIONAL, IO_IF = memory_0, IO_IS = DDR_PARITY
PORT ddr_we_n = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_WRITE_ENABLE
PORT ddr_dq = "", DIR = IO, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_DATA, VEC = [C_DQ_WIDTH-1:0], THREE_STATE = FALSE
PORT ddr_dqs_p = "", DIR = IO, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_DATA_STROBE, VEC = [C_DQS_WIDTH-1:0], THREE_STATE = FALSE
PORT ddr_dqs_n = "", DIR = IO, ASSIGNMENT = REQUIRE, IO_IF = memory_0, IO_IS = DDR_DATA_STROBE_N, VEC = [C_DQS_WIDTH-1:0], THREE_STATE = FALSE
PORT s_axi_awid = awid, DIR = I, BUS = S_AXI, VEC = [(C_S_AXI_ID_WIDTH-1):0]
PORT s_axi_awaddr = awaddr, DIR = I, BUS = S_AXI, VEC = [(C_S_AXI_ADDR_WIDTH-1):0]
PORT s_axi_awlen = awlen, DIR = I, BUS = S_AXI, VEC = [7:0]
PORT s_axi_awsize = awsize, DIR = I, BUS = S_AXI, VEC = [2:0]
PORT s_axi_awburst = awburst, DIR = I, BUS = S_AXI, VEC = [1:0]
PORT s_axi_awlock = awlock, DIR = I, BUS = S_AXI, VEC = [0:0]
PORT s_axi_awcache = awcache, DIR = I, BUS = S_AXI, VEC = [3:0]
PORT s_axi_awprot = awprot, DIR = I, BUS = S_AXI, VEC = [2:0]
PORT s_axi_awqos = awqos, DIR = I, BUS = S_AXI, VEC = [3:0]
PORT s_axi_awvalid = awvalid, DIR = I, BUS = S_AXI
PORT s_axi_awready = awready, DIR = O, BUS = S_AXI
PORT s_axi_wdata = wdata, DIR = I, BUS = S_AXI, VEC = [(C_S_AXI_DATA_WIDTH-1):0]
PORT s_axi_wstrb = wstrb, DIR = I, BUS = S_AXI, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0]
PORT s_axi_wlast = wlast, DIR = I, BUS = S_AXI
PORT s_axi_wvalid = wvalid, DIR = I, BUS = S_AXI
PORT s_axi_wready = wready, DIR = O, BUS = S_AXI
PORT s_axi_bid = bid, DIR = O, BUS = S_AXI, VEC = [(C_S_AXI_ID_WIDTH-1):0]
PORT s_axi_bresp = bresp, DIR = O, BUS = S_AXI, VEC = [1:0]
PORT s_axi_bvalid = bvalid, DIR = O, BUS = S_AXI
PORT s_axi_bready = bready, DIR = I, BUS = S_AXI
PORT s_axi_arid = arid, DIR = I, BUS = S_AXI, VEC = [(C_S_AXI_ID_WIDTH-1):0]
PORT s_axi_araddr = araddr, DIR = I, BUS = S_AXI, VEC = [(C_S_AXI_ADDR_WIDTH-1):0]
PORT s_axi_arlen = arlen, DIR = I, BUS = S_AXI, VEC = [7:0]
PORT s_axi_arsize = arsize, DIR = I, BUS = S_AXI, VEC = [2:0]
PORT s_axi_arburst = arburst, DIR = I, BUS = S_AXI, VEC = [1:0]
PORT s_axi_arlock = arlock, DIR = I, BUS = S_AXI, VEC = [0:0]
PORT s_axi_arcache = arcache, DIR = I, BUS = S_AXI, VEC = [3:0]
PORT s_axi_arprot = arprot, DIR = I, BUS = S_AXI, VEC = [2:0]
PORT s_axi_arqos = arqos, DIR = I, BUS = S_AXI, VEC = [3:0]
PORT s_axi_arvalid = arvalid, DIR = I, BUS = S_AXI
PORT s_axi_arready = arready, DIR = O, BUS = S_AXI
PORT s_axi_rid = rid, DIR = O, BUS = S_AXI, VEC = [(C_S_AXI_ID_WIDTH-1):0]
PORT s_axi_rdata = rdata, DIR = O, BUS = S_AXI, VEC = [(C_S_AXI_DATA_WIDTH-1):0]
PORT s_axi_rresp = rresp, DIR = O, BUS = S_AXI, VEC = [1:0]
PORT s_axi_rlast = rlast, DIR = O, BUS = S_AXI
PORT s_axi_rvalid = rvalid, DIR = O, BUS = S_AXI
PORT s_axi_rready = rready, DIR = I, BUS = S_AXI
PORT s_axi_ctrl_awaddr = awaddr, DIR = I, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_ADDR_WIDTH - 1) : 0]
PORT s_axi_ctrl_awvalid = awvalid, DIR = I, BUS = S_AXI_CTRL
PORT s_axi_ctrl_awready = awready, DIR = O, BUS = S_AXI_CTRL
PORT s_axi_ctrl_wdata = wdata, DIR = I, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_DATA_WIDTH - 1) : 0]
PORT s_axi_ctrl_wvalid = wvalid, DIR = I, BUS = S_AXI_CTRL
PORT s_axi_ctrl_wready = wready, DIR = O, BUS = S_AXI_CTRL
PORT s_axi_ctrl_bresp = bresp, DIR = O, BUS = S_AXI_CTRL, VEC = [1 : 0]
PORT s_axi_ctrl_bvalid = bvalid, DIR = O, BUS = S_AXI_CTRL
PORT s_axi_ctrl_bready = bready, DIR = I, BUS = S_AXI_CTRL
PORT s_axi_ctrl_araddr = araddr, DIR = I, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_ADDR_WIDTH - 1) : 0]
PORT s_axi_ctrl_arvalid = arvalid, DIR = I, BUS = S_AXI_CTRL
PORT s_axi_ctrl_arready = arready, DIR = O, BUS = S_AXI_CTRL
PORT s_axi_ctrl_rdata = rdata, DIR = O, BUS = S_AXI_CTRL, VEC = [(C_S_AXI_CTRL_DATA_WIDTH - 1) : 0]
PORT s_axi_ctrl_rresp = rresp, DIR = O, BUS = S_AXI_CTRL, VEC = [1 : 0]
PORT s_axi_ctrl_rvalid = rvalid, DIR = O, BUS = S_AXI_CTRL
PORT s_axi_ctrl_rready = rready, DIR = I, BUS = S_AXI_CTRL

END
