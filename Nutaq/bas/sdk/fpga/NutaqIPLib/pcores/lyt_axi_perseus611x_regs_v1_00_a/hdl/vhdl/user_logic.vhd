--------------------------------------------------------------------------------
-- Filename:          user_logic.vhd
-- Version:           v1_00_a
-- Description:       User Logic implementation module
-- Generated by:      julien.roy
-- Date:              2015-11-05 15:42:34
-- Generated:         using LyrtechRD REGGENUTIL based on Xilinx IPIF Wizard.
-- VHDL Standard:     VHDL'93
------------------------------------------------------------------------------
-- Copyright (c) 2001-2012 LYRtech RD Inc.  All rights reserved.
------------------------------------------------------------------------------
--
-----------------------------------------------------------------------------
-- Register Memory Map & Description
-----------------------------------------------------------------------------
-- BASEADDR + 0x0   INFO   Core ID and version identifier
--   15:0 core_version R
--   31:16 core_id R

-- BASEADDR + 0x4   MODULE_CTRL_STATUS   Control and status of the modules that can be connected to the carrier
--   0:0 daughter_absent R I=i_daughter_absent_p
--   1:1 fmc1_absent R I=i_fmc1_absent_p
--   10:10 pcie_msi R W O=o_pcie_msi_p
--   2:2 fmc1_stack_absent R I=i_fmc1_stack_absent_p
--   3:3 fmc1_clkdir R I=i_fmc1_clkdir_p
--   31:11 rsvd R
--   4:4 fmc2_absent R I=i_fmc2_absent_p
--   5:5 fmc2_stack_absent R I=i_fmc2_stack_absent_p
--   6:6 fmc2_clkdir R I=i_fmc2_clkdir_p
--   7:7 ddr3_init_done R I=i_ddr3_init_done_p
--   8:8 pcie_present R I=i_pcie_present_p
--   9:9 pcie_clock_lock R I=i_pcie_clock_lock_p

-- BASEADDR + 0x8   CLK_CTRL   Control and status of the Perseus611X clocks
--   0:0 mgtrefclk_125m_en R W O=o_mgtrefclk_125m_en_p
--   1:1 mgtrefclk_156m_en R W O=o_mgtrefclk_156m_en_p
--   10:10 mgtpll_lol R I=i_mgtpll_lol_p
--   2:2 mgtrefclk_100m_en R W O=o_mgtrefclk_100m_en_p
--   3:3 ctrl_fclka_highz R W O=o_ctrl_fclka_highz_p
--   31:11 rsvd R
--   4:4 ctrl_amctclka_to_fmc1clk2_en R W O=o_ctrl_amctclka_to_fmc1clk2_en_p
--   5:5 ctrl_amctclka_to_fmc2clk2_en R W O=o_ctrl_amctclka_to_fmc2clk2_en_p
--   6:6 ctrl_amctclkc_to_fmc1clk3_en R W O=o_ctrl_amctclkc_to_fmc1clk3_en_p
--   7:7 ctrl_amctclkc_to_fmc2clk3_en R W O=o_ctrl_amctclkc_to_fmc2clk3_en_p
--   8:8 mgtpll_clk1_los R I=i_mgtpll_clk1_los_p
--   9:9 mgtpll_clk2_los R I=i_mgtpll_clk2_los_p

-- BASEADDR + 0xc   VADJ_RESET_CTRL   Control the FMC VADJ power supplies and the FPGA reset.
--   1:0 vadj1_sel R W O=ov2_vadj1_sel_p
--   2:2 vadj1_en R W O=o_vadj1_en_p
--   3:3 fpga_reset_n R W O=o_fpga_reset_n_p
--   31:7 rsvd R
--   5:4 vadj2_sel R W O=ov2_vadj2_sel_p
--   6:6 vadj2_en R W O=o_vadj2_en_p

-- BASEADDR + 0x10   LED_CTRL   Control the user LEDs present on the Perseus611X board.
--   15:8 led_green_en R W O=ov8_led_green_en_p
--   31:16 rsvd R
--   7:0 led_red_en R W O=ov8_led_red_en_p

-- BASEADDR + 0x14   I2C_CTRL   Control and status for the I2C bus arbitration
--   0:0 i2c_request R W O=o_i2c_request_p
--   1:1 i2c_granted R I=i_i2c_granted_p
--   31:4 rsvd R
--   3:2 i2c_bus_sel R W O=ov2_i2c_bus_sel_p

-- BASEADDR + 0x18   CUSTOM_REGISTER00   User custom registers
--   31:0 CustomReg0 R W I=iv32_CustomReg0_p O=ov32_CustomReg0_p

-- BASEADDR + 0x1c   CUSTOM_REGISTER01   User custom registers
--   31:0 CustomReg1 R W I=iv32_CustomReg1_p O=ov32_CustomReg1_p

-- BASEADDR + 0x20   CUSTOM_REGISTER02   User custom registers
--   31:0 CustomReg2 R W I=iv32_CustomReg2_p O=ov32_CustomReg2_p

-- BASEADDR + 0x24   CUSTOM_REGISTER03   User custom registers
--   31:0 CustomReg3 R W I=iv32_CustomReg3_p O=ov32_CustomReg3_p

-- BASEADDR + 0x28   CUSTOM_REGISTER04   User custom registers
--   31:0 CustomReg4 R W I=iv32_CustomReg4_p O=ov32_CustomReg4_p

-- BASEADDR + 0x2c   CUSTOM_REGISTER05   User custom registers
--   31:0 CustomReg5 R W I=iv32_CustomReg5_p O=ov32_CustomReg5_p

-- BASEADDR + 0x30   CUSTOM_REGISTER06   User custom registers
--   31:0 CustomReg6 R W I=iv32_CustomReg6_p O=ov32_CustomReg6_p

-- BASEADDR + 0x34   CUSTOM_REGISTER07   User custom registers
--   31:0 CustomReg7 R W I=iv32_CustomReg7_p O=ov32_CustomReg7_p

-- BASEADDR + 0x38   CUSTOM_REGISTER08   User custom registers
--   31:0 CustomReg8 R W I=iv32_CustomReg8_p O=ov32_CustomReg8_p

-- BASEADDR + 0x3c   CUSTOM_REGISTER09   User custom registers
--   31:0 CustomReg9 R W I=iv32_CustomReg9_p O=ov32_CustomReg9_p

-- BASEADDR + 0x40   CUSTOM_REGISTER10   User custom registers
--   31:0 CustomReg10 R W I=iv32_CustomReg10_p O=ov32_CustomReg10_p

-- BASEADDR + 0x44   CUSTOM_REGISTER11   User custom registers
--   31:0 CustomReg11 R W I=iv32_CustomReg11_p O=ov32_CustomReg11_p

-- BASEADDR + 0x48   CUSTOM_REGISTER12   User custom registers
--   31:0 CustomReg12 R W I=iv32_CustomReg12_p O=ov32_CustomReg12_p

-- BASEADDR + 0x4c   CUSTOM_REGISTER13   User custom registers
--   31:0 CustomReg13 R W I=iv32_CustomReg13_p O=ov32_CustomReg13_p

-- BASEADDR + 0x50   CUSTOM_REGISTER14   User custom registers
--   31:0 CustomReg14 R W I=iv32_CustomReg14_p O=ov32_CustomReg14_p

-- BASEADDR + 0x54   CUSTOM_REGISTER15   User custom registers
--   31:0 CustomReg15 R W I=iv32_CustomReg15_p O=ov32_CustomReg15_p

-- BASEADDR + 0x58   CUSTOM_REGISTER16   User custom registers
--   31:0 CustomReg16 R W I=iv32_CustomReg16_p O=ov32_CustomReg16_p

-- BASEADDR + 0x5c   CUSTOM_REGISTER17   User custom registers
--   31:0 CustomReg17 R W I=iv32_CustomReg17_p O=ov32_CustomReg17_p

-- BASEADDR + 0x60   CUSTOM_REGISTER18   User custom registers
--   31:0 CustomReg18 R W I=iv32_CustomReg18_p O=ov32_CustomReg18_p

-- BASEADDR + 0x64   CUSTOM_REGISTER19   User custom registers
--   31:0 CustomReg19 R W I=iv32_CustomReg19_p O=ov32_CustomReg19_p

-- BASEADDR + 0x68   CUSTOM_REGISTER20   User custom registers
--   31:0 CustomReg20 R W I=iv32_CustomReg20_p O=ov32_CustomReg20_p

-- BASEADDR + 0x6c   CUSTOM_REGISTER21   User custom registers
--   31:0 CustomReg21 R W I=iv32_CustomReg21_p O=ov32_CustomReg21_p

-- BASEADDR + 0x70   CUSTOM_REGISTER22   User custom registers
--   31:0 CustomReg22 R W I=iv32_CustomReg22_p O=ov32_CustomReg22_p

-- BASEADDR + 0x74   CUSTOM_REGISTER23   User custom registers
--   31:0 CustomReg23 R W I=iv32_CustomReg23_p O=ov32_CustomReg23_p

-- BASEADDR + 0x78   CUSTOM_REGISTER24   User custom registers
--   31:0 CustomReg24 R W I=iv32_CustomReg24_p O=ov32_CustomReg24_p

-- BASEADDR + 0x7c   CUSTOM_REGISTER25   User custom registers
--   31:0 CustomReg25 R W I=iv32_CustomReg25_p O=ov32_CustomReg25_p

-- BASEADDR + 0x80   CUSTOM_REGISTER26   User custom registers
--   31:0 CustomReg26 R W I=iv32_CustomReg26_p O=ov32_CustomReg26_p

-- BASEADDR + 0x84   CUSTOM_REGISTER27   User custom registers
--   31:0 CustomReg27 R W I=iv32_CustomReg27_p O=ov32_CustomReg27_p

-- BASEADDR + 0x88   CUSTOM_REGISTER28   User custom registers
--   31:0 CustomReg28 R W I=iv32_CustomReg28_p O=ov32_CustomReg28_p

-- BASEADDR + 0x8c   CUSTOM_REGISTER29   User custom registers
--   31:0 CustomReg29 R W I=iv32_CustomReg29_p O=ov32_CustomReg29_p

-- BASEADDR + 0x90   CUSTOM_REGISTER30   User custom registers
--   31:0 CustomReg30 R W I=iv32_CustomReg30_p O=ov32_CustomReg30_p

-- BASEADDR + 0x94   CUSTOM_REGISTER31   User custom registers
--   31:0 CustomReg31 R W I=iv32_CustomReg31_p O=ov32_CustomReg31_p

-- BASEADDR + 0x98   CUSTOM_REGISTER32   User custom registers
--   31:0 CustomReg32 R W I=iv32_CustomReg32_p O=ov32_CustomReg32_p

-- BASEADDR + 0x9c   CUSTOM_REGISTER33   User custom registers
--   31:0 CustomReg33 R W I=iv32_CustomReg33_p O=ov32_CustomReg33_p

-- BASEADDR + 0xa0   CUSTOM_REGISTER34   User custom registers
--   31:0 CustomReg34 R W I=iv32_CustomReg34_p O=ov32_CustomReg34_p

-- BASEADDR + 0xa4   CUSTOM_REGISTER35   User custom registers
--   31:0 CustomReg35 R W I=iv32_CustomReg35_p O=ov32_CustomReg35_p

-- BASEADDR + 0xa8   CUSTOM_REGISTER36   User custom registers
--   31:0 CustomReg36 R W I=iv32_CustomReg36_p O=ov32_CustomReg36_p

-- BASEADDR + 0xac   CUSTOM_REGISTER37   User custom registers
--   31:0 CustomReg37 R W I=iv32_CustomReg37_p O=ov32_CustomReg37_p

-- BASEADDR + 0xb0   CUSTOM_REGISTER38   User custom registers
--   31:0 CustomReg38 R W I=iv32_CustomReg38_p O=ov32_CustomReg38_p

-- BASEADDR + 0xb4   CUSTOM_REGISTER39   User custom registers
--   31:0 CustomReg39 R W I=iv32_CustomReg39_p O=ov32_CustomReg39_p

-- BASEADDR + 0xb8   CUSTOM_REGISTER40   User custom registers
--   31:0 CustomReg40 R W I=iv32_CustomReg40_p O=ov32_CustomReg40_p

-- BASEADDR + 0xbc   CUSTOM_REGISTER41   User custom registers
--   31:0 CustomReg41 R W I=iv32_CustomReg41_p O=ov32_CustomReg41_p

-- BASEADDR + 0xc0   CUSTOM_REGISTER42   User custom registers
--   31:0 CustomReg42 R W I=iv32_CustomReg42_p O=ov32_CustomReg42_p

-- BASEADDR + 0xc4   CUSTOM_REGISTER43   User custom registers
--   31:0 CustomReg43 R W I=iv32_CustomReg43_p O=ov32_CustomReg43_p

-- BASEADDR + 0xc8   CUSTOM_REGISTER44   User custom registers
--   31:0 CustomReg44 R W I=iv32_CustomReg44_p O=ov32_CustomReg44_p

-- BASEADDR + 0xcc   CUSTOM_REGISTER45   User custom registers
--   31:0 CustomReg45 R W I=iv32_CustomReg45_p O=ov32_CustomReg45_p

-- BASEADDR + 0xd0   CUSTOM_REGISTER46   User custom registers
--   31:0 CustomReg46 R W I=iv32_CustomReg46_p O=ov32_CustomReg46_p

-- BASEADDR + 0xd4   CUSTOM_REGISTER47   User custom registers
--   31:0 CustomReg47 R W I=iv32_CustomReg47_p O=ov32_CustomReg47_p

-- BASEADDR + 0xd8   CUSTOM_REGISTER48   User custom registers
--   31:0 CustomReg48 R W I=iv32_CustomReg48_p O=ov32_CustomReg48_p

-- BASEADDR + 0xdc   CUSTOM_REGISTER49   User custom registers
--   31:0 CustomReg49 R W I=iv32_CustomReg49_p O=ov32_CustomReg49_p

-- BASEADDR + 0xe0   CUSTOM_REGISTER50   User custom registers
--   31:0 CustomReg50 R W I=iv32_CustomReg50_p O=ov32_CustomReg50_p

-- BASEADDR + 0xe4   CUSTOM_REGISTER51   User custom registers
--   31:0 CustomReg51 R W I=iv32_CustomReg51_p O=ov32_CustomReg51_p

-- BASEADDR + 0xe8   CUSTOM_REGISTER52   User custom registers
--   31:0 CustomReg52 R W I=iv32_CustomReg52_p O=ov32_CustomReg52_p

-- BASEADDR + 0xec   CUSTOM_REGISTER53   User custom registers
--   31:0 CustomReg53 R W I=iv32_CustomReg53_p O=ov32_CustomReg53_p

-- BASEADDR + 0xf0   CUSTOM_REGISTER54   User custom registers
--   31:0 CustomReg54 R W I=iv32_CustomReg54_p O=ov32_CustomReg54_p

-- BASEADDR + 0xf4   CUSTOM_REGISTER55   User custom registers
--   31:0 CustomReg55 R W I=iv32_CustomReg55_p O=ov32_CustomReg55_p

-- BASEADDR + 0xf8   CUSTOM_REGISTER56   User custom registers
--   31:0 CustomReg56 R W I=iv32_CustomReg56_p O=ov32_CustomReg56_p

-- BASEADDR + 0xfc   CUSTOM_REGISTER57   User custom registers
--   31:0 CustomReg57 R W I=iv32_CustomReg57_p O=ov32_CustomReg57_p

-- BASEADDR + 0x100   CUSTOM_REGISTER58   User custom registers
--   31:0 CustomReg58 R W I=iv32_CustomReg58_p O=ov32_CustomReg58_p

-- BASEADDR + 0x104   CUSTOM_REGISTER59   User custom registers
--   31:0 CustomReg59 R W I=iv32_CustomReg59_p O=ov32_CustomReg59_p

-- BASEADDR + 0x108   CUSTOM_REGISTER60   User custom registers
--   31:0 CustomReg60 R W I=iv32_CustomReg60_p O=ov32_CustomReg60_p

-- BASEADDR + 0x10c   CUSTOM_REGISTER61   User custom registers
--   31:0 CustomReg61 R W I=iv32_CustomReg61_p O=ov32_CustomReg61_p

-- BASEADDR + 0x110   CUSTOM_REGISTER62   User custom registers
--   31:0 CustomReg62 R W I=iv32_CustomReg62_p O=ov32_CustomReg62_p

-- BASEADDR + 0x114   CUSTOM_REGISTER63   User custom registers
--   31:0 CustomReg63 R W I=iv32_CustomReg63_p O=ov32_CustomReg63_p

-- BASEADDR + 0x118   CUSTOM_REGISTER64   User custom registers
--   31:0 CustomReg64 R W I=iv32_CustomReg64_p O=ov32_CustomReg64_p

-- BASEADDR + 0x11c   CUSTOM_REGISTER65   User custom registers
--   31:0 CustomReg65 R W I=iv32_CustomReg65_p O=ov32_CustomReg65_p

-- BASEADDR + 0x120   CUSTOM_REGISTER66   User custom registers
--   31:0 CustomReg66 R W I=iv32_CustomReg66_p O=ov32_CustomReg66_p

-- BASEADDR + 0x124   CUSTOM_REGISTER67   User custom registers
--   31:0 CustomReg67 R W I=iv32_CustomReg67_p O=ov32_CustomReg67_p

-- BASEADDR + 0x128   CUSTOM_REGISTER68   User custom registers
--   31:0 CustomReg68 R W I=iv32_CustomReg68_p O=ov32_CustomReg68_p

-- BASEADDR + 0x12c   CUSTOM_REGISTER69   User custom registers
--   31:0 CustomReg69 R W I=iv32_CustomReg69_p O=ov32_CustomReg69_p

-- BASEADDR + 0x130   CUSTOM_REGISTER70   User custom registers
--   31:0 CustomReg70 R W I=iv32_CustomReg70_p O=ov32_CustomReg70_p

-- BASEADDR + 0x134   CUSTOM_REGISTER71   User custom registers
--   31:0 CustomReg71 R W I=iv32_CustomReg71_p O=ov32_CustomReg71_p

-- BASEADDR + 0x138   CUSTOM_REGISTER72   User custom registers
--   31:0 CustomReg72 R W I=iv32_CustomReg72_p O=ov32_CustomReg72_p

-- BASEADDR + 0x13c   CUSTOM_REGISTER73   User custom registers
--   31:0 CustomReg73 R W I=iv32_CustomReg73_p O=ov32_CustomReg73_p

-- BASEADDR + 0x140   CUSTOM_REGISTER74   User custom registers
--   31:0 CustomReg74 R W I=iv32_CustomReg74_p O=ov32_CustomReg74_p

-- BASEADDR + 0x144   CUSTOM_REGISTER75   User custom registers
--   31:0 CustomReg75 R W I=iv32_CustomReg75_p O=ov32_CustomReg75_p

-- BASEADDR + 0x148   CUSTOM_REGISTER76   User custom registers
--   31:0 CustomReg76 R W I=iv32_CustomReg76_p O=ov32_CustomReg76_p

-- BASEADDR + 0x14c   CUSTOM_REGISTER77   User custom registers
--   31:0 CustomReg77 R W I=iv32_CustomReg77_p O=ov32_CustomReg77_p

-- BASEADDR + 0x150   CUSTOM_REGISTER78   User custom registers
--   31:0 CustomReg78 R W I=iv32_CustomReg78_p O=ov32_CustomReg78_p

-- BASEADDR + 0x154   CUSTOM_REGISTER79   User custom registers
--   31:0 CustomReg79 R W I=iv32_CustomReg79_p O=ov32_CustomReg79_p

-- BASEADDR + 0x158   CUSTOM_REGISTER80   User custom registers
--   31:0 CustomReg80 R W I=iv32_CustomReg80_p O=ov32_CustomReg80_p

-- BASEADDR + 0x15c   CUSTOM_REGISTER81   User custom registers
--   31:0 CustomReg81 R W I=iv32_CustomReg81_p O=ov32_CustomReg81_p

-- BASEADDR + 0x160   CUSTOM_REGISTER82   User custom registers
--   31:0 CustomReg82 R W I=iv32_CustomReg82_p O=ov32_CustomReg82_p

-- BASEADDR + 0x164   CUSTOM_REGISTER83   User custom registers
--   31:0 CustomReg83 R W I=iv32_CustomReg83_p O=ov32_CustomReg83_p

-- BASEADDR + 0x168   CUSTOM_REGISTER84   User custom registers
--   31:0 CustomReg84 R W I=iv32_CustomReg84_p O=ov32_CustomReg84_p

-- BASEADDR + 0x16c   CUSTOM_REGISTER85   User custom registers
--   31:0 CustomReg85 R W I=iv32_CustomReg85_p O=ov32_CustomReg85_p

-- BASEADDR + 0x170   CUSTOM_REGISTER86   User custom registers
--   31:0 CustomReg86 R W I=iv32_CustomReg86_p O=ov32_CustomReg86_p

-- BASEADDR + 0x174   CUSTOM_REGISTER87   User custom registers
--   31:0 CustomReg87 R W I=iv32_CustomReg87_p O=ov32_CustomReg87_p

-- BASEADDR + 0x178   CUSTOM_REGISTER88   User custom registers
--   31:0 CustomReg88 R W I=iv32_CustomReg88_p O=ov32_CustomReg88_p

-- BASEADDR + 0x17c   CUSTOM_REGISTER89   User custom registers
--   31:0 CustomReg89 R W I=iv32_CustomReg89_p O=ov32_CustomReg89_p

-- BASEADDR + 0x180   CUSTOM_REGISTER90   User custom registers
--   31:0 CustomReg90 R W I=iv32_CustomReg90_p O=ov32_CustomReg90_p

-- BASEADDR + 0x184   CUSTOM_REGISTER91   User custom registers
--   31:0 CustomReg91 R W I=iv32_CustomReg91_p O=ov32_CustomReg91_p

-- BASEADDR + 0x188   CUSTOM_REGISTER92   User custom registers
--   31:0 CustomReg92 R W I=iv32_CustomReg92_p O=ov32_CustomReg92_p

-- BASEADDR + 0x18c   CUSTOM_REGISTER93   User custom registers
--   31:0 CustomReg93 R W I=iv32_CustomReg93_p O=ov32_CustomReg93_p

-- BASEADDR + 0x190   CUSTOM_REGISTER94   User custom registers
--   31:0 CustomReg94 R W I=iv32_CustomReg94_p O=ov32_CustomReg94_p

-- BASEADDR + 0x194   CUSTOM_REGISTER95   User custom registers
--   31:0 CustomReg95 R W I=iv32_CustomReg95_p O=ov32_CustomReg95_p

-- BASEADDR + 0x198   CUSTOM_REGISTER96   User custom registers
--   31:0 CustomReg96 R W I=iv32_CustomReg96_p O=ov32_CustomReg96_p

-- BASEADDR + 0x19c   CUSTOM_REGISTER97   User custom registers
--   31:0 CustomReg97 R W I=iv32_CustomReg97_p O=ov32_CustomReg97_p

-- BASEADDR + 0x1a0   CUSTOM_REGISTER98   User custom registers
--   31:0 CustomReg98 R W I=iv32_CustomReg98_p O=ov32_CustomReg98_p

-- BASEADDR + 0x1a4   CUSTOM_REGISTER99   User custom registers
--   31:0 CustomReg99 R W I=iv32_CustomReg99_p O=ov32_CustomReg99_p

-- BASEADDR + 0x1a8   AURORA0_CTRL    Aurora core control register
--   15:0 Aurora0_Idx R W O=ov16_Aurora0_Idx_p
--   16:16 Aurora0_WrEn R W O=o_Aurora0_WrEn_p
--   31:17 rsvd R

-- BASEADDR + 0x1ac   AURORA0_DATA    Aurora core data register
--   31:0 Aurora0_Data R W I=iv32_Aurora0_Data_p O=ov32_Aurora0_Data_p

-- BASEADDR + 0x1b0   AURORA1_CTRL    Aurora core control register
--   15:0 Aurora1_Idx R W O=ov16_Aurora1_Idx_p
--   16:16 Aurora1_WrEn R W O=o_Aurora1_WrEn_p
--   31:17 rsvd R

-- BASEADDR + 0x1b4   AURORA1_DATA    Aurora core data register
--   31:0 Aurora1_Data R W I=iv32_Aurora1_Data_p O=ov32_Aurora1_Data_p

-- BASEADDR + 0x1b8   AURORA2_CTRL    Aurora core control register
--   15:0 Aurora2_Idx R W O=ov16_Aurora2_Idx_p
--   16:16 Aurora2_WrEn R W O=o_Aurora2_WrEn_p
--   31:17 rsvd R

-- BASEADDR + 0x1bc   AURORA2_DATA    Aurora core data register
--   31:0 Aurora2_Data R W I=iv32_Aurora2_Data_p O=ov32_Aurora2_Data_p

-- BASEADDR + 0x1c0   AURORA3_CTRL    Aurora core control register
--   15:0 Aurora3_Idx R W O=ov16_Aurora3_Idx_p
--   16:16 Aurora3_WrEn R W O=o_Aurora3_WrEn_p
--   31:17 rsvd R

-- BASEADDR + 0x1c4   AURORA3_DATA    Aurora core data register
--   31:0 Aurora3_Data R W I=iv32_Aurora3_Data_p O=ov32_Aurora3_Data_p

-- BASEADDR + 0x1c8   AURORA4_CTRL    Aurora core control register
--   15:0 Aurora4_Idx R W O=ov16_Aurora4_Idx_p
--   16:16 Aurora4_WrEn R W O=o_Aurora4_WrEn_p
--   31:17 rsvd R

-- BASEADDR + 0x1cc   AURORA4_DATA    Aurora core data register
--   31:0 Aurora4_Data R W I=iv32_Aurora4_Data_p O=ov32_Aurora4_Data_p

-- BASEADDR + 0x1d0   AURORA5_CTRL    Aurora core control register
--   15:0 Aurora5_Idx R W O=ov16_Aurora5_Idx_p
--   16:16 Aurora5_WrEn R W O=o_Aurora5_WrEn_p
--   31:17 rsvd R

-- BASEADDR + 0x1d4   AURORA5_DATA    Aurora core data register
--   31:0 Aurora5_Data R W I=iv32_Aurora5_Data_p O=ov32_Aurora5_Data_p

-- BASEADDR + 0x1d8   AURORA6_CTRL    Aurora core control register
--   15:0 Aurora6_Idx R W O=ov16_Aurora6_Idx_p
--   16:16 Aurora6_WrEn R W O=o_Aurora6_WrEn_p
--   31:17 rsvd R

-- BASEADDR + 0x1dc   AURORA6_DATA    Aurora core data register
--   31:0 Aurora6_Data R W I=iv32_Aurora6_Data_p O=ov32_Aurora6_Data_p

-- BASEADDR + 0x1e0   AURORA7_CTRL    Aurora core control register
--   15:0 Aurora7_Idx R W O=ov16_Aurora7_Idx_p
--   16:16 Aurora7_WrEn R W O=o_Aurora7_WrEn_p
--   31:17 rsvd R

-- BASEADDR + 0x1e4   AURORA7_DATA    Aurora core data register
--   31:0 Aurora7_Data R W I=iv32_Aurora7_Data_p O=ov32_Aurora7_Data_p

-- BASEADDR + 0x1e8   PPS_SYNC_COREID    core id and version
--   31:0 PPSSYNC_CoreIdVers R I=iv32_PPSSYNC_CoreIdVers_p

-- BASEADDR + 0x1ec   PPS_SYNC_CLK_TARGET    Clock frequency target value
--   31:0 PPSSYNC_ClkTarget R W O=ov32_PPSSYNC_ClkTarget_p

-- BASEADDR + 0x1f0   PPS_SYNC_CTRL    control register
--   0:0 PPSSYNC_CoreReset R W O=o_PPSSYNC_CoreReset_p
--   1:1 PPSSYNC_RstUponRead R W O=o_PPSSYNC_RstUponRead_p
--   2:2 PPSSYNC_RstAcc R W O=o_PPSSYNC_RstAcc_p
--   3:3 PPSSYNC_CoreEnable R W O=o_PPSSYNC_CoreEnable_p
--   31:6 reserved R
--   4:4 PPSSYNC_MovSumEn R W O=o_PPSSYNC_MovSumEn_p
--   5:5 PPSSYNC_MovSumRst R W O=o_PPSSYNC_MovSumRst_p

-- BASEADDR + 0x1f4   PPS_SYNC_PPSCNT    pps count register
--   31:0 PPSSYNC_PpsCnt R I=iv32_PPSSYNC_PpsCnt_p

-- BASEADDR + 0x1f8   PPS_SYNC_DIFFACC    difference accumulator
--   31:0 PPSSYNC_DiffAcc R+ I=iv32_PPSSYNC_DiffAcc_p

-- BASEADDR + 0x1fc   PPS_SYNC_PROGDELAY    programmable delay for moving window
--   31:0 PPSSYNC_ProgDelay R W O=ov32_PPSSYNC_ProgDelay_p

-- BASEADDR + 0x200   PPS_SYNC_PPS_FREQ    PPS rising-edge frequency
--   31:0 PPSSYNC_PpsFreq R W O=ov32_PPSSYNC_PpsFreq_p

-- BASEADDR + 0x204   LVDS0_COREID    LVDS instance 0 core ID
--   31:0 lvds0_coreid R I=iv32_lvds0_coreid_p

-- BASEADDR + 0x208   LVDS0_CTRL    LVDS instance 0 control
--   31:0 lvds0_ctrl R W O=ov32_lvds0_ctrl_p

-- BASEADDR + 0x20c   LVDS0_VALUE    LVDS instance 0 value
--   31:0 lvds0_value R W I=iv32_lvds0_value_p O=ov32_lvds0_value_p

-- BASEADDR + 0x210   LVDS0_OE    LVDS instance 0 output enable
--   31:0 lvds0_oe R W O=ov32_lvds0_oe_p

-- BASEADDR + 0x214   LVDS1_COREID    LVDS instance 1 core ID
--   31:0 lvds1_coreid R I=iv32_lvds1_coreid_p

-- BASEADDR + 0x218   LVDS1_CTRL    LVDS instance 1 control
--   31:0 lvds1_ctrl R W O=ov32_lvds1_ctrl_p

-- BASEADDR + 0x21c   LVDS1_VALUE    LVDS instance 1 value
--   31:0 lvds1_value R W I=iv32_lvds1_value_p O=ov32_lvds1_value_p

-- BASEADDR + 0x220   LVDS1_OE    LVDS instance 1 output enable
--   31:0 lvds1_oe R W O=ov32_lvds1_oe_p

-- BASEADDR + 0x224   LVDS2_COREID    LVDS instance 2 core ID
--   31:0 lvds2_coreid R I=iv32_lvds2_coreid_p

-- BASEADDR + 0x228   LVDS2_CTRL    LVDS instance 2 control
--   31:0 lvds2_ctrl R W O=ov32_lvds2_ctrl_p

-- BASEADDR + 0x22c   LVDS2_VALUE    LVDS instance 2 value
--   31:0 lvds2_value R W I=iv32_lvds2_value_p O=ov32_lvds2_value_p

-- BASEADDR + 0x230   LVDS2_OE    LVDS instance 2 output enable
--   31:0 lvds2_oe R W O=ov32_lvds2_oe_p

-- BASEADDR + 0x234   LVDS3_COREID    LVDS instance 3 core ID
--   31:0 lvds3_coreid R I=iv32_lvds3_coreid_p

-- BASEADDR + 0x238   LVDS3_CTRL    LVDS instance 3 control
--   31:0 lvds3_ctrl R W O=ov32_lvds3_ctrl_p

-- BASEADDR + 0x23c   LVDS3_VALUE    LVDS instance 3 value
--   31:0 lvds3_value R W I=iv32_lvds3_value_p O=ov32_lvds3_value_p

-- BASEADDR + 0x240   LVDS3_OE    LVDS instance 3 output enable
--   31:0 lvds3_oe R W O=ov32_lvds3_oe_p

-- BASEADDR + 0x244   RTDEX_SYNC_COREID   
--   31:0 RTDExSyncCoreId R I=iv32_RTDExSyncCoreId_p

-- BASEADDR + 0x248   RTDEX_SYNC_CTRL   
--   0:0 RTDExSyncCoreReset R W O=o_RTDExSyncCoreReset_p
--   1:1 rsvd R
--   11:4 RtdexSyncAddr R W O=ov8_RtdexSyncAddr_p
--   2:2 RTDExSyncConfigWrEn R W O=o_RTDExSyncConfigWrEn_p
--   3:3 rsvd R
--   31:12 rsvd R

-- BASEADDR + 0x24c   RTDEX_SYNC_WR_REG   
--   31:0 RtdexSyncWrReg R W O=ov32_RtdexSyncWrReg_p

-- BASEADDR + 0x250   RTDEX_SYNC_RD_REG   
--   31:0 RtdexSyncRdReg R I=iv32_RtdexSyncRdReg_p

-- BASEADDR + 0x254   TIMESTAMP_COREID    timestamp core id and version
--   31:0 Timestamp_CoreIdVers R I=iv32_Timestamp_CoreIdVers_p

-- BASEADDR + 0x258   TIMESTAMP_CTRL    timestamp control register
--   0:0 Timestamp_CoreReset P O=o_Timestamp_CoreReset_p
--   1:1 Timestamp_SetTime P O=o_Timestamp_SetTime_p
--   2:2 Timestamp_LatchTime P O=o_Timestamp_LatchTime_p
--   31:3 reserved R

-- BASEADDR + 0x25c   TIMESTAMP_MSW    timestamp register MSW
--   31:0 Timestamp_MSW R W I=iv32_Timestamp_MSW_p O=ov32_Timestamp_MSW_p

-- BASEADDR + 0x260   TIMESTAMP_LSW    timestamp register LSW
--   31:0 Timestamp_LSW R W I=iv32_Timestamp_LSW_p O=ov32_Timestamp_LSW_p

--------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

library proc_common_v3_00_a;
use proc_common_v3_00_a.proc_common_pkg.all;

-- DO NOT EDIT ABOVE THIS LINE --------------------

--USER libraries added here

------------------------------------------------------------------------------
-- Entity section
------------------------------------------------------------------------------
-- Definition of Generics:
--   C_NUM_REG                    -- Number of software accessible registers
--   C_SLV_DWIDTH                 -- Slave interface data bus width
--
-- Definition of Ports:
--   Bus2IP_Clk                   -- Bus to IP clock
--   Bus2IP_Resetn                -- Bus to IP reset
--   Bus2IP_Data                  -- Bus to IP data bus
--   Bus2IP_BE                    -- Bus to IP byte enables
--   Bus2IP_RdCE                  -- Bus to IP read chip enable
--   Bus2IP_WrCE                  -- Bus to IP write chip enable
--   IP2Bus_Data                  -- IP to Bus data bus
--   IP2Bus_RdAck                 -- IP to Bus read transfer acknowledgement
--   IP2Bus_WrAck                 -- IP to Bus write transfer acknowledgement
--   IP2Bus_Error                 -- IP to Bus error response
------------------------------------------------------------------------------

entity user_logic is
  generic
  (
    -- ADD USER GENERICS BELOW THIS LINE ---------------
    --USER generics added here
    -- ADD USER GENERICS ABOVE THIS LINE ---------------

    -- DO NOT EDIT BELOW THIS LINE ---------------------
    -- Bus protocol parameters, do not add to or delete
    C_NUM_REG                      : integer              := 153;
    C_SLV_DWIDTH                   : integer              := 32
    -- DO NOT EDIT ABOVE THIS LINE ---------------------
  );
  port
  (
    -- ADD USER PORTS BELOW THIS LINE ------------------
    --USER ports added here
    -- ADD USER PORTS ABOVE THIS LINE ------------------
    -- User ports
    i_daughter_absent_p : in std_logic;
    i_fmc1_absent_p : in std_logic;
    o_pcie_msi_p : out std_logic;
    i_fmc1_stack_absent_p : in std_logic;
    i_fmc1_clkdir_p : in std_logic;
    i_fmc2_absent_p : in std_logic;
    i_fmc2_stack_absent_p : in std_logic;
    i_fmc2_clkdir_p : in std_logic;
    i_ddr3_init_done_p : in std_logic;
    i_pcie_present_p : in std_logic;
    i_pcie_clock_lock_p : in std_logic;
    o_mgtrefclk_125m_en_p : out std_logic;
    o_mgtrefclk_156m_en_p : out std_logic;
    i_mgtpll_lol_p : in std_logic;
    o_mgtrefclk_100m_en_p : out std_logic;
    o_ctrl_fclka_highz_p : out std_logic;
    o_ctrl_amctclka_to_fmc1clk2_en_p : out std_logic;
    o_ctrl_amctclka_to_fmc2clk2_en_p : out std_logic;
    o_ctrl_amctclkc_to_fmc1clk3_en_p : out std_logic;
    o_ctrl_amctclkc_to_fmc2clk3_en_p : out std_logic;
    i_mgtpll_clk1_los_p : in std_logic;
    i_mgtpll_clk2_los_p : in std_logic;
    ov2_vadj1_sel_p : out std_logic_vector(1 downto 0);
    o_vadj1_en_p : out std_logic;
    o_fpga_reset_n_p : out std_logic;
    ov2_vadj2_sel_p : out std_logic_vector(1 downto 0);
    o_vadj2_en_p : out std_logic;
    ov8_led_green_en_p : out std_logic_vector(7 downto 0);
    ov8_led_red_en_p : out std_logic_vector(7 downto 0);
    o_i2c_request_p : out std_logic;
    i_i2c_granted_p : in std_logic;
    ov2_i2c_bus_sel_p : out std_logic_vector(1 downto 0);
    iv32_CustomReg0_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg0_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg1_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg1_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg2_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg2_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg3_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg3_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg4_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg4_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg5_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg5_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg6_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg6_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg7_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg7_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg8_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg8_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg9_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg9_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg10_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg10_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg11_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg11_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg12_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg12_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg13_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg13_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg14_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg14_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg15_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg15_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg16_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg16_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg17_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg17_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg18_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg18_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg19_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg19_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg20_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg20_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg21_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg21_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg22_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg22_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg23_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg23_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg24_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg24_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg25_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg25_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg26_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg26_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg27_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg27_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg28_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg28_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg29_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg29_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg30_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg30_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg31_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg31_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg32_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg32_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg33_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg33_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg34_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg34_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg35_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg35_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg36_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg36_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg37_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg37_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg38_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg38_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg39_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg39_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg40_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg40_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg41_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg41_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg42_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg42_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg43_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg43_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg44_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg44_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg45_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg45_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg46_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg46_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg47_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg47_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg48_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg48_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg49_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg49_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg50_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg50_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg51_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg51_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg52_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg52_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg53_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg53_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg54_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg54_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg55_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg55_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg56_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg56_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg57_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg57_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg58_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg58_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg59_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg59_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg60_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg60_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg61_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg61_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg62_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg62_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg63_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg63_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg64_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg64_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg65_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg65_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg66_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg66_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg67_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg67_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg68_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg68_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg69_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg69_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg70_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg70_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg71_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg71_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg72_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg72_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg73_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg73_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg74_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg74_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg75_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg75_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg76_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg76_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg77_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg77_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg78_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg78_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg79_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg79_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg80_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg80_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg81_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg81_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg82_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg82_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg83_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg83_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg84_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg84_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg85_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg85_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg86_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg86_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg87_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg87_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg88_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg88_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg89_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg89_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg90_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg90_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg91_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg91_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg92_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg92_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg93_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg93_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg94_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg94_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg95_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg95_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg96_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg96_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg97_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg97_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg98_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg98_p : out std_logic_vector(31 downto 0);
    iv32_CustomReg99_p : in std_logic_vector(31 downto 0);
    ov32_CustomReg99_p : out std_logic_vector(31 downto 0);
    ov16_Aurora0_Idx_p : out std_logic_vector(15 downto 0);
    o_Aurora0_WrEn_p : out std_logic;
    iv32_Aurora0_Data_p : in std_logic_vector(31 downto 0);
    ov32_Aurora0_Data_p : out std_logic_vector(31 downto 0);
    ov16_Aurora1_Idx_p : out std_logic_vector(15 downto 0);
    o_Aurora1_WrEn_p : out std_logic;
    iv32_Aurora1_Data_p : in std_logic_vector(31 downto 0);
    ov32_Aurora1_Data_p : out std_logic_vector(31 downto 0);
    ov16_Aurora2_Idx_p : out std_logic_vector(15 downto 0);
    o_Aurora2_WrEn_p : out std_logic;
    iv32_Aurora2_Data_p : in std_logic_vector(31 downto 0);
    ov32_Aurora2_Data_p : out std_logic_vector(31 downto 0);
    ov16_Aurora3_Idx_p : out std_logic_vector(15 downto 0);
    o_Aurora3_WrEn_p : out std_logic;
    iv32_Aurora3_Data_p : in std_logic_vector(31 downto 0);
    ov32_Aurora3_Data_p : out std_logic_vector(31 downto 0);
    ov16_Aurora4_Idx_p : out std_logic_vector(15 downto 0);
    o_Aurora4_WrEn_p : out std_logic;
    iv32_Aurora4_Data_p : in std_logic_vector(31 downto 0);
    ov32_Aurora4_Data_p : out std_logic_vector(31 downto 0);
    ov16_Aurora5_Idx_p : out std_logic_vector(15 downto 0);
    o_Aurora5_WrEn_p : out std_logic;
    iv32_Aurora5_Data_p : in std_logic_vector(31 downto 0);
    ov32_Aurora5_Data_p : out std_logic_vector(31 downto 0);
    ov16_Aurora6_Idx_p : out std_logic_vector(15 downto 0);
    o_Aurora6_WrEn_p : out std_logic;
    iv32_Aurora6_Data_p : in std_logic_vector(31 downto 0);
    ov32_Aurora6_Data_p : out std_logic_vector(31 downto 0);
    ov16_Aurora7_Idx_p : out std_logic_vector(15 downto 0);
    o_Aurora7_WrEn_p : out std_logic;
    iv32_Aurora7_Data_p : in std_logic_vector(31 downto 0);
    ov32_Aurora7_Data_p : out std_logic_vector(31 downto 0);
    iv32_PPSSYNC_CoreIdVers_p : in std_logic_vector(31 downto 0);
    ov32_PPSSYNC_ClkTarget_p : out std_logic_vector(31 downto 0);
    o_PPSSYNC_CoreReset_p : out std_logic;
    o_PPSSYNC_RstUponRead_p : out std_logic;
    o_PPSSYNC_RstAcc_p : out std_logic;
    o_PPSSYNC_CoreEnable_p : out std_logic;
    o_PPSSYNC_MovSumEn_p : out std_logic;
    o_PPSSYNC_MovSumRst_p : out std_logic;
    iv32_PPSSYNC_PpsCnt_p : in std_logic_vector(31 downto 0);
    iv32_PPSSYNC_DiffAcc_p : in std_logic_vector(31 downto 0);
    o_PPSSYNC_DiffAccRead_p : out std_logic;
    ov32_PPSSYNC_ProgDelay_p : out std_logic_vector(31 downto 0);
    ov32_PPSSYNC_PpsFreq_p : out std_logic_vector(31 downto 0);
    iv32_lvds0_coreid_p : in std_logic_vector(31 downto 0);
    ov32_lvds0_ctrl_p : out std_logic_vector(31 downto 0);
    iv32_lvds0_value_p : in std_logic_vector(31 downto 0);
    ov32_lvds0_value_p : out std_logic_vector(31 downto 0);
    ov32_lvds0_oe_p : out std_logic_vector(31 downto 0);
    iv32_lvds1_coreid_p : in std_logic_vector(31 downto 0);
    ov32_lvds1_ctrl_p : out std_logic_vector(31 downto 0);
    iv32_lvds1_value_p : in std_logic_vector(31 downto 0);
    ov32_lvds1_value_p : out std_logic_vector(31 downto 0);
    ov32_lvds1_oe_p : out std_logic_vector(31 downto 0);
    iv32_lvds2_coreid_p : in std_logic_vector(31 downto 0);
    ov32_lvds2_ctrl_p : out std_logic_vector(31 downto 0);
    iv32_lvds2_value_p : in std_logic_vector(31 downto 0);
    ov32_lvds2_value_p : out std_logic_vector(31 downto 0);
    ov32_lvds2_oe_p : out std_logic_vector(31 downto 0);
    iv32_lvds3_coreid_p : in std_logic_vector(31 downto 0);
    ov32_lvds3_ctrl_p : out std_logic_vector(31 downto 0);
    iv32_lvds3_value_p : in std_logic_vector(31 downto 0);
    ov32_lvds3_value_p : out std_logic_vector(31 downto 0);
    ov32_lvds3_oe_p : out std_logic_vector(31 downto 0);
    iv32_RTDExSyncCoreId_p : in std_logic_vector(31 downto 0);
    o_RTDExSyncCoreReset_p : out std_logic;
    ov8_RtdexSyncAddr_p : out std_logic_vector(7 downto 0);
    o_RTDExSyncConfigWrEn_p : out std_logic;
    ov32_RtdexSyncWrReg_p : out std_logic_vector(31 downto 0);
    iv32_RtdexSyncRdReg_p : in std_logic_vector(31 downto 0);
    iv32_Timestamp_CoreIdVers_p : in std_logic_vector(31 downto 0);
    o_Timestamp_CoreReset_p : out std_logic;
    o_Timestamp_SetTime_p : out std_logic;
    o_Timestamp_LatchTime_p : out std_logic;
    iv32_Timestamp_MSW_p : in std_logic_vector(31 downto 0);
    ov32_Timestamp_MSW_p : out std_logic_vector(31 downto 0);
    iv32_Timestamp_LSW_p : in std_logic_vector(31 downto 0);
    ov32_Timestamp_LSW_p : out std_logic_vector(31 downto 0);
    -- Bus protocol ports, do not add to or delete
    Bus2IP_Clk                     : in  std_logic;
    Bus2IP_Resetn                  : in  std_logic;
    Bus2IP_Data                    : in  std_logic_vector(C_SLV_DWIDTH-1 downto 0);
    Bus2IP_BE                      : in  std_logic_vector(C_SLV_DWIDTH/8-1 downto 0);
    Bus2IP_RdCE                    : in  std_logic_vector(C_NUM_REG-1 downto 0);
    Bus2IP_WrCE                    : in  std_logic_vector(C_NUM_REG-1 downto 0);
    IP2Bus_Data                    : out std_logic_vector(C_SLV_DWIDTH-1 downto 0);
    IP2Bus_RdAck                   : out std_logic;
    IP2Bus_WrAck                   : out std_logic;
    IP2Bus_Error                   : out std_logic
  );

 attribute MAX_FANOUT : string;
 attribute SIGIS : string;
 attribute SIGIS of Bus2IP_Clk    : signal is "CLK";
 attribute SIGIS of Bus2IP_Resetn : signal is "RST";

end entity user_logic;

------------------------------------------------------------------------------
-- Architecture section
------------------------------------------------------------------------------

architecture IMP of user_logic is

-------------------------------------------------------------------------------
-- Constant declarations
-------------------------------------------------------------------------------


-------------------------------------------------------------------------------
--     ************** Function declaratin *******************                   
-- Return a std_logic_vector with only one bit set to one.
-- The argument BitPosition represent the bit position to set to one, starting with 0.
-- The argument Width represent the width of the returned std_logic_vector.
-------------------------------------------------------------------------------
  function OneHotVector( BitPosition : integer;                              
                Width : integer)                                             
                return std_logic_vector                                      
  is                                                                         
    variable Result                   : std_logic_vector(Width - 1 downto 0);

  begin                        
    Result := (others => '0'); 
    Result(BitPosition) := '1';
    return Result;             
  end OneHotVector;            
-------------------------------------------------------------------------------
-- Signal and Type Declarations
-------------------------------------------------------------------------------

  signal pcie_msi_s                     : std_logic;
  signal mgtrefclk_125m_en_s                     : std_logic;
  signal mgtrefclk_156m_en_s                     : std_logic;
  signal mgtrefclk_100m_en_s                     : std_logic;
  signal ctrl_fclka_highz_s                     : std_logic;
  signal ctrl_amctclka_to_fmc1clk2_en_s                     : std_logic;
  signal ctrl_amctclka_to_fmc2clk2_en_s                     : std_logic;
  signal ctrl_amctclkc_to_fmc1clk3_en_s                     : std_logic;
  signal ctrl_amctclkc_to_fmc2clk3_en_s                     : std_logic;
  signal v2_vadj1_sel_s                     : std_logic_vector(1 downto 0);
  signal vadj1_en_s                     : std_logic;
  signal fpga_reset_n_s                     : std_logic;
  signal v2_vadj2_sel_s                     : std_logic_vector(1 downto 0);
  signal vadj2_en_s                     : std_logic;
  signal v8_led_green_en_s                     : std_logic_vector(7 downto 0);
  signal v8_led_red_en_s                     : std_logic_vector(7 downto 0);
  signal i2c_request_s                     : std_logic;
  signal v2_i2c_bus_sel_s                     : std_logic_vector(1 downto 0);
  signal v32_CustomReg0_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg1_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg2_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg3_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg4_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg5_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg6_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg7_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg8_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg9_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg10_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg11_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg12_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg13_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg14_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg15_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg16_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg17_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg18_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg19_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg20_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg21_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg22_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg23_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg24_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg25_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg26_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg27_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg28_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg29_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg30_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg31_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg32_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg33_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg34_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg35_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg36_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg37_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg38_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg39_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg40_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg41_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg42_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg43_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg44_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg45_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg46_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg47_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg48_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg49_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg50_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg51_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg52_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg53_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg54_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg55_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg56_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg57_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg58_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg59_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg60_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg61_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg62_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg63_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg64_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg65_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg66_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg67_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg68_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg69_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg70_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg71_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg72_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg73_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg74_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg75_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg76_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg77_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg78_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg79_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg80_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg81_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg82_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg83_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg84_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg85_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg86_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg87_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg88_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg89_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg90_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg91_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg92_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg93_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg94_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg95_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg96_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg97_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg98_s                     : std_logic_vector(31 downto 0);
  signal v32_CustomReg99_s                     : std_logic_vector(31 downto 0);
  signal v16_Aurora0_Idx_s                     : std_logic_vector(15 downto 0);
  signal Aurora0_WrEn_s                     : std_logic;
  signal v32_Aurora0_Data_s                     : std_logic_vector(31 downto 0);
  signal v16_Aurora1_Idx_s                     : std_logic_vector(15 downto 0);
  signal Aurora1_WrEn_s                     : std_logic;
  signal v32_Aurora1_Data_s                     : std_logic_vector(31 downto 0);
  signal v16_Aurora2_Idx_s                     : std_logic_vector(15 downto 0);
  signal Aurora2_WrEn_s                     : std_logic;
  signal v32_Aurora2_Data_s                     : std_logic_vector(31 downto 0);
  signal v16_Aurora3_Idx_s                     : std_logic_vector(15 downto 0);
  signal Aurora3_WrEn_s                     : std_logic;
  signal v32_Aurora3_Data_s                     : std_logic_vector(31 downto 0);
  signal v16_Aurora4_Idx_s                     : std_logic_vector(15 downto 0);
  signal Aurora4_WrEn_s                     : std_logic;
  signal v32_Aurora4_Data_s                     : std_logic_vector(31 downto 0);
  signal v16_Aurora5_Idx_s                     : std_logic_vector(15 downto 0);
  signal Aurora5_WrEn_s                     : std_logic;
  signal v32_Aurora5_Data_s                     : std_logic_vector(31 downto 0);
  signal v16_Aurora6_Idx_s                     : std_logic_vector(15 downto 0);
  signal Aurora6_WrEn_s                     : std_logic;
  signal v32_Aurora6_Data_s                     : std_logic_vector(31 downto 0);
  signal v16_Aurora7_Idx_s                     : std_logic_vector(15 downto 0);
  signal Aurora7_WrEn_s                     : std_logic;
  signal v32_Aurora7_Data_s                     : std_logic_vector(31 downto 0);
  signal v32_PPSSYNC_ClkTarget_s                     : std_logic_vector(31 downto 0);
  signal PPSSYNC_CoreReset_s                     : std_logic;
  signal PPSSYNC_RstUponRead_s                     : std_logic;
  signal PPSSYNC_RstAcc_s                     : std_logic;
  signal PPSSYNC_CoreEnable_s                     : std_logic;
  signal PPSSYNC_MovSumEn_s                     : std_logic;
  signal PPSSYNC_MovSumRst_s                     : std_logic;
  signal v32_PPSSYNC_ProgDelay_s                     : std_logic_vector(31 downto 0);
  signal v32_PPSSYNC_PpsFreq_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds0_ctrl_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds0_value_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds0_oe_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds1_ctrl_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds1_value_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds1_oe_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds2_ctrl_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds2_value_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds2_oe_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds3_ctrl_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds3_value_s                     : std_logic_vector(31 downto 0);
  signal v32_lvds3_oe_s                     : std_logic_vector(31 downto 0);
  signal RTDExSyncCoreReset_s                     : std_logic;
  signal v8_RtdexSyncAddr_s                     : std_logic_vector(7 downto 0);
  signal RTDExSyncConfigWrEn_s                     : std_logic;
  signal v32_RtdexSyncWrReg_s                     : std_logic_vector(31 downto 0);
  signal Timestamp_CoreReset_s                     : std_logic;
  signal Timestamp_SetTime_s                     : std_logic;
  signal Timestamp_LatchTime_s                     : std_logic;
  signal v32_Timestamp_MSW_s                     : std_logic_vector(31 downto 0);
  signal v32_Timestamp_LSW_s                     : std_logic_vector(31 downto 0);
  signal slv_reg_write_sel              : std_logic_vector(152 downto 0);
  signal slv_reg_read_sel               : std_logic_vector(152 downto 0);
  signal slv_ip2bus_data                : std_logic_vector(C_SLV_DWIDTH-1 downto 0);
  signal slv_read_ack                   : std_logic;
  signal slv_write_ack                  : std_logic;

------------------------------------------------------------------------------
begin
------------------------------------------------------------------------------

-------------------------------------------------------------------------------
-- Begin architecture
-------------------------------------------------------------------------------

-- swap bits
WrCeBitSwap: for i in 0 to slv_reg_write_sel'high generate
  slv_reg_write_sel(i) <= Bus2IP_WrCE(slv_reg_write_sel'high - i);
end generate WrCeBitSwap;

RdCeBitSwap: for i in 0 to slv_reg_read_sel'high generate
  slv_reg_read_sel(i)  <= Bus2IP_RdCE(slv_reg_read_sel'high - i);
end generate RdCeBitSwap;

-- generate write/read ack
  slv_write_ack <=   Bus2IP_WrCE(0) or   Bus2IP_WrCE(1) or   Bus2IP_WrCE(2) or   Bus2IP_WrCE(3) or   Bus2IP_WrCE(4) or   Bus2IP_WrCE(5) or   Bus2IP_WrCE(6) or   Bus2IP_WrCE(7) or   Bus2IP_WrCE(8) or   Bus2IP_WrCE(9) or   Bus2IP_WrCE(10) or   Bus2IP_WrCE(11) or   Bus2IP_WrCE(12) or   Bus2IP_WrCE(13) or   Bus2IP_WrCE(14) or   Bus2IP_WrCE(15) or   Bus2IP_WrCE(16) or   Bus2IP_WrCE(17) or   Bus2IP_WrCE(18) or   Bus2IP_WrCE(19) or   Bus2IP_WrCE(20) or   Bus2IP_WrCE(21) or   Bus2IP_WrCE(22) or   Bus2IP_WrCE(23) or   Bus2IP_WrCE(24) or   Bus2IP_WrCE(25) or   Bus2IP_WrCE(26) or   Bus2IP_WrCE(27) or   Bus2IP_WrCE(28) or   Bus2IP_WrCE(29) or   Bus2IP_WrCE(30) or   Bus2IP_WrCE(31) or   Bus2IP_WrCE(32) or   Bus2IP_WrCE(33) or   Bus2IP_WrCE(34) or   Bus2IP_WrCE(35) or   Bus2IP_WrCE(36) or   Bus2IP_WrCE(37) or   Bus2IP_WrCE(38) or   Bus2IP_WrCE(39) or   Bus2IP_WrCE(40) or   Bus2IP_WrCE(41) or   Bus2IP_WrCE(42) or   Bus2IP_WrCE(43) or   Bus2IP_WrCE(44) or   Bus2IP_WrCE(45) or   Bus2IP_WrCE(46) or   Bus2IP_WrCE(47) or   Bus2IP_WrCE(48) or   Bus2IP_WrCE(49) or   Bus2IP_WrCE(50) or   Bus2IP_WrCE(51) or   Bus2IP_WrCE(52) or   Bus2IP_WrCE(53) or   Bus2IP_WrCE(54) or   Bus2IP_WrCE(55) or   Bus2IP_WrCE(56) or   Bus2IP_WrCE(57) or   Bus2IP_WrCE(58) or   Bus2IP_WrCE(59) or   Bus2IP_WrCE(60) or   Bus2IP_WrCE(61) or   Bus2IP_WrCE(62) or   Bus2IP_WrCE(63) or   Bus2IP_WrCE(64) or   Bus2IP_WrCE(65) or   Bus2IP_WrCE(66) or   Bus2IP_WrCE(67) or   Bus2IP_WrCE(68) or   Bus2IP_WrCE(69) or   Bus2IP_WrCE(70) or   Bus2IP_WrCE(71) or   Bus2IP_WrCE(72) or   Bus2IP_WrCE(73) or   Bus2IP_WrCE(74) or   Bus2IP_WrCE(75) or   Bus2IP_WrCE(76) or   Bus2IP_WrCE(77) or   Bus2IP_WrCE(78) or   Bus2IP_WrCE(79) or   Bus2IP_WrCE(80) or   Bus2IP_WrCE(81) or   Bus2IP_WrCE(82) or   Bus2IP_WrCE(83) or   Bus2IP_WrCE(84) or   Bus2IP_WrCE(85) or   Bus2IP_WrCE(86) or   Bus2IP_WrCE(87) or   Bus2IP_WrCE(88) or   Bus2IP_WrCE(89) or   Bus2IP_WrCE(90) or   Bus2IP_WrCE(91) or   Bus2IP_WrCE(92) or   Bus2IP_WrCE(93) or   Bus2IP_WrCE(94) or   Bus2IP_WrCE(95) or   Bus2IP_WrCE(96) or   Bus2IP_WrCE(97) or   Bus2IP_WrCE(98) or   Bus2IP_WrCE(99) or   Bus2IP_WrCE(100) or   Bus2IP_WrCE(101) or   Bus2IP_WrCE(102) or   Bus2IP_WrCE(103) or   Bus2IP_WrCE(104) or   Bus2IP_WrCE(105) or   Bus2IP_WrCE(106) or   Bus2IP_WrCE(107) or   Bus2IP_WrCE(108) or   Bus2IP_WrCE(109) or   Bus2IP_WrCE(110) or   Bus2IP_WrCE(111) or   Bus2IP_WrCE(112) or   Bus2IP_WrCE(113) or   Bus2IP_WrCE(114) or   Bus2IP_WrCE(115) or   Bus2IP_WrCE(116) or   Bus2IP_WrCE(117) or   Bus2IP_WrCE(118) or   Bus2IP_WrCE(119) or   Bus2IP_WrCE(120) or   Bus2IP_WrCE(121) or   Bus2IP_WrCE(122) or   Bus2IP_WrCE(123) or   Bus2IP_WrCE(124) or   Bus2IP_WrCE(125) or   Bus2IP_WrCE(126) or   Bus2IP_WrCE(127) or   Bus2IP_WrCE(128) or   Bus2IP_WrCE(129) or   Bus2IP_WrCE(130) or   Bus2IP_WrCE(131) or   Bus2IP_WrCE(132) or   Bus2IP_WrCE(133) or   Bus2IP_WrCE(134) or   Bus2IP_WrCE(135) or   Bus2IP_WrCE(136) or   Bus2IP_WrCE(137) or   Bus2IP_WrCE(138) or   Bus2IP_WrCE(139) or   Bus2IP_WrCE(140) or   Bus2IP_WrCE(141) or   Bus2IP_WrCE(142) or   Bus2IP_WrCE(143) or   Bus2IP_WrCE(144) or   Bus2IP_WrCE(145) or   Bus2IP_WrCE(146) or   Bus2IP_WrCE(147) or   Bus2IP_WrCE(148) or   Bus2IP_WrCE(149) or   Bus2IP_WrCE(150) or   Bus2IP_WrCE(151) or   Bus2IP_WrCE(152);
  slv_read_ack  <=   Bus2IP_RdCE(0) or   Bus2IP_RdCE(1) or   Bus2IP_RdCE(2) or   Bus2IP_RdCE(3) or   Bus2IP_RdCE(4) or   Bus2IP_RdCE(5) or   Bus2IP_RdCE(6) or   Bus2IP_RdCE(7) or   Bus2IP_RdCE(8) or   Bus2IP_RdCE(9) or   Bus2IP_RdCE(10) or   Bus2IP_RdCE(11) or   Bus2IP_RdCE(12) or   Bus2IP_RdCE(13) or   Bus2IP_RdCE(14) or   Bus2IP_RdCE(15) or   Bus2IP_RdCE(16) or   Bus2IP_RdCE(17) or   Bus2IP_RdCE(18) or   Bus2IP_RdCE(19) or   Bus2IP_RdCE(20) or   Bus2IP_RdCE(21) or   Bus2IP_RdCE(22) or   Bus2IP_RdCE(23) or   Bus2IP_RdCE(24) or   Bus2IP_RdCE(25) or   Bus2IP_RdCE(26) or   Bus2IP_RdCE(27) or   Bus2IP_RdCE(28) or   Bus2IP_RdCE(29) or   Bus2IP_RdCE(30) or   Bus2IP_RdCE(31) or   Bus2IP_RdCE(32) or   Bus2IP_RdCE(33) or   Bus2IP_RdCE(34) or   Bus2IP_RdCE(35) or   Bus2IP_RdCE(36) or   Bus2IP_RdCE(37) or   Bus2IP_RdCE(38) or   Bus2IP_RdCE(39) or   Bus2IP_RdCE(40) or   Bus2IP_RdCE(41) or   Bus2IP_RdCE(42) or   Bus2IP_RdCE(43) or   Bus2IP_RdCE(44) or   Bus2IP_RdCE(45) or   Bus2IP_RdCE(46) or   Bus2IP_RdCE(47) or   Bus2IP_RdCE(48) or   Bus2IP_RdCE(49) or   Bus2IP_RdCE(50) or   Bus2IP_RdCE(51) or   Bus2IP_RdCE(52) or   Bus2IP_RdCE(53) or   Bus2IP_RdCE(54) or   Bus2IP_RdCE(55) or   Bus2IP_RdCE(56) or   Bus2IP_RdCE(57) or   Bus2IP_RdCE(58) or   Bus2IP_RdCE(59) or   Bus2IP_RdCE(60) or   Bus2IP_RdCE(61) or   Bus2IP_RdCE(62) or   Bus2IP_RdCE(63) or   Bus2IP_RdCE(64) or   Bus2IP_RdCE(65) or   Bus2IP_RdCE(66) or   Bus2IP_RdCE(67) or   Bus2IP_RdCE(68) or   Bus2IP_RdCE(69) or   Bus2IP_RdCE(70) or   Bus2IP_RdCE(71) or   Bus2IP_RdCE(72) or   Bus2IP_RdCE(73) or   Bus2IP_RdCE(74) or   Bus2IP_RdCE(75) or   Bus2IP_RdCE(76) or   Bus2IP_RdCE(77) or   Bus2IP_RdCE(78) or   Bus2IP_RdCE(79) or   Bus2IP_RdCE(80) or   Bus2IP_RdCE(81) or   Bus2IP_RdCE(82) or   Bus2IP_RdCE(83) or   Bus2IP_RdCE(84) or   Bus2IP_RdCE(85) or   Bus2IP_RdCE(86) or   Bus2IP_RdCE(87) or   Bus2IP_RdCE(88) or   Bus2IP_RdCE(89) or   Bus2IP_RdCE(90) or   Bus2IP_RdCE(91) or   Bus2IP_RdCE(92) or   Bus2IP_RdCE(93) or   Bus2IP_RdCE(94) or   Bus2IP_RdCE(95) or   Bus2IP_RdCE(96) or   Bus2IP_RdCE(97) or   Bus2IP_RdCE(98) or   Bus2IP_RdCE(99) or   Bus2IP_RdCE(100) or   Bus2IP_RdCE(101) or   Bus2IP_RdCE(102) or   Bus2IP_RdCE(103) or   Bus2IP_RdCE(104) or   Bus2IP_RdCE(105) or   Bus2IP_RdCE(106) or   Bus2IP_RdCE(107) or   Bus2IP_RdCE(108) or   Bus2IP_RdCE(109) or   Bus2IP_RdCE(110) or   Bus2IP_RdCE(111) or   Bus2IP_RdCE(112) or   Bus2IP_RdCE(113) or   Bus2IP_RdCE(114) or   Bus2IP_RdCE(115) or   Bus2IP_RdCE(116) or   Bus2IP_RdCE(117) or   Bus2IP_RdCE(118) or   Bus2IP_RdCE(119) or   Bus2IP_RdCE(120) or   Bus2IP_RdCE(121) or   Bus2IP_RdCE(122) or   Bus2IP_RdCE(123) or   Bus2IP_RdCE(124) or   Bus2IP_RdCE(125) or   Bus2IP_RdCE(126) or   Bus2IP_RdCE(127) or   Bus2IP_RdCE(128) or   Bus2IP_RdCE(129) or   Bus2IP_RdCE(130) or   Bus2IP_RdCE(131) or   Bus2IP_RdCE(132) or   Bus2IP_RdCE(133) or   Bus2IP_RdCE(134) or   Bus2IP_RdCE(135) or   Bus2IP_RdCE(136) or   Bus2IP_RdCE(137) or   Bus2IP_RdCE(138) or   Bus2IP_RdCE(139) or   Bus2IP_RdCE(140) or   Bus2IP_RdCE(141) or   Bus2IP_RdCE(142) or   Bus2IP_RdCE(143) or   Bus2IP_RdCE(144) or   Bus2IP_RdCE(145) or   Bus2IP_RdCE(146) or   Bus2IP_RdCE(147) or   Bus2IP_RdCE(148) or   Bus2IP_RdCE(149) or   Bus2IP_RdCE(150) or   Bus2IP_RdCE(151) or   Bus2IP_RdCE(152);

 -- implement slave model software accessible register(s)
 SLAVE_REG_WRITE_PROC : process( Bus2IP_Clk ) is
 begin

  if Bus2IP_Clk'event and Bus2IP_Clk = '1' then
    if Bus2IP_Resetn = '0' then
      pcie_msi_s <= '0';
      mgtrefclk_125m_en_s <= '1';
      mgtrefclk_156m_en_s <= '1';
      mgtrefclk_100m_en_s <= '0';
      ctrl_fclka_highz_s <= '0';
      ctrl_amctclka_to_fmc1clk2_en_s <= '0';
      ctrl_amctclka_to_fmc2clk2_en_s <= '0';
      ctrl_amctclkc_to_fmc1clk3_en_s <= '0';
      ctrl_amctclkc_to_fmc2clk3_en_s <= '0';
      v2_vadj1_sel_s <= "00";
      vadj1_en_s <= '0';
      fpga_reset_n_s <= '1';
      v2_vadj2_sel_s <= "00";
      vadj2_en_s <= '0';
      v8_led_green_en_s <= X"00";
      v8_led_red_en_s <= X"00";
      i2c_request_s <= '0';
      v2_i2c_bus_sel_s <= "00";
      v32_CustomReg0_s <= x"00000000";
      v32_CustomReg1_s <= x"00000000";
      v32_CustomReg2_s <= x"00000000";
      v32_CustomReg3_s <= x"00000000";
      v32_CustomReg4_s <= x"00000000";
      v32_CustomReg5_s <= x"00000000";
      v32_CustomReg6_s <= x"00000000";
      v32_CustomReg7_s <= x"00000000";
      v32_CustomReg8_s <= x"00000000";
      v32_CustomReg9_s <= x"00000000";
      v32_CustomReg10_s <= x"00000000";
      v32_CustomReg11_s <= x"00000000";
      v32_CustomReg12_s <= x"00000000";
      v32_CustomReg13_s <= x"00000000";
      v32_CustomReg14_s <= x"00000000";
      v32_CustomReg15_s <= x"00000000";
      v32_CustomReg16_s <= x"00000000";
      v32_CustomReg17_s <= x"00000000";
      v32_CustomReg18_s <= x"00000000";
      v32_CustomReg19_s <= x"00000000";
      v32_CustomReg20_s <= x"00000000";
      v32_CustomReg21_s <= x"00000000";
      v32_CustomReg22_s <= x"00000000";
      v32_CustomReg23_s <= x"00000000";
      v32_CustomReg24_s <= x"00000000";
      v32_CustomReg25_s <= x"00000000";
      v32_CustomReg26_s <= x"00000000";
      v32_CustomReg27_s <= x"00000000";
      v32_CustomReg28_s <= x"00000000";
      v32_CustomReg29_s <= x"00000000";
      v32_CustomReg30_s <= x"00000000";
      v32_CustomReg31_s <= x"00000000";
      v32_CustomReg32_s <= x"00000000";
      v32_CustomReg33_s <= x"00000000";
      v32_CustomReg34_s <= x"00000000";
      v32_CustomReg35_s <= x"00000000";
      v32_CustomReg36_s <= x"00000000";
      v32_CustomReg37_s <= x"00000000";
      v32_CustomReg38_s <= x"00000000";
      v32_CustomReg39_s <= x"00000000";
      v32_CustomReg40_s <= x"00000000";
      v32_CustomReg41_s <= x"00000000";
      v32_CustomReg42_s <= x"00000000";
      v32_CustomReg43_s <= x"00000000";
      v32_CustomReg44_s <= x"00000000";
      v32_CustomReg45_s <= x"00000000";
      v32_CustomReg46_s <= x"00000000";
      v32_CustomReg47_s <= x"00000000";
      v32_CustomReg48_s <= x"00000000";
      v32_CustomReg49_s <= x"00000000";
      v32_CustomReg50_s <= x"00000000";
      v32_CustomReg51_s <= x"00000000";
      v32_CustomReg52_s <= x"00000000";
      v32_CustomReg53_s <= x"00000000";
      v32_CustomReg54_s <= x"00000000";
      v32_CustomReg55_s <= x"00000000";
      v32_CustomReg56_s <= x"00000000";
      v32_CustomReg57_s <= x"00000000";
      v32_CustomReg58_s <= x"00000000";
      v32_CustomReg59_s <= x"00000000";
      v32_CustomReg60_s <= x"00000000";
      v32_CustomReg61_s <= x"00000000";
      v32_CustomReg62_s <= x"00000000";
      v32_CustomReg63_s <= x"00000000";
      v32_CustomReg64_s <= x"00000000";
      v32_CustomReg65_s <= x"00000000";
      v32_CustomReg66_s <= x"00000000";
      v32_CustomReg67_s <= x"00000000";
      v32_CustomReg68_s <= x"00000000";
      v32_CustomReg69_s <= x"00000000";
      v32_CustomReg70_s <= x"00000000";
      v32_CustomReg71_s <= x"00000000";
      v32_CustomReg72_s <= x"00000000";
      v32_CustomReg73_s <= x"00000000";
      v32_CustomReg74_s <= x"00000000";
      v32_CustomReg75_s <= x"00000000";
      v32_CustomReg76_s <= x"00000000";
      v32_CustomReg77_s <= x"00000000";
      v32_CustomReg78_s <= x"00000000";
      v32_CustomReg79_s <= x"00000000";
      v32_CustomReg80_s <= x"00000000";
      v32_CustomReg81_s <= x"00000000";
      v32_CustomReg82_s <= x"00000000";
      v32_CustomReg83_s <= x"00000000";
      v32_CustomReg84_s <= x"00000000";
      v32_CustomReg85_s <= x"00000000";
      v32_CustomReg86_s <= x"00000000";
      v32_CustomReg87_s <= x"00000000";
      v32_CustomReg88_s <= x"00000000";
      v32_CustomReg89_s <= x"00000000";
      v32_CustomReg90_s <= x"00000000";
      v32_CustomReg91_s <= x"00000000";
      v32_CustomReg92_s <= x"00000000";
      v32_CustomReg93_s <= x"00000000";
      v32_CustomReg94_s <= x"00000000";
      v32_CustomReg95_s <= x"00000000";
      v32_CustomReg96_s <= x"00000000";
      v32_CustomReg97_s <= x"00000000";
      v32_CustomReg98_s <= x"00000000";
      v32_CustomReg99_s <= x"00000000";
      v16_Aurora0_Idx_s <= x"0000";
      Aurora0_WrEn_s <= '0';
      v32_Aurora0_Data_s <= x"00000000";
      v16_Aurora1_Idx_s <= x"0000";
      Aurora1_WrEn_s <= '0';
      v32_Aurora1_Data_s <= x"00000000";
      v16_Aurora2_Idx_s <= x"0000";
      Aurora2_WrEn_s <= '0';
      v32_Aurora2_Data_s <= x"00000000";
      v16_Aurora3_Idx_s <= x"0000";
      Aurora3_WrEn_s <= '0';
      v32_Aurora3_Data_s <= x"00000000";
      v16_Aurora4_Idx_s <= x"0000";
      Aurora4_WrEn_s <= '0';
      v32_Aurora4_Data_s <= x"00000000";
      v16_Aurora5_Idx_s <= x"0000";
      Aurora5_WrEn_s <= '0';
      v32_Aurora5_Data_s <= x"00000000";
      v16_Aurora6_Idx_s <= x"0000";
      Aurora6_WrEn_s <= '0';
      v32_Aurora6_Data_s <= x"00000000";
      v16_Aurora7_Idx_s <= x"0000";
      Aurora7_WrEn_s <= '0';
      v32_Aurora7_Data_s <= x"00000000";
      v32_PPSSYNC_ClkTarget_s <= x"00000000";
      PPSSYNC_CoreReset_s <= '0';
      PPSSYNC_RstUponRead_s <= '0';
      PPSSYNC_RstAcc_s <= '0';
      PPSSYNC_CoreEnable_s <= '0';
      PPSSYNC_MovSumEn_s <= '0';
      PPSSYNC_MovSumRst_s <= '0';
      v32_PPSSYNC_ProgDelay_s <= x"00000000";
      v32_PPSSYNC_PpsFreq_s <= x"00000001";
      v32_lvds0_ctrl_s <= x"00000000";
      v32_lvds0_value_s <= x"00000000";
      v32_lvds0_oe_s <= x"00000000";
      v32_lvds1_ctrl_s <= x"00000000";
      v32_lvds1_value_s <= x"00000000";
      v32_lvds1_oe_s <= x"00000000";
      v32_lvds2_ctrl_s <= x"00000000";
      v32_lvds2_value_s <= x"00000000";
      v32_lvds2_oe_s <= x"00000000";
      v32_lvds3_ctrl_s <= x"00000000";
      v32_lvds3_value_s <= x"00000000";
      v32_lvds3_oe_s <= x"00000000";
      RTDExSyncCoreReset_s <= '0';
      v8_RtdexSyncAddr_s <= X"00";
      RTDExSyncConfigWrEn_s <= '0';
      v32_RtdexSyncWrReg_s <= X"00000000";
      Timestamp_CoreReset_s <= '1';
      Timestamp_SetTime_s <= '0';
      Timestamp_LatchTime_s <= '0';
      v32_Timestamp_MSW_s <= x"00000000";
      v32_Timestamp_LSW_s <= x"00000000";

    else

  Timestamp_CoreReset_s <= '0';
  Timestamp_SetTime_s <= '0';
  Timestamp_LatchTime_s <= '0';
      case slv_reg_write_sel is

        when OneHotVector(1,153) =>
          if (Bus2IP_BE(1) = '1') then
            pcie_msi_s <= Bus2IP_Data(10);
          end if;

        when OneHotVector(2,153) =>
          if (Bus2IP_BE(0) = '1') then
            mgtrefclk_125m_en_s <= Bus2IP_Data(0);
          end if;
          if (Bus2IP_BE(0) = '1') then
            mgtrefclk_156m_en_s <= Bus2IP_Data(1);
          end if;
          if (Bus2IP_BE(0) = '1') then
            mgtrefclk_100m_en_s <= Bus2IP_Data(2);
          end if;
          if (Bus2IP_BE(0) = '1') then
            ctrl_fclka_highz_s <= Bus2IP_Data(3);
          end if;
          if (Bus2IP_BE(0) = '1') then
            ctrl_amctclka_to_fmc1clk2_en_s <= Bus2IP_Data(4);
          end if;
          if (Bus2IP_BE(0) = '1') then
            ctrl_amctclka_to_fmc2clk2_en_s <= Bus2IP_Data(5);
          end if;
          if (Bus2IP_BE(0) = '1') then
            ctrl_amctclkc_to_fmc1clk3_en_s <= Bus2IP_Data(6);
          end if;
          if (Bus2IP_BE(0) = '1') then
            ctrl_amctclkc_to_fmc2clk3_en_s <= Bus2IP_Data(7);
          end if;

        when OneHotVector(3,153) =>
          if (Bus2IP_BE(0) = '1') then
            v2_vadj1_sel_s <= Bus2IP_Data(1 downto 0);
          end if;
          if (Bus2IP_BE(0) = '1') then
            vadj1_en_s <= Bus2IP_Data(2);
          end if;
          if (Bus2IP_BE(0) = '1') then
            fpga_reset_n_s <= Bus2IP_Data(3);
          end if;
          if (Bus2IP_BE(0) = '1') then
            v2_vadj2_sel_s <= Bus2IP_Data(5 downto 4);
          end if;
          if (Bus2IP_BE(0) = '1') then
            vadj2_en_s <= Bus2IP_Data(6);
          end if;

        when OneHotVector(4,153) =>
          if (Bus2IP_BE(1) = '1') then
            v8_led_green_en_s <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(0) = '1') then
            v8_led_red_en_s <= Bus2IP_Data(7 downto 0);
          end if;

        when OneHotVector(5,153) =>
          if (Bus2IP_BE(0) = '1') then
            i2c_request_s <= Bus2IP_Data(0);
          end if;
          if (Bus2IP_BE(0) = '1') then
            v2_i2c_bus_sel_s <= Bus2IP_Data(3 downto 2);
          end if;

        when OneHotVector(6,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg0_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg0_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg0_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg0_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(7,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg1_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg1_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg1_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg1_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(8,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg2_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg2_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg2_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg2_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(9,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg3_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg3_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg3_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg3_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(10,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg4_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg4_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg4_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg4_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(11,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg5_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg5_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg5_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg5_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(12,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg6_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg6_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg6_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg6_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(13,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg7_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg7_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg7_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg7_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(14,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg8_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg8_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg8_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg8_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(15,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg9_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg9_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg9_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg9_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(16,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg10_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg10_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg10_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg10_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(17,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg11_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg11_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg11_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg11_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(18,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg12_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg12_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg12_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg12_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(19,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg13_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg13_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg13_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg13_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(20,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg14_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg14_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg14_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg14_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(21,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg15_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg15_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg15_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg15_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(22,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg16_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg16_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg16_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg16_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(23,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg17_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg17_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg17_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg17_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(24,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg18_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg18_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg18_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg18_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(25,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg19_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg19_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg19_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg19_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(26,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg20_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg20_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg20_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg20_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(27,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg21_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg21_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg21_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg21_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(28,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg22_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg22_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg22_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg22_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(29,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg23_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg23_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg23_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg23_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(30,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg24_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg24_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg24_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg24_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(31,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg25_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg25_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg25_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg25_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(32,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg26_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg26_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg26_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg26_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(33,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg27_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg27_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg27_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg27_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(34,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg28_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg28_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg28_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg28_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(35,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg29_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg29_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg29_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg29_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(36,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg30_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg30_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg30_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg30_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(37,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg31_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg31_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg31_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg31_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(38,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg32_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg32_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg32_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg32_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(39,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg33_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg33_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg33_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg33_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(40,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg34_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg34_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg34_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg34_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(41,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg35_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg35_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg35_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg35_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(42,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg36_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg36_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg36_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg36_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(43,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg37_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg37_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg37_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg37_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(44,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg38_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg38_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg38_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg38_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(45,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg39_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg39_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg39_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg39_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(46,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg40_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg40_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg40_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg40_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(47,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg41_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg41_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg41_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg41_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(48,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg42_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg42_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg42_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg42_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(49,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg43_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg43_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg43_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg43_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(50,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg44_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg44_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg44_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg44_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(51,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg45_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg45_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg45_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg45_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(52,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg46_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg46_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg46_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg46_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(53,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg47_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg47_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg47_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg47_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(54,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg48_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg48_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg48_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg48_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(55,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg49_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg49_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg49_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg49_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(56,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg50_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg50_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg50_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg50_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(57,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg51_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg51_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg51_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg51_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(58,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg52_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg52_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg52_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg52_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(59,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg53_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg53_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg53_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg53_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(60,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg54_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg54_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg54_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg54_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(61,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg55_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg55_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg55_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg55_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(62,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg56_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg56_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg56_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg56_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(63,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg57_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg57_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg57_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg57_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(64,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg58_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg58_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg58_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg58_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(65,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg59_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg59_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg59_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg59_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(66,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg60_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg60_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg60_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg60_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(67,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg61_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg61_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg61_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg61_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(68,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg62_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg62_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg62_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg62_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(69,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg63_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg63_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg63_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg63_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(70,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg64_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg64_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg64_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg64_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(71,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg65_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg65_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg65_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg65_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(72,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg66_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg66_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg66_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg66_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(73,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg67_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg67_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg67_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg67_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(74,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg68_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg68_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg68_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg68_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(75,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg69_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg69_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg69_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg69_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(76,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg70_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg70_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg70_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg70_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(77,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg71_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg71_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg71_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg71_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(78,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg72_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg72_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg72_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg72_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(79,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg73_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg73_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg73_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg73_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(80,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg74_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg74_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg74_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg74_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(81,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg75_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg75_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg75_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg75_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(82,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg76_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg76_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg76_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg76_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(83,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg77_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg77_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg77_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg77_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(84,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg78_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg78_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg78_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg78_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(85,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg79_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg79_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg79_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg79_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(86,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg80_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg80_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg80_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg80_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(87,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg81_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg81_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg81_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg81_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(88,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg82_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg82_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg82_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg82_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(89,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg83_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg83_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg83_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg83_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(90,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg84_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg84_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg84_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg84_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(91,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg85_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg85_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg85_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg85_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(92,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg86_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg86_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg86_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg86_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(93,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg87_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg87_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg87_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg87_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(94,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg88_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg88_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg88_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg88_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(95,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg89_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg89_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg89_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg89_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(96,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg90_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg90_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg90_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg90_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(97,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg91_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg91_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg91_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg91_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(98,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg92_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg92_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg92_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg92_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(99,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg93_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg93_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg93_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg93_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(100,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg94_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg94_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg94_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg94_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(101,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg95_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg95_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg95_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg95_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(102,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg96_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg96_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg96_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg96_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(103,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg97_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg97_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg97_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg97_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(104,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg98_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg98_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg98_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg98_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(105,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_CustomReg99_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_CustomReg99_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_CustomReg99_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_CustomReg99_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(106,153) =>
          if (Bus2IP_BE(0) = '1') then
            v16_Aurora0_Idx_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v16_Aurora0_Idx_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            Aurora0_WrEn_s <= Bus2IP_Data(16);
          end if;

        when OneHotVector(107,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_Aurora0_Data_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_Aurora0_Data_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_Aurora0_Data_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_Aurora0_Data_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(108,153) =>
          if (Bus2IP_BE(0) = '1') then
            v16_Aurora1_Idx_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v16_Aurora1_Idx_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            Aurora1_WrEn_s <= Bus2IP_Data(16);
          end if;

        when OneHotVector(109,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_Aurora1_Data_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_Aurora1_Data_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_Aurora1_Data_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_Aurora1_Data_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(110,153) =>
          if (Bus2IP_BE(0) = '1') then
            v16_Aurora2_Idx_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v16_Aurora2_Idx_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            Aurora2_WrEn_s <= Bus2IP_Data(16);
          end if;

        when OneHotVector(111,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_Aurora2_Data_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_Aurora2_Data_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_Aurora2_Data_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_Aurora2_Data_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(112,153) =>
          if (Bus2IP_BE(0) = '1') then
            v16_Aurora3_Idx_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v16_Aurora3_Idx_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            Aurora3_WrEn_s <= Bus2IP_Data(16);
          end if;

        when OneHotVector(113,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_Aurora3_Data_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_Aurora3_Data_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_Aurora3_Data_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_Aurora3_Data_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(114,153) =>
          if (Bus2IP_BE(0) = '1') then
            v16_Aurora4_Idx_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v16_Aurora4_Idx_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            Aurora4_WrEn_s <= Bus2IP_Data(16);
          end if;

        when OneHotVector(115,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_Aurora4_Data_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_Aurora4_Data_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_Aurora4_Data_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_Aurora4_Data_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(116,153) =>
          if (Bus2IP_BE(0) = '1') then
            v16_Aurora5_Idx_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v16_Aurora5_Idx_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            Aurora5_WrEn_s <= Bus2IP_Data(16);
          end if;

        when OneHotVector(117,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_Aurora5_Data_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_Aurora5_Data_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_Aurora5_Data_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_Aurora5_Data_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(118,153) =>
          if (Bus2IP_BE(0) = '1') then
            v16_Aurora6_Idx_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v16_Aurora6_Idx_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            Aurora6_WrEn_s <= Bus2IP_Data(16);
          end if;

        when OneHotVector(119,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_Aurora6_Data_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_Aurora6_Data_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_Aurora6_Data_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_Aurora6_Data_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(120,153) =>
          if (Bus2IP_BE(0) = '1') then
            v16_Aurora7_Idx_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v16_Aurora7_Idx_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            Aurora7_WrEn_s <= Bus2IP_Data(16);
          end if;

        when OneHotVector(121,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_Aurora7_Data_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_Aurora7_Data_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_Aurora7_Data_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_Aurora7_Data_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(123,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_PPSSYNC_ClkTarget_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_PPSSYNC_ClkTarget_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_PPSSYNC_ClkTarget_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_PPSSYNC_ClkTarget_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(124,153) =>
          if (Bus2IP_BE(0) = '1') then
            PPSSYNC_CoreReset_s <= Bus2IP_Data(0);
          end if;
          if (Bus2IP_BE(0) = '1') then
            PPSSYNC_RstUponRead_s <= Bus2IP_Data(1);
          end if;
          if (Bus2IP_BE(0) = '1') then
            PPSSYNC_RstAcc_s <= Bus2IP_Data(2);
          end if;
          if (Bus2IP_BE(0) = '1') then
            PPSSYNC_CoreEnable_s <= Bus2IP_Data(3);
          end if;
          if (Bus2IP_BE(0) = '1') then
            PPSSYNC_MovSumEn_s <= Bus2IP_Data(4);
          end if;
          if (Bus2IP_BE(0) = '1') then
            PPSSYNC_MovSumRst_s <= Bus2IP_Data(5);
          end if;

        when OneHotVector(127,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_PPSSYNC_ProgDelay_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_PPSSYNC_ProgDelay_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_PPSSYNC_ProgDelay_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_PPSSYNC_ProgDelay_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(128,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_PPSSYNC_PpsFreq_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_PPSSYNC_PpsFreq_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_PPSSYNC_PpsFreq_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_PPSSYNC_PpsFreq_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(130,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds0_ctrl_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds0_ctrl_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds0_ctrl_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds0_ctrl_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(131,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds0_value_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds0_value_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds0_value_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds0_value_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(132,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds0_oe_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds0_oe_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds0_oe_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds0_oe_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(134,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds1_ctrl_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds1_ctrl_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds1_ctrl_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds1_ctrl_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(135,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds1_value_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds1_value_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds1_value_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds1_value_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(136,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds1_oe_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds1_oe_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds1_oe_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds1_oe_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(138,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds2_ctrl_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds2_ctrl_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds2_ctrl_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds2_ctrl_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(139,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds2_value_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds2_value_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds2_value_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds2_value_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(140,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds2_oe_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds2_oe_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds2_oe_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds2_oe_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(142,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds3_ctrl_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds3_ctrl_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds3_ctrl_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds3_ctrl_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(143,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds3_value_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds3_value_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds3_value_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds3_value_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(144,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_lvds3_oe_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_lvds3_oe_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_lvds3_oe_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_lvds3_oe_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(146,153) =>
          if (Bus2IP_BE(0) = '1') then
            RTDExSyncCoreReset_s <= Bus2IP_Data(0);
          end if;
          if (Bus2IP_BE(0) = '1') then
            v8_RtdexSyncAddr_s(3 downto 0) <= Bus2IP_Data(7 downto 4);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v8_RtdexSyncAddr_s(7 downto 4) <= Bus2IP_Data(11 downto 8);
          end if;
          if (Bus2IP_BE(0) = '1') then
            RTDExSyncConfigWrEn_s <= Bus2IP_Data(2);
          end if;

        when OneHotVector(147,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_RtdexSyncWrReg_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_RtdexSyncWrReg_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_RtdexSyncWrReg_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_RtdexSyncWrReg_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(150,153) =>
          if (Bus2IP_BE(0) = '1') then
            Timestamp_CoreReset_s <= Bus2IP_Data(0);
          end if;
          if (Bus2IP_BE(0) = '1') then
            Timestamp_SetTime_s <= Bus2IP_Data(1);
          end if;
          if (Bus2IP_BE(0) = '1') then
            Timestamp_LatchTime_s <= Bus2IP_Data(2);
          end if;

        when OneHotVector(151,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_Timestamp_MSW_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_Timestamp_MSW_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_Timestamp_MSW_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_Timestamp_MSW_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;

        when OneHotVector(152,153) =>
          if (Bus2IP_BE(0) = '1') then
            v32_Timestamp_LSW_s(7 downto 0) <= Bus2IP_Data(7 downto 0);
          end if;
          if (Bus2IP_BE(1) = '1') then
            v32_Timestamp_LSW_s(15 downto 8) <= Bus2IP_Data(15 downto 8);
          end if;
          if (Bus2IP_BE(2) = '1') then
            v32_Timestamp_LSW_s(23 downto 16) <= Bus2IP_Data(23 downto 16);
          end if;
          if (Bus2IP_BE(3) = '1') then
            v32_Timestamp_LSW_s(31 downto 24) <= Bus2IP_Data(31 downto 24);
          end if;
        when others =>
          null;
      end case;
    end if;
  end if;

 end process SLAVE_REG_WRITE_PROC;

 -- implement slave model software accessible register(s) read mux
SLAVE_REG_READ_PROC : process( slv_reg_read_sel, i_daughter_absent_p, i_fmc1_absent_p, pcie_msi_s, i_fmc1_stack_absent_p, i_fmc1_clkdir_p, i_fmc2_absent_p, i_fmc2_stack_absent_p, i_fmc2_clkdir_p, i_ddr3_init_done_p, i_pcie_present_p, i_pcie_clock_lock_p, mgtrefclk_125m_en_s, mgtrefclk_156m_en_s, i_mgtpll_lol_p, mgtrefclk_100m_en_s, ctrl_fclka_highz_s, ctrl_amctclka_to_fmc1clk2_en_s, ctrl_amctclka_to_fmc2clk2_en_s, ctrl_amctclkc_to_fmc1clk3_en_s, ctrl_amctclkc_to_fmc2clk3_en_s, i_mgtpll_clk1_los_p, i_mgtpll_clk2_los_p, v2_vadj1_sel_s, vadj1_en_s, fpga_reset_n_s, v2_vadj2_sel_s, vadj2_en_s, v8_led_green_en_s, v8_led_red_en_s, i2c_request_s, i_i2c_granted_p, v2_i2c_bus_sel_s, iv32_CustomReg0_p, iv32_CustomReg1_p, iv32_CustomReg2_p, iv32_CustomReg3_p, iv32_CustomReg4_p, iv32_CustomReg5_p, iv32_CustomReg6_p, iv32_CustomReg7_p, iv32_CustomReg8_p, iv32_CustomReg9_p, iv32_CustomReg10_p, iv32_CustomReg11_p, iv32_CustomReg12_p, iv32_CustomReg13_p, iv32_CustomReg14_p, iv32_CustomReg15_p, iv32_CustomReg16_p, iv32_CustomReg17_p, iv32_CustomReg18_p, iv32_CustomReg19_p, iv32_CustomReg20_p, iv32_CustomReg21_p, iv32_CustomReg22_p, iv32_CustomReg23_p, iv32_CustomReg24_p, iv32_CustomReg25_p, iv32_CustomReg26_p, iv32_CustomReg27_p, iv32_CustomReg28_p, iv32_CustomReg29_p, iv32_CustomReg30_p, iv32_CustomReg31_p, iv32_CustomReg32_p, iv32_CustomReg33_p, iv32_CustomReg34_p, iv32_CustomReg35_p, iv32_CustomReg36_p, iv32_CustomReg37_p, iv32_CustomReg38_p, iv32_CustomReg39_p, iv32_CustomReg40_p, iv32_CustomReg41_p, iv32_CustomReg42_p, iv32_CustomReg43_p, iv32_CustomReg44_p, iv32_CustomReg45_p, iv32_CustomReg46_p, iv32_CustomReg47_p, iv32_CustomReg48_p, iv32_CustomReg49_p, iv32_CustomReg50_p, iv32_CustomReg51_p, iv32_CustomReg52_p, iv32_CustomReg53_p, iv32_CustomReg54_p, iv32_CustomReg55_p, iv32_CustomReg56_p, iv32_CustomReg57_p, iv32_CustomReg58_p, iv32_CustomReg59_p, iv32_CustomReg60_p, iv32_CustomReg61_p, iv32_CustomReg62_p, iv32_CustomReg63_p, iv32_CustomReg64_p, iv32_CustomReg65_p, iv32_CustomReg66_p, iv32_CustomReg67_p, iv32_CustomReg68_p, iv32_CustomReg69_p, iv32_CustomReg70_p, iv32_CustomReg71_p, iv32_CustomReg72_p, iv32_CustomReg73_p, iv32_CustomReg74_p, iv32_CustomReg75_p, iv32_CustomReg76_p, iv32_CustomReg77_p, iv32_CustomReg78_p, iv32_CustomReg79_p, iv32_CustomReg80_p, iv32_CustomReg81_p, iv32_CustomReg82_p, iv32_CustomReg83_p, iv32_CustomReg84_p, iv32_CustomReg85_p, iv32_CustomReg86_p, iv32_CustomReg87_p, iv32_CustomReg88_p, iv32_CustomReg89_p, iv32_CustomReg90_p, iv32_CustomReg91_p, iv32_CustomReg92_p, iv32_CustomReg93_p, iv32_CustomReg94_p, iv32_CustomReg95_p, iv32_CustomReg96_p, iv32_CustomReg97_p, iv32_CustomReg98_p, iv32_CustomReg99_p, v16_Aurora0_Idx_s, Aurora0_WrEn_s, iv32_Aurora0_Data_p, v16_Aurora1_Idx_s, Aurora1_WrEn_s, iv32_Aurora1_Data_p, v16_Aurora2_Idx_s, Aurora2_WrEn_s, iv32_Aurora2_Data_p, v16_Aurora3_Idx_s, Aurora3_WrEn_s, iv32_Aurora3_Data_p, v16_Aurora4_Idx_s, Aurora4_WrEn_s, iv32_Aurora4_Data_p, v16_Aurora5_Idx_s, Aurora5_WrEn_s, iv32_Aurora5_Data_p, v16_Aurora6_Idx_s, Aurora6_WrEn_s, iv32_Aurora6_Data_p, v16_Aurora7_Idx_s, Aurora7_WrEn_s, iv32_Aurora7_Data_p, iv32_PPSSYNC_CoreIdVers_p, v32_PPSSYNC_ClkTarget_s, PPSSYNC_CoreReset_s, PPSSYNC_RstUponRead_s, PPSSYNC_RstAcc_s, PPSSYNC_CoreEnable_s, PPSSYNC_MovSumEn_s, PPSSYNC_MovSumRst_s, iv32_PPSSYNC_PpsCnt_p, iv32_PPSSYNC_DiffAcc_p, v32_PPSSYNC_ProgDelay_s, v32_PPSSYNC_PpsFreq_s, iv32_lvds0_coreid_p, v32_lvds0_ctrl_s, iv32_lvds0_value_p, v32_lvds0_oe_s, iv32_lvds1_coreid_p, v32_lvds1_ctrl_s, iv32_lvds1_value_p, v32_lvds1_oe_s, iv32_lvds2_coreid_p, v32_lvds2_ctrl_s, iv32_lvds2_value_p, v32_lvds2_oe_s, iv32_lvds3_coreid_p, v32_lvds3_ctrl_s, iv32_lvds3_value_p, v32_lvds3_oe_s, iv32_RTDExSyncCoreId_p, RTDExSyncCoreReset_s, v8_RtdexSyncAddr_s, RTDExSyncConfigWrEn_s, v32_RtdexSyncWrReg_s, iv32_RtdexSyncRdReg_p, iv32_Timestamp_CoreIdVers_p, iv32_Timestamp_MSW_p, iv32_Timestamp_LSW_p) is
 begin
   o_PPSSYNC_DiffAccRead_p <= '0';
   case slv_reg_read_sel is

        when OneHotVector(0,153) =>
          slv_ip2bus_data(15 downto 0) <= X"0200";
          slv_ip2bus_data(31 downto 16) <= X"C611";

        when OneHotVector(1,153) =>
          slv_ip2bus_data(0) <= i_daughter_absent_p;
          slv_ip2bus_data(1) <= i_fmc1_absent_p;
          slv_ip2bus_data(10) <= pcie_msi_s;
          slv_ip2bus_data(2) <= i_fmc1_stack_absent_p;
          slv_ip2bus_data(3) <= i_fmc1_clkdir_p;
          slv_ip2bus_data(31 downto 11) <= "000000000000000000000";
          slv_ip2bus_data(4) <= i_fmc2_absent_p;
          slv_ip2bus_data(5) <= i_fmc2_stack_absent_p;
          slv_ip2bus_data(6) <= i_fmc2_clkdir_p;
          slv_ip2bus_data(7) <= i_ddr3_init_done_p;
          slv_ip2bus_data(8) <= i_pcie_present_p;
          slv_ip2bus_data(9) <= i_pcie_clock_lock_p;

        when OneHotVector(2,153) =>
          slv_ip2bus_data(0) <= mgtrefclk_125m_en_s;
          slv_ip2bus_data(1) <= mgtrefclk_156m_en_s;
          slv_ip2bus_data(10) <= i_mgtpll_lol_p;
          slv_ip2bus_data(2) <= mgtrefclk_100m_en_s;
          slv_ip2bus_data(3) <= ctrl_fclka_highz_s;
          slv_ip2bus_data(31 downto 11) <= "000000000000000000000";
          slv_ip2bus_data(4) <= ctrl_amctclka_to_fmc1clk2_en_s;
          slv_ip2bus_data(5) <= ctrl_amctclka_to_fmc2clk2_en_s;
          slv_ip2bus_data(6) <= ctrl_amctclkc_to_fmc1clk3_en_s;
          slv_ip2bus_data(7) <= ctrl_amctclkc_to_fmc2clk3_en_s;
          slv_ip2bus_data(8) <= i_mgtpll_clk1_los_p;
          slv_ip2bus_data(9) <= i_mgtpll_clk2_los_p;

        when OneHotVector(3,153) =>
          slv_ip2bus_data(1 downto 0) <= v2_vadj1_sel_s;
          slv_ip2bus_data(2) <= vadj1_en_s;
          slv_ip2bus_data(3) <= fpga_reset_n_s;
          slv_ip2bus_data(31 downto 7) <= "0000000000000000000000000";
          slv_ip2bus_data(5 downto 4) <= v2_vadj2_sel_s;
          slv_ip2bus_data(6) <= vadj2_en_s;

        when OneHotVector(4,153) =>
          slv_ip2bus_data(15 downto 8) <= v8_led_green_en_s;
          slv_ip2bus_data(31 downto 16) <= x"0000";
          slv_ip2bus_data(7 downto 0) <= v8_led_red_en_s;

        when OneHotVector(5,153) =>
          slv_ip2bus_data(0) <= i2c_request_s;
          slv_ip2bus_data(1) <= i_i2c_granted_p;
          slv_ip2bus_data(31 downto 4) <= X"0000000";
          slv_ip2bus_data(3 downto 2) <= v2_i2c_bus_sel_s;

        when OneHotVector(6,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg0_p;

        when OneHotVector(7,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg1_p;

        when OneHotVector(8,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg2_p;

        when OneHotVector(9,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg3_p;

        when OneHotVector(10,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg4_p;

        when OneHotVector(11,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg5_p;

        when OneHotVector(12,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg6_p;

        when OneHotVector(13,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg7_p;

        when OneHotVector(14,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg8_p;

        when OneHotVector(15,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg9_p;

        when OneHotVector(16,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg10_p;

        when OneHotVector(17,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg11_p;

        when OneHotVector(18,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg12_p;

        when OneHotVector(19,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg13_p;

        when OneHotVector(20,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg14_p;

        when OneHotVector(21,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg15_p;

        when OneHotVector(22,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg16_p;

        when OneHotVector(23,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg17_p;

        when OneHotVector(24,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg18_p;

        when OneHotVector(25,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg19_p;

        when OneHotVector(26,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg20_p;

        when OneHotVector(27,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg21_p;

        when OneHotVector(28,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg22_p;

        when OneHotVector(29,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg23_p;

        when OneHotVector(30,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg24_p;

        when OneHotVector(31,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg25_p;

        when OneHotVector(32,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg26_p;

        when OneHotVector(33,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg27_p;

        when OneHotVector(34,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg28_p;

        when OneHotVector(35,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg29_p;

        when OneHotVector(36,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg30_p;

        when OneHotVector(37,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg31_p;

        when OneHotVector(38,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg32_p;

        when OneHotVector(39,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg33_p;

        when OneHotVector(40,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg34_p;

        when OneHotVector(41,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg35_p;

        when OneHotVector(42,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg36_p;

        when OneHotVector(43,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg37_p;

        when OneHotVector(44,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg38_p;

        when OneHotVector(45,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg39_p;

        when OneHotVector(46,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg40_p;

        when OneHotVector(47,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg41_p;

        when OneHotVector(48,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg42_p;

        when OneHotVector(49,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg43_p;

        when OneHotVector(50,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg44_p;

        when OneHotVector(51,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg45_p;

        when OneHotVector(52,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg46_p;

        when OneHotVector(53,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg47_p;

        when OneHotVector(54,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg48_p;

        when OneHotVector(55,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg49_p;

        when OneHotVector(56,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg50_p;

        when OneHotVector(57,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg51_p;

        when OneHotVector(58,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg52_p;

        when OneHotVector(59,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg53_p;

        when OneHotVector(60,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg54_p;

        when OneHotVector(61,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg55_p;

        when OneHotVector(62,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg56_p;

        when OneHotVector(63,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg57_p;

        when OneHotVector(64,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg58_p;

        when OneHotVector(65,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg59_p;

        when OneHotVector(66,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg60_p;

        when OneHotVector(67,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg61_p;

        when OneHotVector(68,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg62_p;

        when OneHotVector(69,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg63_p;

        when OneHotVector(70,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg64_p;

        when OneHotVector(71,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg65_p;

        when OneHotVector(72,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg66_p;

        when OneHotVector(73,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg67_p;

        when OneHotVector(74,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg68_p;

        when OneHotVector(75,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg69_p;

        when OneHotVector(76,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg70_p;

        when OneHotVector(77,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg71_p;

        when OneHotVector(78,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg72_p;

        when OneHotVector(79,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg73_p;

        when OneHotVector(80,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg74_p;

        when OneHotVector(81,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg75_p;

        when OneHotVector(82,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg76_p;

        when OneHotVector(83,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg77_p;

        when OneHotVector(84,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg78_p;

        when OneHotVector(85,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg79_p;

        when OneHotVector(86,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg80_p;

        when OneHotVector(87,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg81_p;

        when OneHotVector(88,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg82_p;

        when OneHotVector(89,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg83_p;

        when OneHotVector(90,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg84_p;

        when OneHotVector(91,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg85_p;

        when OneHotVector(92,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg86_p;

        when OneHotVector(93,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg87_p;

        when OneHotVector(94,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg88_p;

        when OneHotVector(95,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg89_p;

        when OneHotVector(96,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg90_p;

        when OneHotVector(97,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg91_p;

        when OneHotVector(98,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg92_p;

        when OneHotVector(99,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg93_p;

        when OneHotVector(100,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg94_p;

        when OneHotVector(101,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg95_p;

        when OneHotVector(102,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg96_p;

        when OneHotVector(103,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg97_p;

        when OneHotVector(104,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg98_p;

        when OneHotVector(105,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_CustomReg99_p;

        when OneHotVector(106,153) =>
          slv_ip2bus_data(15 downto 0) <= v16_Aurora0_Idx_s;
          slv_ip2bus_data(16) <= Aurora0_WrEn_s;
          slv_ip2bus_data(31 downto 17) <= "000000000000000";

        when OneHotVector(107,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora0_Data_p;

        when OneHotVector(108,153) =>
          slv_ip2bus_data(15 downto 0) <= v16_Aurora1_Idx_s;
          slv_ip2bus_data(16) <= Aurora1_WrEn_s;
          slv_ip2bus_data(31 downto 17) <= "000000000000000";

        when OneHotVector(109,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora1_Data_p;

        when OneHotVector(110,153) =>
          slv_ip2bus_data(15 downto 0) <= v16_Aurora2_Idx_s;
          slv_ip2bus_data(16) <= Aurora2_WrEn_s;
          slv_ip2bus_data(31 downto 17) <= "000000000000000";

        when OneHotVector(111,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora2_Data_p;

        when OneHotVector(112,153) =>
          slv_ip2bus_data(15 downto 0) <= v16_Aurora3_Idx_s;
          slv_ip2bus_data(16) <= Aurora3_WrEn_s;
          slv_ip2bus_data(31 downto 17) <= "000000000000000";

        when OneHotVector(113,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora3_Data_p;

        when OneHotVector(114,153) =>
          slv_ip2bus_data(15 downto 0) <= v16_Aurora4_Idx_s;
          slv_ip2bus_data(16) <= Aurora4_WrEn_s;
          slv_ip2bus_data(31 downto 17) <= "000000000000000";

        when OneHotVector(115,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora4_Data_p;

        when OneHotVector(116,153) =>
          slv_ip2bus_data(15 downto 0) <= v16_Aurora5_Idx_s;
          slv_ip2bus_data(16) <= Aurora5_WrEn_s;
          slv_ip2bus_data(31 downto 17) <= "000000000000000";

        when OneHotVector(117,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora5_Data_p;

        when OneHotVector(118,153) =>
          slv_ip2bus_data(15 downto 0) <= v16_Aurora6_Idx_s;
          slv_ip2bus_data(16) <= Aurora6_WrEn_s;
          slv_ip2bus_data(31 downto 17) <= "000000000000000";

        when OneHotVector(119,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora6_Data_p;

        when OneHotVector(120,153) =>
          slv_ip2bus_data(15 downto 0) <= v16_Aurora7_Idx_s;
          slv_ip2bus_data(16) <= Aurora7_WrEn_s;
          slv_ip2bus_data(31 downto 17) <= "000000000000000";

        when OneHotVector(121,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Aurora7_Data_p;

        when OneHotVector(122,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_PPSSYNC_CoreIdVers_p;

        when OneHotVector(123,153) =>
          slv_ip2bus_data(31 downto 0) <= v32_PPSSYNC_ClkTarget_s;

        when OneHotVector(124,153) =>
          slv_ip2bus_data(0) <= PPSSYNC_CoreReset_s;
          slv_ip2bus_data(1) <= PPSSYNC_RstUponRead_s;
          slv_ip2bus_data(2) <= PPSSYNC_RstAcc_s;
          slv_ip2bus_data(3) <= PPSSYNC_CoreEnable_s;
          slv_ip2bus_data(31 downto 6) <= "00000000000000000000000000";
          slv_ip2bus_data(4) <= PPSSYNC_MovSumEn_s;
          slv_ip2bus_data(5) <= PPSSYNC_MovSumRst_s;

        when OneHotVector(125,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_PPSSYNC_PpsCnt_p;

        when OneHotVector(126,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_PPSSYNC_DiffAcc_p;
          o_PPSSYNC_DiffAccRead_p <= '1';

        when OneHotVector(127,153) =>
          slv_ip2bus_data(31 downto 0) <= v32_PPSSYNC_ProgDelay_s;

        when OneHotVector(128,153) =>
          slv_ip2bus_data(31 downto 0) <= v32_PPSSYNC_PpsFreq_s;

        when OneHotVector(129,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_lvds0_coreid_p;

        when OneHotVector(130,153) =>
          slv_ip2bus_data(31 downto 0) <= v32_lvds0_ctrl_s;

        when OneHotVector(131,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_lvds0_value_p;

        when OneHotVector(132,153) =>
          slv_ip2bus_data(31 downto 0) <= v32_lvds0_oe_s;

        when OneHotVector(133,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_lvds1_coreid_p;

        when OneHotVector(134,153) =>
          slv_ip2bus_data(31 downto 0) <= v32_lvds1_ctrl_s;

        when OneHotVector(135,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_lvds1_value_p;

        when OneHotVector(136,153) =>
          slv_ip2bus_data(31 downto 0) <= v32_lvds1_oe_s;

        when OneHotVector(137,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_lvds2_coreid_p;

        when OneHotVector(138,153) =>
          slv_ip2bus_data(31 downto 0) <= v32_lvds2_ctrl_s;

        when OneHotVector(139,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_lvds2_value_p;

        when OneHotVector(140,153) =>
          slv_ip2bus_data(31 downto 0) <= v32_lvds2_oe_s;

        when OneHotVector(141,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_lvds3_coreid_p;

        when OneHotVector(142,153) =>
          slv_ip2bus_data(31 downto 0) <= v32_lvds3_ctrl_s;

        when OneHotVector(143,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_lvds3_value_p;

        when OneHotVector(144,153) =>
          slv_ip2bus_data(31 downto 0) <= v32_lvds3_oe_s;

        when OneHotVector(145,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RTDExSyncCoreId_p;

        when OneHotVector(146,153) =>
          slv_ip2bus_data(0) <= RTDExSyncCoreReset_s;
          slv_ip2bus_data(1) <= '0';
          slv_ip2bus_data(11 downto 4) <= v8_RtdexSyncAddr_s;
          slv_ip2bus_data(2) <= RTDExSyncConfigWrEn_s;
          slv_ip2bus_data(3) <= '0';
          slv_ip2bus_data(31 downto 12) <= X"00000";

        when OneHotVector(147,153) =>
          slv_ip2bus_data(31 downto 0) <= v32_RtdexSyncWrReg_s;

        when OneHotVector(148,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_RtdexSyncRdReg_p;

        when OneHotVector(149,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Timestamp_CoreIdVers_p;

        when OneHotVector(150,153) =>
          slv_ip2bus_data(31 downto 3) <= "00000000000000000000000000000";

        when OneHotVector(151,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Timestamp_MSW_p;

        when OneHotVector(152,153) =>
          slv_ip2bus_data(31 downto 0) <= iv32_Timestamp_LSW_p;
        when others =>
          slv_ip2bus_data <= (others => '0');
      end case;

 end process SLAVE_REG_READ_PROC;

------------------------------------------
-- drive IP to Bus signals
------------------------------------------
IP2Bus_Data  <= slv_ip2bus_data when slv_read_ack = '1' else (others => '0');
IP2Bus_WrAck <= slv_write_ack;
IP2Bus_RdAck <= slv_read_ack;
IP2Bus_Error <= '0';

------------------------------------------
-- Output assignments
------------------------------------------
o_pcie_msi_p <= pcie_msi_s;
o_mgtrefclk_125m_en_p <= mgtrefclk_125m_en_s;
o_mgtrefclk_156m_en_p <= mgtrefclk_156m_en_s;
o_mgtrefclk_100m_en_p <= mgtrefclk_100m_en_s;
o_ctrl_fclka_highz_p <= ctrl_fclka_highz_s;
o_ctrl_amctclka_to_fmc1clk2_en_p <= ctrl_amctclka_to_fmc1clk2_en_s;
o_ctrl_amctclka_to_fmc2clk2_en_p <= ctrl_amctclka_to_fmc2clk2_en_s;
o_ctrl_amctclkc_to_fmc1clk3_en_p <= ctrl_amctclkc_to_fmc1clk3_en_s;
o_ctrl_amctclkc_to_fmc2clk3_en_p <= ctrl_amctclkc_to_fmc2clk3_en_s;
ov2_vadj1_sel_p <= v2_vadj1_sel_s;
o_vadj1_en_p <= vadj1_en_s;
o_fpga_reset_n_p <= fpga_reset_n_s;
ov2_vadj2_sel_p <= v2_vadj2_sel_s;
o_vadj2_en_p <= vadj2_en_s;
ov8_led_green_en_p <= v8_led_green_en_s;
ov8_led_red_en_p <= v8_led_red_en_s;
o_i2c_request_p <= i2c_request_s;
ov2_i2c_bus_sel_p <= v2_i2c_bus_sel_s;
ov32_CustomReg0_p <= v32_CustomReg0_s;
ov32_CustomReg1_p <= v32_CustomReg1_s;
ov32_CustomReg2_p <= v32_CustomReg2_s;
ov32_CustomReg3_p <= v32_CustomReg3_s;
ov32_CustomReg4_p <= v32_CustomReg4_s;
ov32_CustomReg5_p <= v32_CustomReg5_s;
ov32_CustomReg6_p <= v32_CustomReg6_s;
ov32_CustomReg7_p <= v32_CustomReg7_s;
ov32_CustomReg8_p <= v32_CustomReg8_s;
ov32_CustomReg9_p <= v32_CustomReg9_s;
ov32_CustomReg10_p <= v32_CustomReg10_s;
ov32_CustomReg11_p <= v32_CustomReg11_s;
ov32_CustomReg12_p <= v32_CustomReg12_s;
ov32_CustomReg13_p <= v32_CustomReg13_s;
ov32_CustomReg14_p <= v32_CustomReg14_s;
ov32_CustomReg15_p <= v32_CustomReg15_s;
ov32_CustomReg16_p <= v32_CustomReg16_s;
ov32_CustomReg17_p <= v32_CustomReg17_s;
ov32_CustomReg18_p <= v32_CustomReg18_s;
ov32_CustomReg19_p <= v32_CustomReg19_s;
ov32_CustomReg20_p <= v32_CustomReg20_s;
ov32_CustomReg21_p <= v32_CustomReg21_s;
ov32_CustomReg22_p <= v32_CustomReg22_s;
ov32_CustomReg23_p <= v32_CustomReg23_s;
ov32_CustomReg24_p <= v32_CustomReg24_s;
ov32_CustomReg25_p <= v32_CustomReg25_s;
ov32_CustomReg26_p <= v32_CustomReg26_s;
ov32_CustomReg27_p <= v32_CustomReg27_s;
ov32_CustomReg28_p <= v32_CustomReg28_s;
ov32_CustomReg29_p <= v32_CustomReg29_s;
ov32_CustomReg30_p <= v32_CustomReg30_s;
ov32_CustomReg31_p <= v32_CustomReg31_s;
ov32_CustomReg32_p <= v32_CustomReg32_s;
ov32_CustomReg33_p <= v32_CustomReg33_s;
ov32_CustomReg34_p <= v32_CustomReg34_s;
ov32_CustomReg35_p <= v32_CustomReg35_s;
ov32_CustomReg36_p <= v32_CustomReg36_s;
ov32_CustomReg37_p <= v32_CustomReg37_s;
ov32_CustomReg38_p <= v32_CustomReg38_s;
ov32_CustomReg39_p <= v32_CustomReg39_s;
ov32_CustomReg40_p <= v32_CustomReg40_s;
ov32_CustomReg41_p <= v32_CustomReg41_s;
ov32_CustomReg42_p <= v32_CustomReg42_s;
ov32_CustomReg43_p <= v32_CustomReg43_s;
ov32_CustomReg44_p <= v32_CustomReg44_s;
ov32_CustomReg45_p <= v32_CustomReg45_s;
ov32_CustomReg46_p <= v32_CustomReg46_s;
ov32_CustomReg47_p <= v32_CustomReg47_s;
ov32_CustomReg48_p <= v32_CustomReg48_s;
ov32_CustomReg49_p <= v32_CustomReg49_s;
ov32_CustomReg50_p <= v32_CustomReg50_s;
ov32_CustomReg51_p <= v32_CustomReg51_s;
ov32_CustomReg52_p <= v32_CustomReg52_s;
ov32_CustomReg53_p <= v32_CustomReg53_s;
ov32_CustomReg54_p <= v32_CustomReg54_s;
ov32_CustomReg55_p <= v32_CustomReg55_s;
ov32_CustomReg56_p <= v32_CustomReg56_s;
ov32_CustomReg57_p <= v32_CustomReg57_s;
ov32_CustomReg58_p <= v32_CustomReg58_s;
ov32_CustomReg59_p <= v32_CustomReg59_s;
ov32_CustomReg60_p <= v32_CustomReg60_s;
ov32_CustomReg61_p <= v32_CustomReg61_s;
ov32_CustomReg62_p <= v32_CustomReg62_s;
ov32_CustomReg63_p <= v32_CustomReg63_s;
ov32_CustomReg64_p <= v32_CustomReg64_s;
ov32_CustomReg65_p <= v32_CustomReg65_s;
ov32_CustomReg66_p <= v32_CustomReg66_s;
ov32_CustomReg67_p <= v32_CustomReg67_s;
ov32_CustomReg68_p <= v32_CustomReg68_s;
ov32_CustomReg69_p <= v32_CustomReg69_s;
ov32_CustomReg70_p <= v32_CustomReg70_s;
ov32_CustomReg71_p <= v32_CustomReg71_s;
ov32_CustomReg72_p <= v32_CustomReg72_s;
ov32_CustomReg73_p <= v32_CustomReg73_s;
ov32_CustomReg74_p <= v32_CustomReg74_s;
ov32_CustomReg75_p <= v32_CustomReg75_s;
ov32_CustomReg76_p <= v32_CustomReg76_s;
ov32_CustomReg77_p <= v32_CustomReg77_s;
ov32_CustomReg78_p <= v32_CustomReg78_s;
ov32_CustomReg79_p <= v32_CustomReg79_s;
ov32_CustomReg80_p <= v32_CustomReg80_s;
ov32_CustomReg81_p <= v32_CustomReg81_s;
ov32_CustomReg82_p <= v32_CustomReg82_s;
ov32_CustomReg83_p <= v32_CustomReg83_s;
ov32_CustomReg84_p <= v32_CustomReg84_s;
ov32_CustomReg85_p <= v32_CustomReg85_s;
ov32_CustomReg86_p <= v32_CustomReg86_s;
ov32_CustomReg87_p <= v32_CustomReg87_s;
ov32_CustomReg88_p <= v32_CustomReg88_s;
ov32_CustomReg89_p <= v32_CustomReg89_s;
ov32_CustomReg90_p <= v32_CustomReg90_s;
ov32_CustomReg91_p <= v32_CustomReg91_s;
ov32_CustomReg92_p <= v32_CustomReg92_s;
ov32_CustomReg93_p <= v32_CustomReg93_s;
ov32_CustomReg94_p <= v32_CustomReg94_s;
ov32_CustomReg95_p <= v32_CustomReg95_s;
ov32_CustomReg96_p <= v32_CustomReg96_s;
ov32_CustomReg97_p <= v32_CustomReg97_s;
ov32_CustomReg98_p <= v32_CustomReg98_s;
ov32_CustomReg99_p <= v32_CustomReg99_s;
ov16_Aurora0_Idx_p <= v16_Aurora0_Idx_s;
o_Aurora0_WrEn_p <= Aurora0_WrEn_s;
ov32_Aurora0_Data_p <= v32_Aurora0_Data_s;
ov16_Aurora1_Idx_p <= v16_Aurora1_Idx_s;
o_Aurora1_WrEn_p <= Aurora1_WrEn_s;
ov32_Aurora1_Data_p <= v32_Aurora1_Data_s;
ov16_Aurora2_Idx_p <= v16_Aurora2_Idx_s;
o_Aurora2_WrEn_p <= Aurora2_WrEn_s;
ov32_Aurora2_Data_p <= v32_Aurora2_Data_s;
ov16_Aurora3_Idx_p <= v16_Aurora3_Idx_s;
o_Aurora3_WrEn_p <= Aurora3_WrEn_s;
ov32_Aurora3_Data_p <= v32_Aurora3_Data_s;
ov16_Aurora4_Idx_p <= v16_Aurora4_Idx_s;
o_Aurora4_WrEn_p <= Aurora4_WrEn_s;
ov32_Aurora4_Data_p <= v32_Aurora4_Data_s;
ov16_Aurora5_Idx_p <= v16_Aurora5_Idx_s;
o_Aurora5_WrEn_p <= Aurora5_WrEn_s;
ov32_Aurora5_Data_p <= v32_Aurora5_Data_s;
ov16_Aurora6_Idx_p <= v16_Aurora6_Idx_s;
o_Aurora6_WrEn_p <= Aurora6_WrEn_s;
ov32_Aurora6_Data_p <= v32_Aurora6_Data_s;
ov16_Aurora7_Idx_p <= v16_Aurora7_Idx_s;
o_Aurora7_WrEn_p <= Aurora7_WrEn_s;
ov32_Aurora7_Data_p <= v32_Aurora7_Data_s;
ov32_PPSSYNC_ClkTarget_p <= v32_PPSSYNC_ClkTarget_s;
o_PPSSYNC_CoreReset_p <= PPSSYNC_CoreReset_s;
o_PPSSYNC_RstUponRead_p <= PPSSYNC_RstUponRead_s;
o_PPSSYNC_RstAcc_p <= PPSSYNC_RstAcc_s;
o_PPSSYNC_CoreEnable_p <= PPSSYNC_CoreEnable_s;
o_PPSSYNC_MovSumEn_p <= PPSSYNC_MovSumEn_s;
o_PPSSYNC_MovSumRst_p <= PPSSYNC_MovSumRst_s;
ov32_PPSSYNC_ProgDelay_p <= v32_PPSSYNC_ProgDelay_s;
ov32_PPSSYNC_PpsFreq_p <= v32_PPSSYNC_PpsFreq_s;
ov32_lvds0_ctrl_p <= v32_lvds0_ctrl_s;
ov32_lvds0_value_p <= v32_lvds0_value_s;
ov32_lvds0_oe_p <= v32_lvds0_oe_s;
ov32_lvds1_ctrl_p <= v32_lvds1_ctrl_s;
ov32_lvds1_value_p <= v32_lvds1_value_s;
ov32_lvds1_oe_p <= v32_lvds1_oe_s;
ov32_lvds2_ctrl_p <= v32_lvds2_ctrl_s;
ov32_lvds2_value_p <= v32_lvds2_value_s;
ov32_lvds2_oe_p <= v32_lvds2_oe_s;
ov32_lvds3_ctrl_p <= v32_lvds3_ctrl_s;
ov32_lvds3_value_p <= v32_lvds3_value_s;
ov32_lvds3_oe_p <= v32_lvds3_oe_s;
o_RTDExSyncCoreReset_p <= RTDExSyncCoreReset_s;
ov8_RtdexSyncAddr_p <= v8_RtdexSyncAddr_s;
o_RTDExSyncConfigWrEn_p <= RTDExSyncConfigWrEn_s;
ov32_RtdexSyncWrReg_p <= v32_RtdexSyncWrReg_s;
o_Timestamp_CoreReset_p <= Timestamp_CoreReset_s;
o_Timestamp_SetTime_p <= Timestamp_SetTime_s;
o_Timestamp_LatchTime_p <= Timestamp_LatchTime_s;
ov32_Timestamp_MSW_p <= v32_Timestamp_MSW_s;
ov32_Timestamp_LSW_p <= v32_Timestamp_LSW_s;

end IMP;

