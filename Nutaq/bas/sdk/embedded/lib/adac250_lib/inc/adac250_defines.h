/****************************************************************************   
 * 
 *    ****                              I                                     
 *   ******                            ***                                    
 *   *******                           ****                                   
 *   ********    ****  ****     **** *********    ******* ****    *********** 
 *   *********   ****  ****     **** *********  **************  ************* 
 *   **** *****  ****  ****     ****   ****    *****    ****** *****     **** 
 *   ****  ***** ****  ****     ****   ****   *****      ****  ****      **** 
 *  ****    *********  ****     ****   ****   ****       ****  ****      **** 
 *  ****     ********  ****    ****I  ****    *****     *****  ****      **** 
 *  ****      ******   ***** ******   *****    ****** *******  ****** ******* 
 *  ****        ****   ************    ******   *************   ************* 
 *  ****         ***     ****  ****     ****      *****  ****     *****  **** 
 *                                                                       **** 
 *          I N N O V A T I O N  T O D A Y  F O R  T O M M O R O W       **** 
 *                                                                        ***       
 * 
 ************************************************************************//**  
 * 
 *  @file       : adac250_defines.h
 *  @brief      : ADAC250 module related data and structure definitions.
 * 
 * Copyright (C) 2014, Nutaq, Canada. All rights reserved.
 *
 * @ingroup ADAC250
 *
 * This file is part of Nutaq's BAS Software Suite.
 *
 * You may at your option receive a license to Nutaq's BAS Software Suite under
 * either the terms of the GNU General Public License (GPL) or the
 * Nutaq Professional License, as explained in the note below.
 *
 * Nutaq's BAS Software Suite may be used under the terms of the GNU General
 * Public License version 3 as published by the Free Software Foundation
 * and appearing in the file LICENSE.GPL included in the packaging of this file.
 *
 * Nutaq's BAS Software Suite is provided AS IS WITHOUT WARRANTY OF
 * ANY KIND; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * NOTE:
 *
 * Using Nutaq's BAS Software Suite under the GPL requires that your work based on
 * Nutaq's BAS Software Suite, if  distributed, must be licensed under the GPL.
 * If you wish to distribute a work based on Nutaq's BAS Software Suite but desire
 * to license it under your own terms, e.g. a closed source license, you may purchase
 * a Nutaq Professional License.
 *
 * The Professional License, gives you -- under certain conditions -- the right to
 * use any license you wish for your work based on Nutaq's BAS Software Suite.
 * For the full terms of the Professional License, please contact the Nutaq sales team.
 *
 ****************************************************************************/

#ifndef __ADAC250_DEFINES__
#define __ADAC250_DEFINES__
#include "bas_error.h"



 /** @anchor ADAC250 defines
 *  @name Core ID defines
 *    
 *  ADAC250 core ID
 */
#define ADAC250_COREID    0xa250 	///< ADAC250 core ID
#define ADAC250_COREVER   0x0200	///< ADAC250 core version 

/** @defgroup ADAC250 ADAC250 Module
 *  
 *  Dual 250 MSPS A/D (14 bits) and dual 1 GSPS D/A (16 bits) FMC module.
 *               
 *  @file
 *     
 */

 
//PLL
#define ADAC250_CLK_REF_FREQ_10MHz  10000000        /**< Frequency of onboard reference clock */

#define ADAC250_PFD_MAX_FREQ ((unsigned)2e6)        /**< Maximum PFD frequency for best performance */
#define ADAC250_PFD_MIN_FREQ ((unsigned)10e3)       /**< Minimum PFD frequency for best performance */

#define ADAC250_GENERATED_FREQ_MIN ((unsigned)25e6) /**< Minimum frequency generated by PLL */

#define ADAC250_MAX_ADC_PLL_CLK_FREQ 250000000      /**< ADC maximum operating frequency */
#define ADAC250_MAX_DAC_PLL_CLK_FREQ 1000000000     /**< DAC maximum operating frequency */
#define ADAC250_MIN_ADC_PLL_CLK_FREQ 50000000       /**< ADC maximum operating frequency */
#define ADAC250_MIN_DAC_PLL_CLK_FREQ 1000000        /**< DAC maximum operating frequency */


#define ADAC250_MAXVCOFREQ 1300000000               /**< Maximum Voltage Controlled Oscillator operating frequency */
#define ADAC250_MINVCOFREQ 800000000                /**< Minimum Voltage Controlled Oscillator operating frequency */

/**
*****************************************************************************
*
* ADAC250 error code
*
****************************************************************************/
enum adac250_error {
    ADAC250_OK    = MAKE_RESULT(LYR_SEVERITY_SUCCESS, MODULE_ADAC250, 0),                /**< Success */
    ADAC250_NO_VALID_DIVIDER = MAKE_RESULT(LYR_SEVERITY_ERROR, MODULE_ADAC250, 1),       /**< Cannot calculate Fvco value */
    ADAC250_NO_VALID_R = MAKE_RESULT(LYR_SEVERITY_ERROR, MODULE_ADAC250, 2),             /**< No valid R divider value */
    ADAC250_REF_CLOCK_TO_HIGH = MAKE_RESULT(LYR_SEVERITY_ERROR, MODULE_ADAC250, 3),      /**< Reference clock frequency is too high */
    ADAC250_PFDFREQ_OUT_OF_RANGE = MAKE_RESULT(LYR_SEVERITY_ERROR, MODULE_ADAC250, 4),   /**< Phase frequency detector out of range */
    ADAC250_NO_VALID_PLL_SOLUTION = MAKE_RESULT(LYR_SEVERITY_ERROR, MODULE_ADAC250, 5),  /**< No valid PLL parameter found given current constraints */
    ADAC250_VCO_OUT_OF_RANGE = MAKE_RESULT(LYR_SEVERITY_ERROR, MODULE_ADAC250, 6),       /**< VCO is out of valid range */
    ADAC250_PFDFREQ_OUT_OF_SPEC = MAKE_RESULT(LYR_SEVERITY_WARNING, MODULE_ADAC250, 7),  /**< Running PLL out of specified range; PFD is smaller than 100 kHz */
    ADAC250_MUXERROR = MAKE_RESULT(LYR_SEVERITY_ERROR, MODULE_ADAC250, 8),               /**< Invalid mux configuration */
    ADAC250_DACTIMEOUT = MAKE_RESULT(LYR_SEVERITY_ERROR, MODULE_ADAC250, 9),             /**< D/A converter not ready */
    ADAC250_FREQLOW = MAKE_RESULT(LYR_SEVERITY_ERROR, MODULE_ADAC250, 10),               /**< Generated frequency is too low */
    ADAC250_OVERFLOW = MAKE_RESULT(LYR_SEVERITY_ERROR, MODULE_ADAC250, 11),              /**< Overflow during calculation */
    ADAC250_PLLNOTLOCKED = MAKE_RESULT(LYR_SEVERITY_ERROR, MODULE_ADAC250, 12),          /**< PLL not locked*/
	ADAC250_INVALID_TRIGGER_DELAY = MAKE_RESULT(LYR_SEVERITY_ERROR, MODULE_ADAC250, 13), /**< Trigger delay value is invalid (Valid values are 1 to 32*/
	ADAC250_INVALID_POINTER = MAKE_RESULT(LYR_SEVERITY_ERROR, MODULE_ADAC250, 14),       /**< Invalid pointer */
	ADAC250_ARG_OUT_OF_RANGE = MAKE_RESULT(LYR_SEVERITY_ERROR, MODULE_ADAC250, 15),      /**< A function argument is out of its valid range */
};

#endif

