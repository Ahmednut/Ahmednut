# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_eapi', [dirname(__file__)])
        except ImportError:
            import _eapi
            return _eapi
        if fp is not None:
            try:
                _mod = imp.load_module('_eapi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _eapi = swig_import_helper()
    del swig_import_helper
else:
    import _eapi
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def cdata(*args):
  return _eapi.cdata(*args)
cdata = _eapi.cdata

def memmove(*args):
  return _eapi.memmove(*args)
memmove = _eapi.memmove
class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _eapi.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _eapi.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _eapi.intArray___setitem__(self, *args)
    def cast(self): return _eapi.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _eapi.intArray_frompointer
    if _newclass:frompointer = staticmethod(_eapi.intArray_frompointer)
intArray_swigregister = _eapi.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _eapi.intArray_frompointer(*args)
intArray_frompointer = _eapi.intArray_frompointer

NORMAL_MODE = _eapi.NORMAL_MODE
TURBO_MODE = _eapi.TURBO_MODE
class connection_buffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, connection_buffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, connection_buffer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _eapi.connection_buffer_length_set
    __swig_getmethods__["length"] = _eapi.connection_buffer_length_get
    if _newclass:length = _swig_property(_eapi.connection_buffer_length_get, _eapi.connection_buffer_length_set)
    __swig_setmethods__["buffer"] = _eapi.connection_buffer_buffer_set
    __swig_getmethods__["buffer"] = _eapi.connection_buffer_buffer_get
    if _newclass:buffer = _swig_property(_eapi.connection_buffer_buffer_get, _eapi.connection_buffer_buffer_set)
    def __init__(self): 
        this = _eapi.new_connection_buffer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_connection_buffer
    __del__ = lambda self : None;
connection_buffer_swigregister = _eapi.connection_buffer_swigregister
connection_buffer_swigregister(connection_buffer)

class connection_state(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, connection_state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, connection_state, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stream"] = _eapi.connection_state_stream_set
    __swig_getmethods__["stream"] = _eapi.connection_state_stream_get
    if _newclass:stream = _swig_property(_eapi.connection_state_stream_get, _eapi.connection_state_stream_set)
    __swig_setmethods__["has_ended"] = _eapi.connection_state_has_ended_set
    __swig_getmethods__["has_ended"] = _eapi.connection_state_has_ended_get
    if _newclass:has_ended = _swig_property(_eapi.connection_state_has_ended_get, _eapi.connection_state_has_ended_set)
    __swig_setmethods__["mode"] = _eapi.connection_state_mode_set
    __swig_getmethods__["mode"] = _eapi.connection_state_mode_get
    if _newclass:mode = _swig_property(_eapi.connection_state_mode_get, _eapi.connection_state_mode_set)
    __swig_setmethods__["send_buffer"] = _eapi.connection_state_send_buffer_set
    __swig_getmethods__["send_buffer"] = _eapi.connection_state_send_buffer_get
    if _newclass:send_buffer = _swig_property(_eapi.connection_state_send_buffer_get, _eapi.connection_state_send_buffer_set)
    def __init__(self): 
        this = _eapi.new_connection_state()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_connection_state
    __del__ = lambda self : None;
connection_state_swigregister = _eapi.connection_state_swigregister
connection_state_swigregister(connection_state)


def connection_write(*args):
  return _eapi.connection_write(*args)
connection_write = _eapi.connection_write

def connection_flush(*args):
  return _eapi.connection_flush(*args)
connection_flush = _eapi.connection_flush
EAPI_VERSION = _eapi.EAPI_VERSION
MIN_VERSION = _eapi.MIN_VERSION
MAX_VERSION = _eapi.MAX_VERSION
MIN_VERSION_UPDATE_COMPATIBLE = _eapi.MIN_VERSION_UPDATE_COMPATIBLE

def connect_cce(*args):
  return _eapi.connect_cce(*args)
connect_cce = _eapi.connect_cce

def disconnect_cce(*args):
  return _eapi.disconnect_cce(*args)
disconnect_cce = _eapi.disconnect_cce

def echo_send(*args):
  return _eapi.echo_send(*args)
echo_send = _eapi.echo_send

def get_cce_version(*args):
  return _eapi.get_cce_version(*args)
get_cce_version = _eapi.get_cce_version

def get_eapi_version():
  return _eapi.get_eapi_version()
get_eapi_version = _eapi.get_eapi_version

def fpgaflash_send(*args):
  return _eapi.fpgaflash_send(*args)
fpgaflash_send = _eapi.fpgaflash_send

def updateflash_send(*args):
  return _eapi.updateflash_send(*args)
updateflash_send = _eapi.updateflash_send

def updateflash_fromfile_send(*args):
  return _eapi.updateflash_fromfile_send(*args)
updateflash_fromfile_send = _eapi.updateflash_fromfile_send

def dtbflash_send(*args):
  return _eapi.dtbflash_send(*args)
dtbflash_send = _eapi.dtbflash_send

def dtbflash_fromfile_send(*args):
  return _eapi.dtbflash_fromfile_send(*args)
dtbflash_fromfile_send = _eapi.dtbflash_fromfile_send

def fpgaflash_send_with_ID(*args):
  return _eapi.fpgaflash_send_with_ID(*args)
fpgaflash_send_with_ID = _eapi.fpgaflash_send_with_ID

def fpgaflash_fromfile_send(*args):
  return _eapi.fpgaflash_fromfile_send(*args)
fpgaflash_fromfile_send = _eapi.fpgaflash_fromfile_send

def fpgaflash_fromfile_send_with_ID(*args):
  return _eapi.fpgaflash_fromfile_send_with_ID(*args)
fpgaflash_fromfile_send_with_ID = _eapi.fpgaflash_fromfile_send_with_ID

def fpgaflash_fromfile_with_comment_send(*args):
  return _eapi.fpgaflash_fromfile_with_comment_send(*args)
fpgaflash_fromfile_with_comment_send = _eapi.fpgaflash_fromfile_with_comment_send

def fpgaflash_get_info_send(*args):
  return _eapi.fpgaflash_get_info_send(*args)
fpgaflash_get_info_send = _eapi.fpgaflash_get_info_send

def fpgaflash_get_index_send(*args):
  return _eapi.fpgaflash_get_index_send(*args)
fpgaflash_get_index_send = _eapi.fpgaflash_get_index_send

def fpgaflash_set_index_send(*args):
  return _eapi.fpgaflash_set_index_send(*args)
fpgaflash_set_index_send = _eapi.fpgaflash_set_index_send

def memory_read_send(*args):
  return _eapi.memory_read_send(*args)
memory_read_send = _eapi.memory_read_send

def custom_register_read_send(*args):
  return _eapi.custom_register_read_send(*args)
custom_register_read_send = _eapi.custom_register_read_send

def memory_write_send(*args):
  return _eapi.memory_write_send(*args)
memory_write_send = _eapi.memory_write_send

def memory_write_with_mask_send(*args):
  return _eapi.memory_write_with_mask_send(*args)
memory_write_with_mask_send = _eapi.memory_write_with_mask_send

def custom_register_write_send(*args):
  return _eapi.custom_register_write_send(*args)
custom_register_write_send = _eapi.custom_register_write_send

def set_turbo_mode(*args):
  return _eapi.set_turbo_mode(*args)
set_turbo_mode = _eapi.set_turbo_mode

def set_normal_mode(*args):
  return _eapi.set_normal_mode(*args)
set_normal_mode = _eapi.set_normal_mode

def get_mac_address(*args):
  return _eapi.get_mac_address(*args)
get_mac_address = _eapi.get_mac_address

def get_ip_address():
  return _eapi.get_ip_address()
get_ip_address = _eapi.get_ip_address

def i2c_scan_devices_send(*args):
  return _eapi.i2c_scan_devices_send(*args)
i2c_scan_devices_send = _eapi.i2c_scan_devices_send
EAPIOK = _eapi.EAPIOK
EAPICONNECT = _eapi.EAPICONNECT
EAPISOCKET = _eapi.EAPISOCKET
EAPIFILE = _eapi.EAPIFILE
EAPIMMAP = _eapi.EAPIMMAP
EAPIDISCONNECT = _eapi.EAPIDISCONNECT
EAPIOUTOFSYNC = _eapi.EAPIOUTOFSYNC
EAPIWSA = _eapi.EAPIWSA
EAPINOMEM = _eapi.EAPINOMEM
EAPIFILETOOLARGE = _eapi.EAPIFILETOOLARGE
EAPICCEVERSIONMISMATCH = _eapi.EAPICCEVERSIONMISMATCH
EAPICCELIMITEDACCESS = _eapi.EAPICCELIMITEDACCESS
EAPICARRIERLIMITEDACCESS = _eapi.EAPICARRIERLIMITEDACCESS

def uint64_send(*args):
  return _eapi.uint64_send(*args)
uint64_send = _eapi.uint64_send

def uint64_recv(*args):
  return _eapi.uint64_recv(*args)
uint64_recv = _eapi.uint64_recv

def uint_send(*args):
  return _eapi.uint_send(*args)
uint_send = _eapi.uint_send

def uint_recv(*args):
  return _eapi.uint_recv(*args)
uint_recv = _eapi.uint_recv

def uint32_send(*args):
  return _eapi.uint32_send(*args)
uint32_send = _eapi.uint32_send

def uint32_recv(*args):
  return _eapi.uint32_recv(*args)
uint32_recv = _eapi.uint32_recv

def int_send(*args):
  return _eapi.int_send(*args)
int_send = _eapi.int_send

def int_recv(*args):
  return _eapi.int_recv(*args)
int_recv = _eapi.int_recv

def int32_send(*args):
  return _eapi.int32_send(*args)
int32_send = _eapi.int32_send

def int32_recv(*args):
  return _eapi.int32_recv(*args)
int32_recv = _eapi.int32_recv

def ushort_send(*args):
  return _eapi.ushort_send(*args)
ushort_send = _eapi.ushort_send

def ushort_recv(*args):
  return _eapi.ushort_recv(*args)
ushort_recv = _eapi.ushort_recv

def uint16_send(*args):
  return _eapi.uint16_send(*args)
uint16_send = _eapi.uint16_send

def uint16_recv(*args):
  return _eapi.uint16_recv(*args)
uint16_recv = _eapi.uint16_recv

def short_send(*args):
  return _eapi.short_send(*args)
short_send = _eapi.short_send

def short_recv(*args):
  return _eapi.short_recv(*args)
short_recv = _eapi.short_recv

def int16_send(*args):
  return _eapi.int16_send(*args)
int16_send = _eapi.int16_send

def int16_recv(*args):
  return _eapi.int16_recv(*args)
int16_recv = _eapi.int16_recv

def uchar_send(*args):
  return _eapi.uchar_send(*args)
uchar_send = _eapi.uchar_send

def uchar_recv(*args):
  return _eapi.uchar_recv(*args)
uchar_recv = _eapi.uchar_recv

def uint8_send(*args):
  return _eapi.uint8_send(*args)
uint8_send = _eapi.uint8_send

def uint8_recv(*args):
  return _eapi.uint8_recv(*args)
uint8_recv = _eapi.uint8_recv

def char_send(*args):
  return _eapi.char_send(*args)
char_send = _eapi.char_send

def char_recv(*args):
  return _eapi.char_recv(*args)
char_recv = _eapi.char_recv

def int8_send(*args):
  return _eapi.int8_send(*args)
int8_send = _eapi.int8_send

def int8_recv(*args):
  return _eapi.int8_recv(*args)
int8_recv = _eapi.int8_recv

def cmd_send(*args):
  return _eapi.cmd_send(*args)
cmd_send = _eapi.cmd_send

def result_recv(*args):
  return _eapi.result_recv(*args)
result_recv = _eapi.result_recv

def buf_recv_alloc(*args):
  return _eapi.buf_recv_alloc(*args)
buf_recv_alloc = _eapi.buf_recv_alloc

def buf_free(*args):
  return _eapi.buf_free(*args)
buf_free = _eapi.buf_free

def buf_recv(*args):
  return _eapi.buf_recv(*args)
buf_recv = _eapi.buf_recv

def buf_recv_with_size(*args):
  return _eapi.buf_recv_with_size(*args)
buf_recv_with_size = _eapi.buf_recv_with_size

def buf_send(*args):
  return _eapi.buf_send(*args)
buf_send = _eapi.buf_send

def float_send(*args):
  return _eapi.float_send(*args)
float_send = _eapi.float_send

def float_recv(*args):
  return _eapi.float_recv(*args)
float_recv = _eapi.float_recv

def ADAC250_Presence_send(*args):
  return _eapi.ADAC250_Presence_send(*args)
ADAC250_Presence_send = _eapi.ADAC250_Presence_send

def ADAC250_PowerUp_send(*args):
  return _eapi.ADAC250_PowerUp_send(*args)
ADAC250_PowerUp_send = _eapi.ADAC250_PowerUp_send

def ADAC250_ReadSPIRegisters_send(*args):
  return _eapi.ADAC250_ReadSPIRegisters_send(*args)
ADAC250_ReadSPIRegisters_send = _eapi.ADAC250_ReadSPIRegisters_send

def ADAC250_WriteSPIRegisters_send(*args):
  return _eapi.ADAC250_WriteSPIRegisters_send(*args)
ADAC250_WriteSPIRegisters_send = _eapi.ADAC250_WriteSPIRegisters_send

def ADAC250_DAC_SetGain_send(*args):
  return _eapi.ADAC250_DAC_SetGain_send(*args)
ADAC250_DAC_SetGain_send = _eapi.ADAC250_DAC_SetGain_send

def ADAC250_DAC_SetOffset_send(*args):
  return _eapi.ADAC250_DAC_SetOffset_send(*args)
ADAC250_DAC_SetOffset_send = _eapi.ADAC250_DAC_SetOffset_send

def ADAC250_DAC_Init_send(*args):
  return _eapi.ADAC250_DAC_Init_send(*args)
ADAC250_DAC_Init_send = _eapi.ADAC250_DAC_Init_send

def ADAC250_DAC_Sync_send(*args):
  return _eapi.ADAC250_DAC_Sync_send(*args)
ADAC250_DAC_Sync_send = _eapi.ADAC250_DAC_Sync_send

def ADAC250_DAC_SyncSource_send(*args):
  return _eapi.ADAC250_DAC_SyncSource_send(*args)
ADAC250_DAC_SyncSource_send = _eapi.ADAC250_DAC_SyncSource_send

def ADAC250_DAC_Calibrate_send(*args):
  return _eapi.ADAC250_DAC_Calibrate_send(*args)
ADAC250_DAC_Calibrate_send = _eapi.ADAC250_DAC_Calibrate_send

def ADAC250_PLL_Init_send(*args):
  return _eapi.ADAC250_PLL_Init_send(*args)
ADAC250_PLL_Init_send = _eapi.ADAC250_PLL_Init_send

def ADAC250_PLL_getStatus_send(*args):
  return _eapi.ADAC250_PLL_getStatus_send(*args)
ADAC250_PLL_getStatus_send = _eapi.ADAC250_PLL_getStatus_send

def ADAC250_PLL_SetSleep_send(*args):
  return _eapi.ADAC250_PLL_SetSleep_send(*args)
ADAC250_PLL_SetSleep_send = _eapi.ADAC250_PLL_SetSleep_send

def ADAC250_PLL_setRefClkTuning_send(*args):
  return _eapi.ADAC250_PLL_setRefClkTuning_send(*args)
ADAC250_PLL_setRefClkTuning_send = _eapi.ADAC250_PLL_setRefClkTuning_send

def ADAC250_PLL_SetConfig_send(*args):
  return _eapi.ADAC250_PLL_SetConfig_send(*args)
ADAC250_PLL_SetConfig_send = _eapi.ADAC250_PLL_SetConfig_send

def ADAC250_ADC_init_send(*args):
  return _eapi.ADAC250_ADC_init_send(*args)
ADAC250_ADC_init_send = _eapi.ADAC250_ADC_init_send

def ADAC250_ADC_setGain_send(*args):
  return _eapi.ADAC250_ADC_setGain_send(*args)
ADAC250_ADC_setGain_send = _eapi.ADAC250_ADC_setGain_send

def ADAC250_ADC_setFineGain_send(*args):
  return _eapi.ADAC250_ADC_setFineGain_send(*args)
ADAC250_ADC_setFineGain_send = _eapi.ADAC250_ADC_setFineGain_send

def ADAC250_ADC_setPedestal_send(*args):
  return _eapi.ADAC250_ADC_setPedestal_send(*args)
ADAC250_ADC_setPedestal_send = _eapi.ADAC250_ADC_setPedestal_send

def ADAC250_ADC_getStatus_send(*args):
  return _eapi.ADAC250_ADC_getStatus_send(*args)
ADAC250_ADC_getStatus_send = _eapi.ADAC250_ADC_getStatus_send

def ADAC250_ADC_Calibrate_send(*args):
  return _eapi.ADAC250_ADC_Calibrate_send(*args)
ADAC250_ADC_Calibrate_send = _eapi.ADAC250_ADC_Calibrate_send

def ADAC250_ADC_SetDataFormat_send(*args):
  return _eapi.ADAC250_ADC_SetDataFormat_send(*args)
ADAC250_ADC_SetDataFormat_send = _eapi.ADAC250_ADC_SetDataFormat_send

def ADAC250_ADC_SetSleepMode_send(*args):
  return _eapi.ADAC250_ADC_SetSleepMode_send(*args)
ADAC250_ADC_SetSleepMode_send = _eapi.ADAC250_ADC_SetSleepMode_send

def ADAC250_ADC_SetOffsetCorrectionTime_send(*args):
  return _eapi.ADAC250_ADC_SetOffsetCorrectionTime_send(*args)
ADAC250_ADC_SetOffsetCorrectionTime_send = _eapi.ADAC250_ADC_SetOffsetCorrectionTime_send

def ADAC250_ADC_SetTriggerDelay_send(*args):
  return _eapi.ADAC250_ADC_SetTriggerDelay_send(*args)
ADAC250_ADC_SetTriggerDelay_send = _eapi.ADAC250_ADC_SetTriggerDelay_send

def ADAC250_MUX_ConfigClockOutput_send(*args):
  return _eapi.ADAC250_MUX_ConfigClockOutput_send(*args)
ADAC250_MUX_ConfigClockOutput_send = _eapi.ADAC250_MUX_ConfigClockOutput_send
ADAC250_COREID = _eapi.ADAC250_COREID
ADAC250_COREVER = _eapi.ADAC250_COREVER
ADAC250_CLK_REF_FREQ_10MHz = _eapi.ADAC250_CLK_REF_FREQ_10MHz
ADAC250_MAX_ADC_PLL_CLK_FREQ = _eapi.ADAC250_MAX_ADC_PLL_CLK_FREQ
ADAC250_MAX_DAC_PLL_CLK_FREQ = _eapi.ADAC250_MAX_DAC_PLL_CLK_FREQ
ADAC250_MIN_ADC_PLL_CLK_FREQ = _eapi.ADAC250_MIN_ADC_PLL_CLK_FREQ
ADAC250_MIN_DAC_PLL_CLK_FREQ = _eapi.ADAC250_MIN_DAC_PLL_CLK_FREQ
ADAC250_MAXVCOFREQ = _eapi.ADAC250_MAXVCOFREQ
ADAC250_MINVCOFREQ = _eapi.ADAC250_MINVCOFREQ
ADAC250_OK = _eapi.ADAC250_OK
ADAC250_NO_VALID_DIVIDER = _eapi.ADAC250_NO_VALID_DIVIDER
ADAC250_NO_VALID_R = _eapi.ADAC250_NO_VALID_R
ADAC250_REF_CLOCK_TO_HIGH = _eapi.ADAC250_REF_CLOCK_TO_HIGH
ADAC250_PFDFREQ_OUT_OF_RANGE = _eapi.ADAC250_PFDFREQ_OUT_OF_RANGE
ADAC250_NO_VALID_PLL_SOLUTION = _eapi.ADAC250_NO_VALID_PLL_SOLUTION
ADAC250_VCO_OUT_OF_RANGE = _eapi.ADAC250_VCO_OUT_OF_RANGE
ADAC250_PFDFREQ_OUT_OF_SPEC = _eapi.ADAC250_PFDFREQ_OUT_OF_SPEC
ADAC250_MUXERROR = _eapi.ADAC250_MUXERROR
ADAC250_DACTIMEOUT = _eapi.ADAC250_DACTIMEOUT
ADAC250_FREQLOW = _eapi.ADAC250_FREQLOW
ADAC250_OVERFLOW = _eapi.ADAC250_OVERFLOW
ADAC250_PLLNOTLOCKED = _eapi.ADAC250_PLLNOTLOCKED
ADAC250_INVALID_TRIGGER_DELAY = _eapi.ADAC250_INVALID_TRIGGER_DELAY
ADAC250_INVALID_POINTER = _eapi.ADAC250_INVALID_POINTER
ADAC250_ARG_OUT_OF_RANGE = _eapi.ADAC250_ARG_OUT_OF_RANGE
ADAC250_PLL = _eapi.ADAC250_PLL
ADAC250_DAC = _eapi.ADAC250_DAC
ADAC250_ADC = _eapi.ADAC250_ADC
ADAC250_TCVCXO = _eapi.ADAC250_TCVCXO
ADAC250_OVR = _eapi.ADAC250_OVR
ADAC250_CLOCKIN_10MHZREF = _eapi.ADAC250_CLOCKIN_10MHZREF
ADAC250_CLOCKIN_EXTERNALREF = _eapi.ADAC250_CLOCKIN_EXTERNALREF
ADAC250_CLOCKIN_EXTERNALCLOCK = _eapi.ADAC250_CLOCKIN_EXTERNALCLOCK
class ADAC250_PLL_PARAM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADAC250_PLL_PARAM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADAC250_PLL_PARAM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Afactor"] = _eapi.ADAC250_PLL_PARAM_Afactor_set
    __swig_getmethods__["Afactor"] = _eapi.ADAC250_PLL_PARAM_Afactor_get
    if _newclass:Afactor = _swig_property(_eapi.ADAC250_PLL_PARAM_Afactor_get, _eapi.ADAC250_PLL_PARAM_Afactor_set)
    __swig_setmethods__["Bfactor"] = _eapi.ADAC250_PLL_PARAM_Bfactor_set
    __swig_getmethods__["Bfactor"] = _eapi.ADAC250_PLL_PARAM_Bfactor_get
    if _newclass:Bfactor = _swig_property(_eapi.ADAC250_PLL_PARAM_Bfactor_get, _eapi.ADAC250_PLL_PARAM_Bfactor_set)
    __swig_setmethods__["Rfactor"] = _eapi.ADAC250_PLL_PARAM_Rfactor_set
    __swig_getmethods__["Rfactor"] = _eapi.ADAC250_PLL_PARAM_Rfactor_get
    if _newclass:Rfactor = _swig_property(_eapi.ADAC250_PLL_PARAM_Rfactor_get, _eapi.ADAC250_PLL_PARAM_Rfactor_set)
    __swig_setmethods__["Pfactor"] = _eapi.ADAC250_PLL_PARAM_Pfactor_set
    __swig_getmethods__["Pfactor"] = _eapi.ADAC250_PLL_PARAM_Pfactor_get
    if _newclass:Pfactor = _swig_property(_eapi.ADAC250_PLL_PARAM_Pfactor_get, _eapi.ADAC250_PLL_PARAM_Pfactor_set)
    __swig_setmethods__["VCOFreq"] = _eapi.ADAC250_PLL_PARAM_VCOFreq_set
    __swig_getmethods__["VCOFreq"] = _eapi.ADAC250_PLL_PARAM_VCOFreq_get
    if _newclass:VCOFreq = _swig_property(_eapi.ADAC250_PLL_PARAM_VCOFreq_get, _eapi.ADAC250_PLL_PARAM_VCOFreq_set)
    __swig_setmethods__["pfdFreq"] = _eapi.ADAC250_PLL_PARAM_pfdFreq_set
    __swig_getmethods__["pfdFreq"] = _eapi.ADAC250_PLL_PARAM_pfdFreq_get
    if _newclass:pfdFreq = _swig_property(_eapi.ADAC250_PLL_PARAM_pfdFreq_get, _eapi.ADAC250_PLL_PARAM_pfdFreq_set)
    __swig_setmethods__["divisorADCClk"] = _eapi.ADAC250_PLL_PARAM_divisorADCClk_set
    __swig_getmethods__["divisorADCClk"] = _eapi.ADAC250_PLL_PARAM_divisorADCClk_get
    if _newclass:divisorADCClk = _swig_property(_eapi.ADAC250_PLL_PARAM_divisorADCClk_get, _eapi.ADAC250_PLL_PARAM_divisorADCClk_set)
    __swig_setmethods__["divisorDACInClk"] = _eapi.ADAC250_PLL_PARAM_divisorDACInClk_set
    __swig_getmethods__["divisorDACInClk"] = _eapi.ADAC250_PLL_PARAM_divisorDACInClk_get
    if _newclass:divisorDACInClk = _swig_property(_eapi.ADAC250_PLL_PARAM_divisorDACInClk_get, _eapi.ADAC250_PLL_PARAM_divisorDACInClk_set)
    __swig_setmethods__["divisorClkOutClk"] = _eapi.ADAC250_PLL_PARAM_divisorClkOutClk_set
    __swig_getmethods__["divisorClkOutClk"] = _eapi.ADAC250_PLL_PARAM_divisorClkOutClk_get
    if _newclass:divisorClkOutClk = _swig_property(_eapi.ADAC250_PLL_PARAM_divisorClkOutClk_get, _eapi.ADAC250_PLL_PARAM_divisorClkOutClk_set)
    __swig_setmethods__["divisorRsvdClk"] = _eapi.ADAC250_PLL_PARAM_divisorRsvdClk_set
    __swig_getmethods__["divisorRsvdClk"] = _eapi.ADAC250_PLL_PARAM_divisorRsvdClk_get
    if _newclass:divisorRsvdClk = _swig_property(_eapi.ADAC250_PLL_PARAM_divisorRsvdClk_get, _eapi.ADAC250_PLL_PARAM_divisorRsvdClk_set)
    __swig_setmethods__["divisorDACDataClk"] = _eapi.ADAC250_PLL_PARAM_divisorDACDataClk_set
    __swig_getmethods__["divisorDACDataClk"] = _eapi.ADAC250_PLL_PARAM_divisorDACDataClk_get
    if _newclass:divisorDACDataClk = _swig_property(_eapi.ADAC250_PLL_PARAM_divisorDACDataClk_get, _eapi.ADAC250_PLL_PARAM_divisorDACDataClk_set)
    def __init__(self): 
        this = _eapi.new_ADAC250_PLL_PARAM()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_ADAC250_PLL_PARAM
    __del__ = lambda self : None;
ADAC250_PLL_PARAM_swigregister = _eapi.ADAC250_PLL_PARAM_swigregister
ADAC250_PLL_PARAM_swigregister(ADAC250_PLL_PARAM)

class ADAC250_PLL_SLEEP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADAC250_PLL_SLEEP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ADAC250_PLL_SLEEP, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _eapi.new_ADAC250_PLL_SLEEP()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_ADAC250_PLL_SLEEP
    __del__ = lambda self : None;
ADAC250_PLL_SLEEP_swigregister = _eapi.ADAC250_PLL_SLEEP_swigregister
ADAC250_PLL_SLEEP_swigregister(ADAC250_PLL_SLEEP)

ADAC250_PLL_UNLOCKED = _eapi.ADAC250_PLL_UNLOCKED
ADAC250_PLL_LOCKED = _eapi.ADAC250_PLL_LOCKED
ADAC250_ADC_TWOCMP = _eapi.ADAC250_ADC_TWOCMP
ADAC250_ADC_OFFSET = _eapi.ADAC250_ADC_OFFSET
ADAC250_ADC_NORMAL = _eapi.ADAC250_ADC_NORMAL
ADAC250_ADC_OUTB_DISABLED = _eapi.ADAC250_ADC_OUTB_DISABLED
ADAC250_ADC_OUTA_DISABLED = _eapi.ADAC250_ADC_OUTA_DISABLED
ADAC250_ADC_OUTAB_DISABLED = _eapi.ADAC250_ADC_OUTAB_DISABLED
ADAC250_ADC_GLOBALPOWERDN = _eapi.ADAC250_ADC_GLOBALPOWERDN
ADAC250_ADC_CHB_STANDBY = _eapi.ADAC250_ADC_CHB_STANDBY
ADAC250_ADC_CHA_STANDBY = _eapi.ADAC250_ADC_CHA_STANDBY
ADAC250_ADC_CHANNEL_A = _eapi.ADAC250_ADC_CHANNEL_A
ADAC250_ADC_CHANNEL_B = _eapi.ADAC250_ADC_CHANNEL_B
ADAC250_ADC_OCT_256K = _eapi.ADAC250_ADC_OCT_256K
ADAC250_ADC_OCT_512K = _eapi.ADAC250_ADC_OCT_512K
ADAC250_ADC_OCT_1M = _eapi.ADAC250_ADC_OCT_1M
ADAC250_ADC_OCT_2M = _eapi.ADAC250_ADC_OCT_2M
ADAC250_ADC_OCT_4M = _eapi.ADAC250_ADC_OCT_4M
ADAC250_ADC_OCT_8M = _eapi.ADAC250_ADC_OCT_8M
ADAC250_ADC_OCT_16M = _eapi.ADAC250_ADC_OCT_16M
ADAC250_ADC_OCT_32M = _eapi.ADAC250_ADC_OCT_32M
ADAC250_ADC_OCT_64M = _eapi.ADAC250_ADC_OCT_64M
ADAC250_ADC_OCT_128M = _eapi.ADAC250_ADC_OCT_128M
ADAC250_ADC_OCT_256M = _eapi.ADAC250_ADC_OCT_256M
ADAC250_ADC_OCT_512M = _eapi.ADAC250_ADC_OCT_512M
ADAC250_ADC_OCT_NULL = _eapi.ADAC250_ADC_OCT_NULL
ADAC250_ADC_0_0dB = _eapi.ADAC250_ADC_0_0dB
ADAC250_ADC_0_5dB = _eapi.ADAC250_ADC_0_5dB
ADAC250_ADC_1_0dB = _eapi.ADAC250_ADC_1_0dB
ADAC250_ADC_1_5dB = _eapi.ADAC250_ADC_1_5dB
ADAC250_ADC_2_0dB = _eapi.ADAC250_ADC_2_0dB
ADAC250_ADC_2_5dB = _eapi.ADAC250_ADC_2_5dB
ADAC250_ADC_3_0dB = _eapi.ADAC250_ADC_3_0dB
ADAC250_ADC_3_5dB = _eapi.ADAC250_ADC_3_5dB
ADAC250_ADC_4_0dB = _eapi.ADAC250_ADC_4_0dB
ADAC250_ADC_4_5dB = _eapi.ADAC250_ADC_4_5dB
ADAC250_ADC_5_0dB = _eapi.ADAC250_ADC_5_0dB
ADAC250_ADC_5_5dB = _eapi.ADAC250_ADC_5_5dB
ADAC250_ADC_6_0dB = _eapi.ADAC250_ADC_6_0dB
ADAC250_ADC_NORMAL_STATUS = _eapi.ADAC250_ADC_NORMAL_STATUS
ADAC250_ADC_OVERRANGE = _eapi.ADAC250_ADC_OVERRANGE
ADAC250_DAC_STATUS_PLL_LOCK = _eapi.ADAC250_DAC_STATUS_PLL_LOCK
ADAC250_DAC_STATUS_DLL_LOCK = _eapi.ADAC250_DAC_STATUS_DLL_LOCK
ADAC250_DAC_STATUS_DEVICE_ID = _eapi.ADAC250_DAC_STATUS_DEVICE_ID
ADAC250_DAC_STATUS_VERSION = _eapi.ADAC250_DAC_STATUS_VERSION
ADAC250_DAC_STATUS_SELFTST_ERR = _eapi.ADAC250_DAC_STATUS_SELFTST_ERR
ADAC250_DAC_STATUS_FIFO_ERR = _eapi.ADAC250_DAC_STATUS_FIFO_ERR
ADAC250_DAC_STATUS_PATTERN_ERR = _eapi.ADAC250_DAC_STATUS_PATTERN_ERR
ADAC250_DAC_CMIX_LP = _eapi.ADAC250_DAC_CMIX_LP
ADAC250_DAC_CMIX_HP = _eapi.ADAC250_DAC_CMIX_HP
ADAC250_DAC_CMIX_PosFDac = _eapi.ADAC250_DAC_CMIX_PosFDac
ADAC250_DAC_CMIX_NegFDac = _eapi.ADAC250_DAC_CMIX_NegFDac
ADAC250_DAC_TWOCMP = _eapi.ADAC250_DAC_TWOCMP
ADAC250_DAC_OFFSET = _eapi.ADAC250_DAC_OFFSET
ADAC250_DAC_INTERPOLATION_NONE = _eapi.ADAC250_DAC_INTERPOLATION_NONE
ADAC250_DAC_INTERPOLATION_2X = _eapi.ADAC250_DAC_INTERPOLATION_2X
ADAC250_DAC_INTERPOLATION_4X = _eapi.ADAC250_DAC_INTERPOLATION_4X
ADAC250_DAC_SLEEP_NONE = _eapi.ADAC250_DAC_SLEEP_NONE
ADAC250_DAC_SLEEP_A = _eapi.ADAC250_DAC_SLEEP_A
ADAC250_DAC_SLEEP_B = _eapi.ADAC250_DAC_SLEEP_B
ADAC250_DAC_SLEEP_AB = _eapi.ADAC250_DAC_SLEEP_AB
ADAC250_DAC_CHANNEL_A = _eapi.ADAC250_DAC_CHANNEL_A
ADAC250_DAC_CHANNEL_B = _eapi.ADAC250_DAC_CHANNEL_B
ADAC250_DAC_SYNC_OFF = _eapi.ADAC250_DAC_SYNC_OFF
ADAC250_DAC_SYNC_ON = _eapi.ADAC250_DAC_SYNC_ON
ADAC250_DAC_SYNC_SOURCE_FPGA = _eapi.ADAC250_DAC_SYNC_SOURCE_FPGA
ADAC250_DAC_SYNC_SOURCE_DACREG = _eapi.ADAC250_DAC_SYNC_SOURCE_DACREG
ADAC250_CLOCKIN_10MHZ = _eapi.ADAC250_CLOCKIN_10MHZ
ADAC250_CLOCKIN_REFIN = _eapi.ADAC250_CLOCKIN_REFIN
ADAC250_CLOCKIN_PLLCLKOUT2 = _eapi.ADAC250_CLOCKIN_PLLCLKOUT2
ADAC250_CLOCKIN_FMCCLK3 = _eapi.ADAC250_CLOCKIN_FMCCLK3
ADAC250_CLOCKOUT_REFOUT = _eapi.ADAC250_CLOCKOUT_REFOUT
ADAC250_CLOCKOUT_PLLCLK1 = _eapi.ADAC250_CLOCKOUT_PLLCLK1
ADAC250_CLOCKOUT_PLLREF = _eapi.ADAC250_CLOCKOUT_PLLREF
ADAC250_CLOCKOUT_FMCCLK1 = _eapi.ADAC250_CLOCKOUT_FMCCLK1

def os_config_get_parameter(*args):
  return _eapi.os_config_get_parameter(*args)
os_config_get_parameter = _eapi.os_config_get_parameter

def os_config_get_first_parameter(*args):
  return _eapi.os_config_get_first_parameter(*args)
os_config_get_first_parameter = _eapi.os_config_get_first_parameter

def os_config_get_next_parameter(*args):
  return _eapi.os_config_get_next_parameter(*args)
os_config_get_next_parameter = _eapi.os_config_get_next_parameter

def os_config_set_parameter(*args):
  return _eapi.os_config_set_parameter(*args)
os_config_set_parameter = _eapi.os_config_set_parameter

def os_config_unset_parameter(*args):
  return _eapi.os_config_unset_parameter(*args)
os_config_unset_parameter = _eapi.os_config_unset_parameter

def os_config_load_file(*args):
  return _eapi.os_config_load_file(*args)
os_config_load_file = _eapi.os_config_load_file

def os_config_save_file(*args):
  return _eapi.os_config_save_file(*args)
os_config_save_file = _eapi.os_config_save_file

def os_config_clear_file(*args):
  return _eapi.os_config_clear_file(*args)
os_config_clear_file = _eapi.os_config_clear_file

def os_config_apply_file(*args):
  return _eapi.os_config_apply_file(*args)
os_config_apply_file = _eapi.os_config_apply_file

def os_config_select_file(*args):
  return _eapi.os_config_select_file(*args)
os_config_select_file = _eapi.os_config_select_file

def os_config_get_first_file(*args):
  return _eapi.os_config_get_first_file(*args)
os_config_get_first_file = _eapi.os_config_get_first_file

def os_config_get_next_file(*args):
  return _eapi.os_config_get_next_file(*args)
os_config_get_next_file = _eapi.os_config_get_next_file
OSCONFIG_SUCCESS = _eapi.OSCONFIG_SUCCESS
OSCONFIG_BADPARAMETER = _eapi.OSCONFIG_BADPARAMETER
OSCONFIG_BADVALUE = _eapi.OSCONFIG_BADVALUE
OSCONFIG_BADFILE = _eapi.OSCONFIG_BADFILE
OSCONFIG_NOTLOADED = _eapi.OSCONFIG_NOTLOADED

def ADC5000_Presence_send(*args):
  return _eapi.ADC5000_Presence_send(*args)
ADC5000_Presence_send = _eapi.ADC5000_Presence_send

def ADC5000_Powerup_send(*args):
  return _eapi.ADC5000_Powerup_send(*args)
ADC5000_Powerup_send = _eapi.ADC5000_Powerup_send

def ADC5000_Reset_send(*args):
  return _eapi.ADC5000_Reset_send(*args)
ADC5000_Reset_send = _eapi.ADC5000_Reset_send

def ADC5000_SetMode_send(*args):
  return _eapi.ADC5000_SetMode_send(*args)
ADC5000_SetMode_send = _eapi.ADC5000_SetMode_send

def ADC5000_SetSync_send(*args):
  return _eapi.ADC5000_SetSync_send(*args)
ADC5000_SetSync_send = _eapi.ADC5000_SetSync_send

def ADC5000_PLLLock_send(*args):
  return _eapi.ADC5000_PLLLock_send(*args)
ADC5000_PLLLock_send = _eapi.ADC5000_PLLLock_send

def ADC5000_SetTestMode_send(*args):
  return _eapi.ADC5000_SetTestMode_send(*args)
ADC5000_SetTestMode_send = _eapi.ADC5000_SetTestMode_send

def ADC5000_CalibrateIoDelay_send(*args):
  return _eapi.ADC5000_CalibrateIoDelay_send(*args)
ADC5000_CalibrateIoDelay_send = _eapi.ADC5000_CalibrateIoDelay_send

def ADC5000_GetAdcStatus_send(*args):
  return _eapi.ADC5000_GetAdcStatus_send(*args)
ADC5000_GetAdcStatus_send = _eapi.ADC5000_GetAdcStatus_send

def ADC5000_SetStandby_send(*args):
  return _eapi.ADC5000_SetStandby_send(*args)
ADC5000_SetStandby_send = _eapi.ADC5000_SetStandby_send

def ADC5000_SetCoding_send(*args):
  return _eapi.ADC5000_SetCoding_send(*args)
ADC5000_SetCoding_send = _eapi.ADC5000_SetCoding_send

def ADC5000_SetBandwidth_send(*args):
  return _eapi.ADC5000_SetBandwidth_send(*args)
ADC5000_SetBandwidth_send = _eapi.ADC5000_SetBandwidth_send

def ADC5000_SetAdjTriggerDelay_send(*args):
  return _eapi.ADC5000_SetAdjTriggerDelay_send(*args)
ADC5000_SetAdjTriggerDelay_send = _eapi.ADC5000_SetAdjTriggerDelay_send

def ADC5000_SetOffset_send(*args):
  return _eapi.ADC5000_SetOffset_send(*args)
ADC5000_SetOffset_send = _eapi.ADC5000_SetOffset_send

def ADC5000_SetGain_send(*args):
  return _eapi.ADC5000_SetGain_send(*args)
ADC5000_SetGain_send = _eapi.ADC5000_SetGain_send

def ADC5000_SetPhase_send(*args):
  return _eapi.ADC5000_SetPhase_send(*args)
ADC5000_SetPhase_send = _eapi.ADC5000_SetPhase_send

def ADC5000_PLLConfigure_send(*args):
  return _eapi.ADC5000_PLLConfigure_send(*args)
ADC5000_PLLConfigure_send = _eapi.ADC5000_PLLConfigure_send
ADC5000_CLOCK_EXTERNAL = _eapi.ADC5000_CLOCK_EXTERNAL
ADC5000_CLOCK_EXTERNAL_REF = _eapi.ADC5000_CLOCK_EXTERNAL_REF
ADC5000_CLOCK_INTERNAL_REF = _eapi.ADC5000_CLOCK_INTERNAL_REF
ADC5000_SYNC_EXT = _eapi.ADC5000_SYNC_EXT
ADC5000_SYNC_CARRIER = _eapi.ADC5000_SYNC_CARRIER
ADC5000_SYNC_PLL = _eapi.ADC5000_SYNC_PLL
ADC5000_SYNC_OFF = _eapi.ADC5000_SYNC_OFF
ADC5000_BOARD_TEMPERATURE = _eapi.ADC5000_BOARD_TEMPERATURE
ADC5000_3V3 = _eapi.ADC5000_3V3
ADC5000_ADC_TEMPERATURE = _eapi.ADC5000_ADC_TEMPERATURE
ADC5000_VADJ = _eapi.ADC5000_VADJ
ADC5000_2V5 = _eapi.ADC5000_2V5
ADC5000_3V3_DIGITAL = _eapi.ADC5000_3V3_DIGITAL
ADC5000_3V3_ANALOG = _eapi.ADC5000_3V3_ANALOG
ADC5000_VCP = _eapi.ADC5000_VCP
ADC5000_1V8 = _eapi.ADC5000_1V8
class control_reg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, control_reg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, control_reg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["delay_reset"] = _eapi.control_reg_delay_reset_set
    __swig_getmethods__["delay_reset"] = _eapi.control_reg_delay_reset_get
    if _newclass:delay_reset = _swig_property(_eapi.control_reg_delay_reset_get, _eapi.control_reg_delay_reset_set)
    __swig_setmethods__["clk_reset"] = _eapi.control_reg_clk_reset_set
    __swig_getmethods__["clk_reset"] = _eapi.control_reg_clk_reset_get
    if _newclass:clk_reset = _swig_property(_eapi.control_reg_clk_reset_get, _eapi.control_reg_clk_reset_set)
    __swig_setmethods__["io_reset"] = _eapi.control_reg_io_reset_set
    __swig_getmethods__["io_reset"] = _eapi.control_reg_io_reset_get
    if _newclass:io_reset = _swig_property(_eapi.control_reg_io_reset_get, _eapi.control_reg_io_reset_set)
    __swig_setmethods__["reserved3"] = _eapi.control_reg_reserved3_set
    __swig_getmethods__["reserved3"] = _eapi.control_reg_reserved3_get
    if _newclass:reserved3 = _swig_property(_eapi.control_reg_reserved3_get, _eapi.control_reg_reserved3_set)
    __swig_setmethods__["sync_cmd"] = _eapi.control_reg_sync_cmd_set
    __swig_getmethods__["sync_cmd"] = _eapi.control_reg_sync_cmd_get
    if _newclass:sync_cmd = _swig_property(_eapi.control_reg_sync_cmd_get, _eapi.control_reg_sync_cmd_set)
    __swig_setmethods__["core_reset_pulse"] = _eapi.control_reg_core_reset_pulse_set
    __swig_getmethods__["core_reset_pulse"] = _eapi.control_reg_core_reset_pulse_get
    if _newclass:core_reset_pulse = _swig_property(_eapi.control_reg_core_reset_pulse_get, _eapi.control_reg_core_reset_pulse_set)
    __swig_setmethods__["rst_fifo"] = _eapi.control_reg_rst_fifo_set
    __swig_getmethods__["rst_fifo"] = _eapi.control_reg_rst_fifo_get
    if _newclass:rst_fifo = _swig_property(_eapi.control_reg_rst_fifo_get, _eapi.control_reg_rst_fifo_set)
    __swig_setmethods__["reserved2"] = _eapi.control_reg_reserved2_set
    __swig_getmethods__["reserved2"] = _eapi.control_reg_reserved2_get
    if _newclass:reserved2 = _swig_property(_eapi.control_reg_reserved2_get, _eapi.control_reg_reserved2_set)
    __swig_setmethods__["a_aligned"] = _eapi.control_reg_a_aligned_set
    __swig_getmethods__["a_aligned"] = _eapi.control_reg_a_aligned_get
    if _newclass:a_aligned = _swig_property(_eapi.control_reg_a_aligned_get, _eapi.control_reg_a_aligned_set)
    __swig_setmethods__["b_aligned"] = _eapi.control_reg_b_aligned_set
    __swig_getmethods__["b_aligned"] = _eapi.control_reg_b_aligned_get
    if _newclass:b_aligned = _swig_property(_eapi.control_reg_b_aligned_get, _eapi.control_reg_b_aligned_set)
    __swig_setmethods__["c_aligned"] = _eapi.control_reg_c_aligned_set
    __swig_getmethods__["c_aligned"] = _eapi.control_reg_c_aligned_get
    if _newclass:c_aligned = _swig_property(_eapi.control_reg_c_aligned_get, _eapi.control_reg_c_aligned_set)
    __swig_setmethods__["d_aligned"] = _eapi.control_reg_d_aligned_set
    __swig_getmethods__["d_aligned"] = _eapi.control_reg_d_aligned_get
    if _newclass:d_aligned = _swig_property(_eapi.control_reg_d_aligned_get, _eapi.control_reg_d_aligned_set)
    __swig_setmethods__["reserved1"] = _eapi.control_reg_reserved1_set
    __swig_getmethods__["reserved1"] = _eapi.control_reg_reserved1_get
    if _newclass:reserved1 = _swig_property(_eapi.control_reg_reserved1_get, _eapi.control_reg_reserved1_set)
    def __init__(self): 
        this = _eapi.new_control_reg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_control_reg
    __del__ = lambda self : None;
control_reg_swigregister = _eapi.control_reg_swigregister
control_reg_swigregister(control_reg)

class calib_reg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, calib_reg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, calib_reg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["idelay"] = _eapi.calib_reg_idelay_set
    __swig_getmethods__["idelay"] = _eapi.calib_reg_idelay_get
    if _newclass:idelay = _swig_property(_eapi.calib_reg_idelay_get, _eapi.calib_reg_idelay_set)
    __swig_setmethods__["idelay_we"] = _eapi.calib_reg_idelay_we_set
    __swig_getmethods__["idelay_we"] = _eapi.calib_reg_idelay_we_get
    if _newclass:idelay_we = _swig_property(_eapi.calib_reg_idelay_we_get, _eapi.calib_reg_idelay_we_set)
    __swig_setmethods__["bitslip"] = _eapi.calib_reg_bitslip_set
    __swig_getmethods__["bitslip"] = _eapi.calib_reg_bitslip_get
    if _newclass:bitslip = _swig_property(_eapi.calib_reg_bitslip_get, _eapi.calib_reg_bitslip_set)
    __swig_setmethods__["reserved1"] = _eapi.calib_reg_reserved1_set
    __swig_getmethods__["reserved1"] = _eapi.calib_reg_reserved1_get
    if _newclass:reserved1 = _swig_property(_eapi.calib_reg_reserved1_get, _eapi.calib_reg_reserved1_set)
    def __init__(self): 
        this = _eapi.new_calib_reg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_calib_reg
    __del__ = lambda self : None;
calib_reg_swigregister = _eapi.calib_reg_swigregister
calib_reg_swigregister(calib_reg)

class trig_control_reg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, trig_control_reg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, trig_control_reg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["trigger_delay"] = _eapi.trig_control_reg_trigger_delay_set
    __swig_getmethods__["trigger_delay"] = _eapi.trig_control_reg_trigger_delay_get
    if _newclass:trigger_delay = _swig_property(_eapi.trig_control_reg_trigger_delay_get, _eapi.trig_control_reg_trigger_delay_set)
    __swig_setmethods__["reserved1"] = _eapi.trig_control_reg_reserved1_set
    __swig_getmethods__["reserved1"] = _eapi.trig_control_reg_reserved1_get
    if _newclass:reserved1 = _swig_property(_eapi.trig_control_reg_reserved1_get, _eapi.trig_control_reg_reserved1_set)
    def __init__(self): 
        this = _eapi.new_trig_control_reg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_trig_control_reg
    __del__ = lambda self : None;
trig_control_reg_swigregister = _eapi.trig_control_reg_swigregister
trig_control_reg_swigregister(trig_control_reg)

class freq_counter_reg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, freq_counter_reg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, freq_counter_reg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["clock_count"] = _eapi.freq_counter_reg_clock_count_set
    __swig_getmethods__["clock_count"] = _eapi.freq_counter_reg_clock_count_get
    if _newclass:clock_count = _swig_property(_eapi.freq_counter_reg_clock_count_get, _eapi.freq_counter_reg_clock_count_set)
    __swig_setmethods__["clk_sel"] = _eapi.freq_counter_reg_clk_sel_set
    __swig_getmethods__["clk_sel"] = _eapi.freq_counter_reg_clk_sel_get
    if _newclass:clk_sel = _swig_property(_eapi.freq_counter_reg_clk_sel_get, _eapi.freq_counter_reg_clk_sel_set)
    __swig_setmethods__["reserved"] = _eapi.freq_counter_reg_reserved_set
    __swig_getmethods__["reserved"] = _eapi.freq_counter_reg_reserved_get
    if _newclass:reserved = _swig_property(_eapi.freq_counter_reg_reserved_get, _eapi.freq_counter_reg_reserved_set)
    def __init__(self): 
        this = _eapi.new_freq_counter_reg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_freq_counter_reg
    __del__ = lambda self : None;
freq_counter_reg_swigregister = _eapi.freq_counter_reg_swigregister
freq_counter_reg_swigregister(freq_counter_reg)

class adc5000_core(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, adc5000_core, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, adc5000_core, name)
    __repr__ = _swig_repr
    __swig_setmethods__["coreid"] = _eapi.adc5000_core_coreid_set
    __swig_getmethods__["coreid"] = _eapi.adc5000_core_coreid_get
    if _newclass:coreid = _swig_property(_eapi.adc5000_core_coreid_get, _eapi.adc5000_core_coreid_set)
    __swig_setmethods__["control"] = _eapi.adc5000_core_control_set
    __swig_getmethods__["control"] = _eapi.adc5000_core_control_get
    if _newclass:control = _swig_property(_eapi.adc5000_core_control_get, _eapi.adc5000_core_control_set)
    __swig_setmethods__["calibA"] = _eapi.adc5000_core_calibA_set
    __swig_getmethods__["calibA"] = _eapi.adc5000_core_calibA_get
    if _newclass:calibA = _swig_property(_eapi.adc5000_core_calibA_get, _eapi.adc5000_core_calibA_set)
    __swig_setmethods__["calibB"] = _eapi.adc5000_core_calibB_set
    __swig_getmethods__["calibB"] = _eapi.adc5000_core_calibB_get
    if _newclass:calibB = _swig_property(_eapi.adc5000_core_calibB_get, _eapi.adc5000_core_calibB_set)
    __swig_setmethods__["calibC"] = _eapi.adc5000_core_calibC_set
    __swig_getmethods__["calibC"] = _eapi.adc5000_core_calibC_get
    if _newclass:calibC = _swig_property(_eapi.adc5000_core_calibC_get, _eapi.adc5000_core_calibC_set)
    __swig_setmethods__["calibD"] = _eapi.adc5000_core_calibD_set
    __swig_getmethods__["calibD"] = _eapi.adc5000_core_calibD_get
    if _newclass:calibD = _swig_property(_eapi.adc5000_core_calibD_get, _eapi.adc5000_core_calibD_set)
    __swig_setmethods__["calibErrorChA"] = _eapi.adc5000_core_calibErrorChA_set
    __swig_getmethods__["calibErrorChA"] = _eapi.adc5000_core_calibErrorChA_get
    if _newclass:calibErrorChA = _swig_property(_eapi.adc5000_core_calibErrorChA_get, _eapi.adc5000_core_calibErrorChA_set)
    __swig_setmethods__["calibErrorChB"] = _eapi.adc5000_core_calibErrorChB_set
    __swig_getmethods__["calibErrorChB"] = _eapi.adc5000_core_calibErrorChB_get
    if _newclass:calibErrorChB = _swig_property(_eapi.adc5000_core_calibErrorChB_get, _eapi.adc5000_core_calibErrorChB_set)
    __swig_setmethods__["calibErrorChC"] = _eapi.adc5000_core_calibErrorChC_set
    __swig_getmethods__["calibErrorChC"] = _eapi.adc5000_core_calibErrorChC_get
    if _newclass:calibErrorChC = _swig_property(_eapi.adc5000_core_calibErrorChC_get, _eapi.adc5000_core_calibErrorChC_set)
    __swig_setmethods__["calibErrorChD"] = _eapi.adc5000_core_calibErrorChD_set
    __swig_getmethods__["calibErrorChD"] = _eapi.adc5000_core_calibErrorChD_get
    if _newclass:calibErrorChD = _swig_property(_eapi.adc5000_core_calibErrorChD_get, _eapi.adc5000_core_calibErrorChD_set)
    __swig_setmethods__["trig_control"] = _eapi.adc5000_core_trig_control_set
    __swig_getmethods__["trig_control"] = _eapi.adc5000_core_trig_control_get
    if _newclass:trig_control = _swig_property(_eapi.adc5000_core_trig_control_get, _eapi.adc5000_core_trig_control_set)
    __swig_setmethods__["freq_counter"] = _eapi.adc5000_core_freq_counter_set
    __swig_getmethods__["freq_counter"] = _eapi.adc5000_core_freq_counter_get
    if _newclass:freq_counter = _swig_property(_eapi.adc5000_core_freq_counter_get, _eapi.adc5000_core_freq_counter_set)
    def __init__(self): 
        this = _eapi.new_adc5000_core()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_adc5000_core
    __del__ = lambda self : None;
adc5000_core_swigregister = _eapi.adc5000_core_swigregister
adc5000_core_swigregister(adc5000_core)

class adc5000(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, adc5000, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, adc5000, name)
    __repr__ = _swig_repr
    __swig_setmethods__["core"] = _eapi.adc5000_core_set
    __swig_getmethods__["core"] = _eapi.adc5000_core_get
    if _newclass:core = _swig_property(_eapi.adc5000_core_get, _eapi.adc5000_core_set)
    __swig_setmethods__["hCarrier"] = _eapi.adc5000_hCarrier_set
    __swig_getmethods__["hCarrier"] = _eapi.adc5000_hCarrier_get
    if _newclass:hCarrier = _swig_property(_eapi.adc5000_hCarrier_get, _eapi.adc5000_hCarrier_set)
    __swig_setmethods__["FmcConnector"] = _eapi.adc5000_FmcConnector_set
    __swig_getmethods__["FmcConnector"] = _eapi.adc5000_FmcConnector_get
    if _newclass:FmcConnector = _swig_property(_eapi.adc5000_FmcConnector_get, _eapi.adc5000_FmcConnector_set)
    __swig_setmethods__["com"] = _eapi.adc5000_com_set
    __swig_getmethods__["com"] = _eapi.adc5000_com_get
    if _newclass:com = _swig_property(_eapi.adc5000_com_get, _eapi.adc5000_com_set)
    __swig_setmethods__["pll"] = _eapi.adc5000_pll_set
    __swig_getmethods__["pll"] = _eapi.adc5000_pll_get
    if _newclass:pll = _swig_property(_eapi.adc5000_pll_get, _eapi.adc5000_pll_set)
    __swig_setmethods__["adc"] = _eapi.adc5000_adc_set
    __swig_getmethods__["adc"] = _eapi.adc5000_adc_get
    if _newclass:adc = _swig_property(_eapi.adc5000_adc_get, _eapi.adc5000_adc_set)
    __swig_setmethods__["monitoring"] = _eapi.adc5000_monitoring_set
    __swig_getmethods__["monitoring"] = _eapi.adc5000_monitoring_get
    if _newclass:monitoring = _swig_property(_eapi.adc5000_monitoring_get, _eapi.adc5000_monitoring_set)
    __swig_setmethods__["calibration_done"] = _eapi.adc5000_calibration_done_set
    __swig_getmethods__["calibration_done"] = _eapi.adc5000_calibration_done_get
    if _newclass:calibration_done = _swig_property(_eapi.adc5000_calibration_done_get, _eapi.adc5000_calibration_done_set)
    def __init__(self): 
        this = _eapi.new_adc5000()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_adc5000
    __del__ = lambda self : None;
adc5000_swigregister = _eapi.adc5000_swigregister
adc5000_swigregister(adc5000)

ADC5000OK = _eapi.ADC5000OK
ADC5000ALIGN = _eapi.ADC5000ALIGN
ADC5000IVAL = _eapi.ADC5000IVAL
ADC5000PLLUNSTABLE = _eapi.ADC5000PLLUNSTABLE
ADC5000COREABSENT = _eapi.ADC5000COREABSENT
ADC5000FMCABSENT = _eapi.ADC5000FMCABSENT
ADC5000_INVALID_TRIGGER_DELAY = _eapi.ADC5000_INVALID_TRIGGER_DELAY
ADC5000_ERROR_COMM_PLL = _eapi.ADC5000_ERROR_COMM_PLL
ADC5000_ERROR_COMM_ADC = _eapi.ADC5000_ERROR_COMM_ADC
AD9517_MAX_OUTPUT_DIVIDER = _eapi.AD9517_MAX_OUTPUT_DIVIDER
class ad9517_core(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ad9517_core, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ad9517_core, name)
    __repr__ = _swig_repr
    __swig_setmethods__["com"] = _eapi.ad9517_core_com_set
    __swig_getmethods__["com"] = _eapi.ad9517_core_com_get
    if _newclass:com = _swig_property(_eapi.ad9517_core_com_get, _eapi.ad9517_core_com_set)
    def __init__(self): 
        this = _eapi.new_ad9517_core()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_ad9517_core
    __del__ = lambda self : None;
ad9517_core_swigregister = _eapi.ad9517_core_swigregister
ad9517_core_swigregister(ad9517_core)

AD9517_LOCK_DIGITAL = _eapi.AD9517_LOCK_DIGITAL
AD9517_LOCK_ANALOG = _eapi.AD9517_LOCK_ANALOG
AD9517_PLL_UNLOCKED = _eapi.AD9517_PLL_UNLOCKED
AD9517_PLL_LOCKED = _eapi.AD9517_PLL_LOCKED
class ad9517_param(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ad9517_param, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ad9517_param, name)
    __repr__ = _swig_repr
    __swig_setmethods__["out_freq"] = _eapi.ad9517_param_out_freq_set
    __swig_getmethods__["out_freq"] = _eapi.ad9517_param_out_freq_get
    if _newclass:out_freq = _swig_property(_eapi.ad9517_param_out_freq_get, _eapi.ad9517_param_out_freq_set)
    __swig_setmethods__["pfd_freq"] = _eapi.ad9517_param_pfd_freq_set
    __swig_getmethods__["pfd_freq"] = _eapi.ad9517_param_pfd_freq_get
    if _newclass:pfd_freq = _swig_property(_eapi.ad9517_param_pfd_freq_get, _eapi.ad9517_param_pfd_freq_set)
    __swig_setmethods__["pfd_freq_max"] = _eapi.ad9517_param_pfd_freq_max_set
    __swig_getmethods__["pfd_freq_max"] = _eapi.ad9517_param_pfd_freq_max_get
    if _newclass:pfd_freq_max = _swig_property(_eapi.ad9517_param_pfd_freq_max_get, _eapi.ad9517_param_pfd_freq_max_set)
    __swig_setmethods__["pfd_freq_min"] = _eapi.ad9517_param_pfd_freq_min_set
    __swig_getmethods__["pfd_freq_min"] = _eapi.ad9517_param_pfd_freq_min_get
    if _newclass:pfd_freq_min = _swig_property(_eapi.ad9517_param_pfd_freq_min_get, _eapi.ad9517_param_pfd_freq_min_set)
    __swig_setmethods__["vco_freq"] = _eapi.ad9517_param_vco_freq_set
    __swig_getmethods__["vco_freq"] = _eapi.ad9517_param_vco_freq_get
    if _newclass:vco_freq = _swig_property(_eapi.ad9517_param_vco_freq_get, _eapi.ad9517_param_vco_freq_set)
    __swig_setmethods__["vco_freq_max"] = _eapi.ad9517_param_vco_freq_max_set
    __swig_getmethods__["vco_freq_max"] = _eapi.ad9517_param_vco_freq_max_get
    if _newclass:vco_freq_max = _swig_property(_eapi.ad9517_param_vco_freq_max_get, _eapi.ad9517_param_vco_freq_max_set)
    __swig_setmethods__["vco_freq_min"] = _eapi.ad9517_param_vco_freq_min_set
    __swig_getmethods__["vco_freq_min"] = _eapi.ad9517_param_vco_freq_min_get
    if _newclass:vco_freq_min = _swig_property(_eapi.ad9517_param_vco_freq_min_get, _eapi.ad9517_param_vco_freq_min_set)
    __swig_setmethods__["ref_freq"] = _eapi.ad9517_param_ref_freq_set
    __swig_getmethods__["ref_freq"] = _eapi.ad9517_param_ref_freq_get
    if _newclass:ref_freq = _swig_property(_eapi.ad9517_param_ref_freq_get, _eapi.ad9517_param_ref_freq_set)
    __swig_setmethods__["Bfactor"] = _eapi.ad9517_param_Bfactor_set
    __swig_getmethods__["Bfactor"] = _eapi.ad9517_param_Bfactor_get
    if _newclass:Bfactor = _swig_property(_eapi.ad9517_param_Bfactor_get, _eapi.ad9517_param_Bfactor_set)
    __swig_setmethods__["Rfactor"] = _eapi.ad9517_param_Rfactor_set
    __swig_getmethods__["Rfactor"] = _eapi.ad9517_param_Rfactor_get
    if _newclass:Rfactor = _swig_property(_eapi.ad9517_param_Rfactor_get, _eapi.ad9517_param_Rfactor_set)
    __swig_setmethods__["Afactor"] = _eapi.ad9517_param_Afactor_set
    __swig_getmethods__["Afactor"] = _eapi.ad9517_param_Afactor_get
    if _newclass:Afactor = _swig_property(_eapi.ad9517_param_Afactor_get, _eapi.ad9517_param_Afactor_set)
    __swig_setmethods__["Pfactor"] = _eapi.ad9517_param_Pfactor_set
    __swig_getmethods__["Pfactor"] = _eapi.ad9517_param_Pfactor_get
    if _newclass:Pfactor = _swig_property(_eapi.ad9517_param_Pfactor_get, _eapi.ad9517_param_Pfactor_set)
    __swig_setmethods__["out_divider"] = _eapi.ad9517_param_out_divider_set
    __swig_getmethods__["out_divider"] = _eapi.ad9517_param_out_divider_get
    if _newclass:out_divider = _swig_property(_eapi.ad9517_param_out_divider_get, _eapi.ad9517_param_out_divider_set)
    __swig_setmethods__["external_clock"] = _eapi.ad9517_param_external_clock_set
    __swig_getmethods__["external_clock"] = _eapi.ad9517_param_external_clock_get
    if _newclass:external_clock = _swig_property(_eapi.ad9517_param_external_clock_get, _eapi.ad9517_param_external_clock_set)
    __swig_setmethods__["vco_divider"] = _eapi.ad9517_param_vco_divider_set
    __swig_getmethods__["vco_divider"] = _eapi.ad9517_param_vco_divider_get
    if _newclass:vco_divider = _swig_property(_eapi.ad9517_param_vco_divider_get, _eapi.ad9517_param_vco_divider_set)
    def __init__(self): 
        this = _eapi.new_ad9517_param()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_ad9517_param
    __del__ = lambda self : None;
ad9517_param_swigregister = _eapi.ad9517_param_swigregister
ad9517_param_swigregister(ad9517_param)

AD9517_CP_CURRENT_0DOT6MA = _eapi.AD9517_CP_CURRENT_0DOT6MA
AD9517_CP_CURRENT_1DOT2MA = _eapi.AD9517_CP_CURRENT_1DOT2MA
AD9517_CP_CURRENT_1DOT8MA = _eapi.AD9517_CP_CURRENT_1DOT8MA
AD9517_CP_CURRENT_2DOT4MA = _eapi.AD9517_CP_CURRENT_2DOT4MA
AD9517_CP_CURRENT_3DOT0MA = _eapi.AD9517_CP_CURRENT_3DOT0MA
AD9517_CP_CURRENT_3DOT6MA = _eapi.AD9517_CP_CURRENT_3DOT6MA
AD9517_CP_CURRENT_4DOT2MA = _eapi.AD9517_CP_CURRENT_4DOT2MA
AD9517_CP_CURRENT_4DOT8MA = _eapi.AD9517_CP_CURRENT_4DOT8MA
AD9517OK = _eapi.AD9517OK
AD9517OVERFLOW = _eapi.AD9517OVERFLOW
AD9517_INPUT_DIVIDER = _eapi.AD9517_INPUT_DIVIDER
AD9517FREQLOW = _eapi.AD9517FREQLOW
AD9517FREQHIGH = _eapi.AD9517FREQHIGH
AD9517_NO_VALID_SOLUTION = _eapi.AD9517_NO_VALID_SOLUTION
AD9517_DIVIDER = _eapi.AD9517_DIVIDER
AD9517_PFDFREQ_OUT_OF_RANGE = _eapi.AD9517_PFDFREQ_OUT_OF_RANGE
AD9517_NO_VALID_R = _eapi.AD9517_NO_VALID_R
AD9517_REF_CLOCK_TOO_HIGH = _eapi.AD9517_REF_CLOCK_TOO_HIGH
AD9517_VCO_OUT_OF_RANGE = _eapi.AD9517_VCO_OUT_OF_RANGE
AD9517_VCODIVIDER = _eapi.AD9517_VCODIVIDER
class ev10aq190_core(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ev10aq190_core, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ev10aq190_core, name)
    __repr__ = _swig_repr
    __swig_setmethods__["com"] = _eapi.ev10aq190_core_com_set
    __swig_getmethods__["com"] = _eapi.ev10aq190_core_com_get
    if _newclass:com = _swig_property(_eapi.ev10aq190_core_com_get, _eapi.ev10aq190_core_com_set)
    def __init__(self): 
        this = _eapi.new_ev10aq190_core()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_ev10aq190_core
    __del__ = lambda self : None;
ev10aq190_core_swigregister = _eapi.ev10aq190_core_swigregister
ev10aq190_core_swigregister(ev10aq190_core)

EV10AQ190_DISABLE = _eapi.EV10AQ190_DISABLE
EV10AQ190_BITFLASH = _eapi.EV10AQ190_BITFLASH
EV10AQ190_RAMP = _eapi.EV10AQ190_RAMP
EV10AQ190_CHANNELA = _eapi.EV10AQ190_CHANNELA
EV10AQ190_CHANNELB = _eapi.EV10AQ190_CHANNELB
EV10AQ190_CHANNELC = _eapi.EV10AQ190_CHANNELC
EV10AQ190_CHANNELD = _eapi.EV10AQ190_CHANNELD
EV10AQ190_1CHANNEL_A = _eapi.EV10AQ190_1CHANNEL_A
EV10AQ190_1CHANNEL_B = _eapi.EV10AQ190_1CHANNEL_B
EV10AQ190_1CHANNEL_C = _eapi.EV10AQ190_1CHANNEL_C
EV10AQ190_1CHANNEL_D = _eapi.EV10AQ190_1CHANNEL_D
EV10AQ190_2CHANNEL_A_C = _eapi.EV10AQ190_2CHANNEL_A_C
EV10AQ190_2CHANNEL_B_C = _eapi.EV10AQ190_2CHANNEL_B_C
EV10AQ190_2CHANNEL_A_D = _eapi.EV10AQ190_2CHANNEL_A_D
EV10AQ190_2CHANNEL_B_D = _eapi.EV10AQ190_2CHANNEL_B_D
EV10AQ190_4CHANNEL_A_B_C_D = _eapi.EV10AQ190_4CHANNEL_A_B_C_D
EV10AQ190_4CHANNEL_A_A_A_A = _eapi.EV10AQ190_4CHANNEL_A_A_A_A
EV10AQ190_4CHANNEL_B_B_B_B = _eapi.EV10AQ190_4CHANNEL_B_B_B_B
EV10AQ190_4CHANNEL_C_C_C_C = _eapi.EV10AQ190_4CHANNEL_C_C_C_C
EV10AQ190_4CHANNEL_D_D_D_D = _eapi.EV10AQ190_4CHANNEL_D_D_D_D
EV10AQ190_FULL_ACTIVE = _eapi.EV10AQ190_FULL_ACTIVE
EV10AQ190_STANDBY_A_B = _eapi.EV10AQ190_STANDBY_A_B
EV10AQ190_STANDBY_C_D = _eapi.EV10AQ190_STANDBY_C_D
EV10AQ190_FULL_STANDBY = _eapi.EV10AQ190_FULL_STANDBY
EV10AQ190_BINARY_CODING = _eapi.EV10AQ190_BINARY_CODING
EV10AQ190_GRAY_CODING = _eapi.EV10AQ190_GRAY_CODING
EV10AQ190_NOMINAL_BANDWIDTH = _eapi.EV10AQ190_NOMINAL_BANDWIDTH
EV10AQ190_FULL_BANDWIDTH = _eapi.EV10AQ190_FULL_BANDWIDTH
EV10AQ190OK = _eapi.EV10AQ190OK
EV10AQ190_CALIB_TIMEOUT = _eapi.EV10AQ190_CALIB_TIMEOUT
EV10AQ190_IVAL = _eapi.EV10AQ190_IVAL

def Aurora_GetVersion_send(*args):
  return _eapi.Aurora_GetVersion_send(*args)
Aurora_GetVersion_send = _eapi.Aurora_GetVersion_send

def Aurora_ResetCore_send(*args):
  return _eapi.Aurora_ResetCore_send(*args)
Aurora_ResetCore_send = _eapi.Aurora_ResetCore_send

def Aurora_GetChannelStatus_send(*args):
  return _eapi.Aurora_GetChannelStatus_send(*args)
Aurora_GetChannelStatus_send = _eapi.Aurora_GetChannelStatus_send

def Aurora_ResetRxFifo_send(*args):
  return _eapi.Aurora_ResetRxFifo_send(*args)
Aurora_ResetRxFifo_send = _eapi.Aurora_ResetRxFifo_send

def Aurora_ResetTxFifo_send(*args):
  return _eapi.Aurora_ResetTxFifo_send(*args)
Aurora_ResetTxFifo_send = _eapi.Aurora_ResetTxFifo_send

def Aurora_GetRxDataCount_send(*args):
  return _eapi.Aurora_GetRxDataCount_send(*args)
Aurora_GetRxDataCount_send = _eapi.Aurora_GetRxDataCount_send

def Aurora_GetTxDataCount_send(*args):
  return _eapi.Aurora_GetTxDataCount_send(*args)
Aurora_GetTxDataCount_send = _eapi.Aurora_GetTxDataCount_send

def Aurora_GetRxDataRate_send(*args):
  return _eapi.Aurora_GetRxDataRate_send(*args)
Aurora_GetRxDataRate_send = _eapi.Aurora_GetRxDataRate_send

def Aurora_GetTxDataRate_send(*args):
  return _eapi.Aurora_GetTxDataRate_send(*args)
Aurora_GetTxDataRate_send = _eapi.Aurora_GetTxDataRate_send

def Aurora_SetGtxTxParam_send(*args):
  return _eapi.Aurora_SetGtxTxParam_send(*args)
Aurora_SetGtxTxParam_send = _eapi.Aurora_SetGtxTxParam_send

def Aurora_GetGtxTxParam_send(*args):
  return _eapi.Aurora_GetGtxTxParam_send(*args)
Aurora_GetGtxTxParam_send = _eapi.Aurora_GetGtxTxParam_send

def Aurora_SetGtxRxParam_send(*args):
  return _eapi.Aurora_SetGtxRxParam_send(*args)
Aurora_SetGtxRxParam_send = _eapi.Aurora_SetGtxRxParam_send

def Aurora_GetGtxRxParam_send(*args):
  return _eapi.Aurora_GetGtxRxParam_send(*args)
Aurora_GetGtxRxParam_send = _eapi.Aurora_GetGtxRxParam_send

def Aurora_GetDfeEyeDacMon_send(*args):
  return _eapi.Aurora_GetDfeEyeDacMon_send(*args)
Aurora_GetDfeEyeDacMon_send = _eapi.Aurora_GetDfeEyeDacMon_send

def Aurora_SetChannelEnableState_send(*args):
  return _eapi.Aurora_SetChannelEnableState_send(*args)
Aurora_SetChannelEnableState_send = _eapi.Aurora_SetChannelEnableState_send

def Aurora_GetChannelEnableState_send(*args):
  return _eapi.Aurora_GetChannelEnableState_send(*args)
Aurora_GetChannelEnableState_send = _eapi.Aurora_GetChannelEnableState_send
class aurora_core(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aurora_core, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aurora_core, name)
    __repr__ = _swig_repr
    __swig_setmethods__["registers"] = _eapi.aurora_core_registers_set
    __swig_getmethods__["registers"] = _eapi.aurora_core_registers_get
    if _newclass:registers = _swig_property(_eapi.aurora_core_registers_get, _eapi.aurora_core_registers_set)
    __swig_setmethods__["ucIsOpen"] = _eapi.aurora_core_ucIsOpen_set
    __swig_getmethods__["ucIsOpen"] = _eapi.aurora_core_ucIsOpen_get
    if _newclass:ucIsOpen = _swig_property(_eapi.aurora_core_ucIsOpen_get, _eapi.aurora_core_ucIsOpen_set)
    __swig_setmethods__["pfUsleep"] = _eapi.aurora_core_pfUsleep_set
    __swig_getmethods__["pfUsleep"] = _eapi.aurora_core_pfUsleep_get
    if _newclass:pfUsleep = _swig_property(_eapi.aurora_core_pfUsleep_get, _eapi.aurora_core_pfUsleep_set)
    def __init__(self): 
        this = _eapi.new_aurora_core()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_aurora_core
    __del__ = lambda self : None;
aurora_core_swigregister = _eapi.aurora_core_swigregister
aurora_core_swigregister(aurora_core)

eAuroraDirectionRx = _eapi.eAuroraDirectionRx
eAuroraDirectionTx = _eapi.eAuroraDirectionTx
AURORAOK = _eapi.AURORAOK
AURORA_INVALID_CORE = _eapi.AURORA_INVALID_CORE
AURORA_NOT_OPEN = _eapi.AURORA_NOT_OPEN
AURORA_ALREADY_OPEN = _eapi.AURORA_ALREADY_OPEN
AURORA_CHANNEL_DOWN = _eapi.AURORA_CHANNEL_DOWN
AURORA_INVALID_ARG = _eapi.AURORA_INVALID_ARG

def fmclvds_reset_send(*args):
  return _eapi.fmclvds_reset_send(*args)
fmclvds_reset_send = _eapi.fmclvds_reset_send

def fmclvds_powerup_send(*args):
  return _eapi.fmclvds_powerup_send(*args)
fmclvds_powerup_send = _eapi.fmclvds_powerup_send

def fmclvds_presence_send(*args):
  return _eapi.fmclvds_presence_send(*args)
fmclvds_presence_send = _eapi.fmclvds_presence_send

def fmclvds_select_send(*args):
  return _eapi.fmclvds_select_send(*args)
fmclvds_select_send = _eapi.fmclvds_select_send

def fmclvds_set_channel_dir_send(*args):
  return _eapi.fmclvds_set_channel_dir_send(*args)
fmclvds_set_channel_dir_send = _eapi.fmclvds_set_channel_dir_send

def fmclvds_set_channel_powerdown_send(*args):
  return _eapi.fmclvds_set_channel_powerdown_send(*args)
fmclvds_set_channel_powerdown_send = _eapi.fmclvds_set_channel_powerdown_send

def fmclvds_set_channel_preemphasis_send(*args):
  return _eapi.fmclvds_set_channel_preemphasis_send(*args)
fmclvds_set_channel_preemphasis_send = _eapi.fmclvds_set_channel_preemphasis_send
FMCLVDS_CORE_ID = _eapi.FMCLVDS_CORE_ID
NB_FMCLVDS = _eapi.NB_FMCLVDS
FMCLVDSREV_A = _eapi.FMCLVDSREV_A
FMCLVDS_GROUP_0 = _eapi.FMCLVDS_GROUP_0
FMCLVDS_GROUP_1 = _eapi.FMCLVDS_GROUP_1
FMCLVDS_OUTPUT = _eapi.FMCLVDS_OUTPUT
FMCLVDS_INPUT = _eapi.FMCLVDS_INPUT
FMCLVDS_NONE = _eapi.FMCLVDS_NONE
FMCLVDS_32 = _eapi.FMCLVDS_32
FMCLVDS_64 = _eapi.FMCLVDS_64
FMCLVDS_CORENONE = _eapi.FMCLVDS_CORENONE
FMCLVDS_COREDETECTED = _eapi.FMCLVDS_COREDETECTED
class fmclvds(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fmclvds, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fmclvds, name)
    __repr__ = _swig_repr
    __swig_setmethods__["core"] = _eapi.fmclvds_core_set
    __swig_getmethods__["core"] = _eapi.fmclvds_core_get
    if _newclass:core = _swig_property(_eapi.fmclvds_core_get, _eapi.fmclvds_core_set)
    __swig_setmethods__["hCarrier"] = _eapi.fmclvds_hCarrier_set
    __swig_getmethods__["hCarrier"] = _eapi.fmclvds_hCarrier_get
    if _newclass:hCarrier = _swig_property(_eapi.fmclvds_hCarrier_get, _eapi.fmclvds_hCarrier_set)
    __swig_setmethods__["pos"] = _eapi.fmclvds_pos_set
    __swig_getmethods__["pos"] = _eapi.fmclvds_pos_get
    if _newclass:pos = _swig_property(_eapi.fmclvds_pos_get, _eapi.fmclvds_pos_set)
    __swig_setmethods__["com"] = _eapi.fmclvds_com_set
    __swig_getmethods__["com"] = _eapi.fmclvds_com_get
    if _newclass:com = _swig_property(_eapi.fmclvds_com_get, _eapi.fmclvds_com_set)
    def __init__(self): 
        this = _eapi.new_fmclvds()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_fmclvds
    __del__ = lambda self : None;
fmclvds_swigregister = _eapi.fmclvds_swigregister
fmclvds_swigregister(fmclvds)

FMCLVDSOK = _eapi.FMCLVDSOK
FMCLVDSIVAL = _eapi.FMCLVDSIVAL
FMCLVDSMMCRELEASE = _eapi.FMCLVDSMMCRELEASE
FMCLVDSMMCREQUEST = _eapi.FMCLVDSMMCREQUEST
FMCLVDSABSENT = _eapi.FMCLVDSABSENT
FMCLVDS_PCF8574_DEFAULT00 = _eapi.FMCLVDS_PCF8574_DEFAULT00
class FMCLVDS_pcf8574_core(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FMCLVDS_pcf8574_core, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FMCLVDS_pcf8574_core, name)
    __repr__ = _swig_repr
    __swig_setmethods__["com"] = _eapi.FMCLVDS_pcf8574_core_com_set
    __swig_getmethods__["com"] = _eapi.FMCLVDS_pcf8574_core_com_get
    if _newclass:com = _swig_property(_eapi.FMCLVDS_pcf8574_core_com_get, _eapi.FMCLVDS_pcf8574_core_com_set)
    __swig_setmethods__["regcache"] = _eapi.FMCLVDS_pcf8574_core_regcache_set
    __swig_getmethods__["regcache"] = _eapi.FMCLVDS_pcf8574_core_regcache_get
    if _newclass:regcache = _swig_property(_eapi.FMCLVDS_pcf8574_core_regcache_get, _eapi.FMCLVDS_pcf8574_core_regcache_set)
    def __init__(self): 
        this = _eapi.new_FMCLVDS_pcf8574_core()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_FMCLVDS_pcf8574_core
    __del__ = lambda self : None;
FMCLVDS_pcf8574_core_swigregister = _eapi.FMCLVDS_pcf8574_core_swigregister
FMCLVDS_pcf8574_core_swigregister(FMCLVDS_pcf8574_core)

FMCLVDS_PCF8574_CHANNELS0to7 = _eapi.FMCLVDS_PCF8574_CHANNELS0to7
FMCLVDS_PCF8574_CHANNELS8to15 = _eapi.FMCLVDS_PCF8574_CHANNELS8to15
FMCLVDS_PCF8574_CHANNELS16to23 = _eapi.FMCLVDS_PCF8574_CHANNELS16to23
FMCLVDS_PCF8574_CHANNELS24to31 = _eapi.FMCLVDS_PCF8574_CHANNELS24to31
FMCLVDS_PCF8574_00 = _eapi.FMCLVDS_PCF8574_00
FMCLVDS_PCF8574_PREEMPHASISOFF = _eapi.FMCLVDS_PCF8574_PREEMPHASISOFF
FMCLVDS_PCF8574_PREEMPHASISON = _eapi.FMCLVDS_PCF8574_PREEMPHASISON
FMCLVDS_PCF8574_POWERDOWN = _eapi.FMCLVDS_PCF8574_POWERDOWN
FMCLVDS_PCF8574_POWERUP = _eapi.FMCLVDS_PCF8574_POWERUP
FMCLVDS_PCF8574OK = _eapi.FMCLVDS_PCF8574OK

def lvds_presence_send(*args):
  return _eapi.lvds_presence_send(*args)
lvds_presence_send = _eapi.lvds_presence_send

def lvds_getmode_send(*args):
  return _eapi.lvds_getmode_send(*args)
lvds_getmode_send = _eapi.lvds_getmode_send

def lvds_setoutputenable_send(*args):
  return _eapi.lvds_setoutputenable_send(*args)
lvds_setoutputenable_send = _eapi.lvds_setoutputenable_send

def lvds_setvalue_send(*args):
  return _eapi.lvds_setvalue_send(*args)
lvds_setvalue_send = _eapi.lvds_setvalue_send

def lvds_getvalue_send(*args):
  return _eapi.lvds_getvalue_send(*args)
lvds_getvalue_send = _eapi.lvds_getvalue_send

def lvds_reset_send(*args):
  return _eapi.lvds_reset_send(*args)
lvds_reset_send = _eapi.lvds_reset_send

def lvds_reset_fifo_send(*args):
  return _eapi.lvds_reset_fifo_send(*args)
lvds_reset_fifo_send = _eapi.lvds_reset_fifo_send
LVDS_GPIO_CORE_ID = _eapi.LVDS_GPIO_CORE_ID
LVDS_SYNC_CORE_ID = _eapi.LVDS_SYNC_CORE_ID
LVDS_NONE = _eapi.LVDS_NONE
LVDS_GPIO = _eapi.LVDS_GPIO
LVDS_SYNC = _eapi.LVDS_SYNC
class lvds(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lvds, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lvds, name)
    __repr__ = _swig_repr
    __swig_setmethods__["core"] = _eapi.lvds_core_set
    __swig_getmethods__["core"] = _eapi.lvds_core_get
    if _newclass:core = _swig_property(_eapi.lvds_core_get, _eapi.lvds_core_set)
    __swig_setmethods__["mode"] = _eapi.lvds_mode_set
    __swig_getmethods__["mode"] = _eapi.lvds_mode_get
    if _newclass:mode = _swig_property(_eapi.lvds_mode_get, _eapi.lvds_mode_set)
    __swig_setmethods__["pfUsleep"] = _eapi.lvds_pfUsleep_set
    __swig_getmethods__["pfUsleep"] = _eapi.lvds_pfUsleep_get
    if _newclass:pfUsleep = _swig_property(_eapi.lvds_pfUsleep_get, _eapi.lvds_pfUsleep_set)
    def __init__(self): 
        this = _eapi.new_lvds()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_lvds
    __del__ = lambda self : None;
lvds_swigregister = _eapi.lvds_swigregister
lvds_swigregister(lvds)

LVDSOK = _eapi.LVDSOK
LVDSIVAL = _eapi.LVDSIVAL
LVDSABSENT = _eapi.LVDSABSENT
LVDSIMODE = _eapi.LVDSIMODE

def Sysmon_Read_send(*args):
  return _eapi.Sysmon_Read_send(*args)
Sysmon_Read_send = _eapi.Sysmon_Read_send
Sysmon_eTemp = _eapi.Sysmon_eTemp
Sysmon_eTempMin = _eapi.Sysmon_eTempMin
Sysmon_eTempMax = _eapi.Sysmon_eTempMax
Sysmon_eVint = _eapi.Sysmon_eVint
Sysmon_eVintMin = _eapi.Sysmon_eVintMin
Sysmon_eVintMax = _eapi.Sysmon_eVintMax
Sysmon_eVaux = _eapi.Sysmon_eVaux
Sysmon_eVauxMin = _eapi.Sysmon_eVauxMin
Sysmon_eVauxMax = _eapi.Sysmon_eVauxMax
SYSMON_TEMP_ADDR = _eapi.SYSMON_TEMP_ADDR
SYSMON_TEMP_MIN_ADDR = _eapi.SYSMON_TEMP_MIN_ADDR
SYSMON_TEMP_MAX_ADDR = _eapi.SYSMON_TEMP_MAX_ADDR
SYSMON_VINT_ADDR = _eapi.SYSMON_VINT_ADDR
SYSMON_VINT_MIN_ADDR = _eapi.SYSMON_VINT_MIN_ADDR
SYSMON_VINT_MAX_ADDR = _eapi.SYSMON_VINT_MAX_ADDR
SYSMON_VAUX_ADDR = _eapi.SYSMON_VAUX_ADDR
SYSMON_VAUX_MIN_ADDR = _eapi.SYSMON_VAUX_MIN_ADDR
SYSMON_VAUX_MAX_ADDR = _eapi.SYSMON_VAUX_MAX_ADDR

def Timestamp_Open(*args):
  return _eapi.Timestamp_Open(*args)
Timestamp_Open = _eapi.Timestamp_Open

def Timestamp_Close(*args):
  return _eapi.Timestamp_Close(*args)
Timestamp_Close = _eapi.Timestamp_Close

def Timestamp_Reset(*args):
  return _eapi.Timestamp_Reset(*args)
Timestamp_Reset = _eapi.Timestamp_Reset

def Timestamp_GetClkFreq(*args):
  return _eapi.Timestamp_GetClkFreq(*args)
Timestamp_GetClkFreq = _eapi.Timestamp_GetClkFreq

def Timestamp_ApplyHostTimeToDevice(*args):
  return _eapi.Timestamp_ApplyHostTimeToDevice(*args)
Timestamp_ApplyHostTimeToDevice = _eapi.Timestamp_ApplyHostTimeToDevice

def Timestamp_VerifyTime(*args):
  return _eapi.Timestamp_VerifyTime(*args)
Timestamp_VerifyTime = _eapi.Timestamp_VerifyTime

def Timestamp_SetDeviceTickTime(*args):
  return _eapi.Timestamp_SetDeviceTickTime(*args)
Timestamp_SetDeviceTickTime = _eapi.Timestamp_SetDeviceTickTime

def Timestamp_SetDevicePosixTime(*args):
  return _eapi.Timestamp_SetDevicePosixTime(*args)
Timestamp_SetDevicePosixTime = _eapi.Timestamp_SetDevicePosixTime

def Timestamp_SetDeviceReadableLocalTime(*args):
  return _eapi.Timestamp_SetDeviceReadableLocalTime(*args)
Timestamp_SetDeviceReadableLocalTime = _eapi.Timestamp_SetDeviceReadableLocalTime

def Timestamp_GetHostPosixTime(*args):
  return _eapi.Timestamp_GetHostPosixTime(*args)
Timestamp_GetHostPosixTime = _eapi.Timestamp_GetHostPosixTime

def Timestamp_GetHostReadableLocalTime(*args):
  return _eapi.Timestamp_GetHostReadableLocalTime(*args)
Timestamp_GetHostReadableLocalTime = _eapi.Timestamp_GetHostReadableLocalTime

def Timestamp_GetDeviceTickTime(*args):
  return _eapi.Timestamp_GetDeviceTickTime(*args)
Timestamp_GetDeviceTickTime = _eapi.Timestamp_GetDeviceTickTime

def Timestamp_GetDevicePosixTime(*args):
  return _eapi.Timestamp_GetDevicePosixTime(*args)
Timestamp_GetDevicePosixTime = _eapi.Timestamp_GetDevicePosixTime

def Timestamp_GetDeviceReadableLocalTime(*args):
  return _eapi.Timestamp_GetDeviceReadableLocalTime(*args)
Timestamp_GetDeviceReadableLocalTime = _eapi.Timestamp_GetDeviceReadableLocalTime

def Timestamp_PosixToReadableLocalTime(*args):
  return _eapi.Timestamp_PosixToReadableLocalTime(*args)
Timestamp_PosixToReadableLocalTime = _eapi.Timestamp_PosixToReadableLocalTime

def Timestamp_ReadableLocalTimeToPosix(*args):
  return _eapi.Timestamp_ReadableLocalTimeToPosix(*args)
Timestamp_ReadableLocalTimeToPosix = _eapi.Timestamp_ReadableLocalTimeToPosix

def Timestamp_PosixTimeToTick(*args):
  return _eapi.Timestamp_PosixTimeToTick(*args)
Timestamp_PosixTimeToTick = _eapi.Timestamp_PosixTimeToTick

def Timestamp_TickToPosixTime(*args):
  return _eapi.Timestamp_TickToPosixTime(*args)
Timestamp_TickToPosixTime = _eapi.Timestamp_TickToPosixTime

def Timestamp_Presence_send(*args):
  return _eapi.Timestamp_Presence_send(*args)
Timestamp_Presence_send = _eapi.Timestamp_Presence_send

def Timestamp_SetTime_send(*args):
  return _eapi.Timestamp_SetTime_send(*args)
Timestamp_SetTime_send = _eapi.Timestamp_SetTime_send

def Timestamp_GetTime_send(*args):
  return _eapi.Timestamp_GetTime_send(*args)
Timestamp_GetTime_send = _eapi.Timestamp_GetTime_send

def Timestamp_Reset_send(*args):
  return _eapi.Timestamp_Reset_send(*args)
Timestamp_Reset_send = _eapi.Timestamp_Reset_send
TIMESTAMPOK = _eapi.TIMESTAMPOK
TIMESTAMPABSENT = _eapi.TIMESTAMPABSENT
TIMESTAMPOUTOFMEMORY = _eapi.TIMESTAMPOUTOFMEMORY
TIMESTAMPINVHANDLE = _eapi.TIMESTAMPINVHANDLE
TIMESTAMPPPSABSENT = _eapi.TIMESTAMPPPSABSENT
TIMESTAMPOUTOFSYNC = _eapi.TIMESTAMPOUTOFSYNC
TIMESTAMPINVFREQ = _eapi.TIMESTAMPINVFREQ
TIMESTAMPINVARRAYLENGTH = _eapi.TIMESTAMPINVARRAYLENGTH
TIMESTAMPINVTIME = _eapi.TIMESTAMPINVTIME

def MI250_Select_send(*args):
  return _eapi.MI250_Select_send(*args)
MI250_Select_send = _eapi.MI250_Select_send

def MI250_Presence_send(*args):
  return _eapi.MI250_Presence_send(*args)
MI250_Presence_send = _eapi.MI250_Presence_send

def MI250_Powerup_send(*args):
  return _eapi.MI250_Powerup_send(*args)
MI250_Powerup_send = _eapi.MI250_Powerup_send

def MI250_Init_send(*args):
  return _eapi.MI250_Init_send(*args)
MI250_Init_send = _eapi.MI250_Init_send

def MI250_ReadSPIRegisters_send(*args):
  return _eapi.MI250_ReadSPIRegisters_send(*args)
MI250_ReadSPIRegisters_send = _eapi.MI250_ReadSPIRegisters_send

def MI250_WriteSPIRegisters_send(*args):
  return _eapi.MI250_WriteSPIRegisters_send(*args)
MI250_WriteSPIRegisters_send = _eapi.MI250_WriteSPIRegisters_send

def MI250_PLLConfig_send(*args):
  return _eapi.MI250_PLLConfig_send(*args)
MI250_PLLConfig_send = _eapi.MI250_PLLConfig_send

def MI250_PLLGetStatus_send(*args):
  return _eapi.MI250_PLLGetStatus_send(*args)
MI250_PLLGetStatus_send = _eapi.MI250_PLLGetStatus_send

def MI250_SetGain_send(*args):
  return _eapi.MI250_SetGain_send(*args)
MI250_SetGain_send = _eapi.MI250_SetGain_send

def MI250_SetFineGain_send(*args):
  return _eapi.MI250_SetFineGain_send(*args)
MI250_SetFineGain_send = _eapi.MI250_SetFineGain_send

def MI250_SetPedestal_send(*args):
  return _eapi.MI250_SetPedestal_send(*args)
MI250_SetPedestal_send = _eapi.MI250_SetPedestal_send

def MI250_ADCreset_send(*args):
  return _eapi.MI250_ADCreset_send(*args)
MI250_ADCreset_send = _eapi.MI250_ADCreset_send

def MI250_ADCarm_send(*args):
  return _eapi.MI250_ADCarm_send(*args)
MI250_ADCarm_send = _eapi.MI250_ADCarm_send

def MI250_SetDataFormat_send(*args):
  return _eapi.MI250_SetDataFormat_send(*args)
MI250_SetDataFormat_send = _eapi.MI250_SetDataFormat_send

def MI250_SetSleepMode_send(*args):
  return _eapi.MI250_SetSleepMode_send(*args)
MI250_SetSleepMode_send = _eapi.MI250_SetSleepMode_send

def MI250_SetOffsetCorrectionTime_send(*args):
  return _eapi.MI250_SetOffsetCorrectionTime_send(*args)
MI250_SetOffsetCorrectionTime_send = _eapi.MI250_SetOffsetCorrectionTime_send
class MI250_PLL_PARAM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250_PLL_PARAM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250_PLL_PARAM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Afactor"] = _eapi.MI250_PLL_PARAM_Afactor_set
    __swig_getmethods__["Afactor"] = _eapi.MI250_PLL_PARAM_Afactor_get
    if _newclass:Afactor = _swig_property(_eapi.MI250_PLL_PARAM_Afactor_get, _eapi.MI250_PLL_PARAM_Afactor_set)
    __swig_setmethods__["Bfactor"] = _eapi.MI250_PLL_PARAM_Bfactor_set
    __swig_getmethods__["Bfactor"] = _eapi.MI250_PLL_PARAM_Bfactor_get
    if _newclass:Bfactor = _swig_property(_eapi.MI250_PLL_PARAM_Bfactor_get, _eapi.MI250_PLL_PARAM_Bfactor_set)
    __swig_setmethods__["Rfactor"] = _eapi.MI250_PLL_PARAM_Rfactor_set
    __swig_getmethods__["Rfactor"] = _eapi.MI250_PLL_PARAM_Rfactor_get
    if _newclass:Rfactor = _swig_property(_eapi.MI250_PLL_PARAM_Rfactor_get, _eapi.MI250_PLL_PARAM_Rfactor_set)
    __swig_setmethods__["Pfactor"] = _eapi.MI250_PLL_PARAM_Pfactor_set
    __swig_getmethods__["Pfactor"] = _eapi.MI250_PLL_PARAM_Pfactor_get
    if _newclass:Pfactor = _swig_property(_eapi.MI250_PLL_PARAM_Pfactor_get, _eapi.MI250_PLL_PARAM_Pfactor_set)
    __swig_setmethods__["VCOFreq"] = _eapi.MI250_PLL_PARAM_VCOFreq_set
    __swig_getmethods__["VCOFreq"] = _eapi.MI250_PLL_PARAM_VCOFreq_get
    if _newclass:VCOFreq = _swig_property(_eapi.MI250_PLL_PARAM_VCOFreq_get, _eapi.MI250_PLL_PARAM_VCOFreq_set)
    __swig_setmethods__["pfdFreq"] = _eapi.MI250_PLL_PARAM_pfdFreq_set
    __swig_getmethods__["pfdFreq"] = _eapi.MI250_PLL_PARAM_pfdFreq_get
    if _newclass:pfdFreq = _swig_property(_eapi.MI250_PLL_PARAM_pfdFreq_get, _eapi.MI250_PLL_PARAM_pfdFreq_set)
    __swig_setmethods__["divisorADCClk"] = _eapi.MI250_PLL_PARAM_divisorADCClk_set
    __swig_getmethods__["divisorADCClk"] = _eapi.MI250_PLL_PARAM_divisorADCClk_get
    if _newclass:divisorADCClk = _swig_property(_eapi.MI250_PLL_PARAM_divisorADCClk_get, _eapi.MI250_PLL_PARAM_divisorADCClk_set)
    __swig_setmethods__["divisorClkOutClk"] = _eapi.MI250_PLL_PARAM_divisorClkOutClk_set
    __swig_getmethods__["divisorClkOutClk"] = _eapi.MI250_PLL_PARAM_divisorClkOutClk_get
    if _newclass:divisorClkOutClk = _swig_property(_eapi.MI250_PLL_PARAM_divisorClkOutClk_get, _eapi.MI250_PLL_PARAM_divisorClkOutClk_set)
    __swig_setmethods__["divisorRsvdClk"] = _eapi.MI250_PLL_PARAM_divisorRsvdClk_set
    __swig_getmethods__["divisorRsvdClk"] = _eapi.MI250_PLL_PARAM_divisorRsvdClk_get
    if _newclass:divisorRsvdClk = _swig_property(_eapi.MI250_PLL_PARAM_divisorRsvdClk_get, _eapi.MI250_PLL_PARAM_divisorRsvdClk_set)
    def __init__(self): 
        this = _eapi.new_MI250_PLL_PARAM()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250_PLL_PARAM
    __del__ = lambda self : None;
MI250_PLL_PARAM_swigregister = _eapi.MI250_PLL_PARAM_swigregister
MI250_PLL_PARAM_swigregister(MI250_PLL_PARAM)

class MI250_PLL_SLEEP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250_PLL_SLEEP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250_PLL_SLEEP, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _eapi.new_MI250_PLL_SLEEP()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250_PLL_SLEEP
    __del__ = lambda self : None;
MI250_PLL_SLEEP_swigregister = _eapi.MI250_PLL_SLEEP_swigregister
MI250_PLL_SLEEP_swigregister(MI250_PLL_SLEEP)

MI250_PLL_UNLOCKED = _eapi.MI250_PLL_UNLOCKED
MI250_PLL_LOCKED = _eapi.MI250_PLL_LOCKED
MI250_NOT_ARMED = _eapi.MI250_NOT_ARMED
MI250_ARMED = _eapi.MI250_ARMED
MI250_PLL_PHASE_NOISE = _eapi.MI250_PLL_PHASE_NOISE
MI250_PLL_DUTY_50 = _eapi.MI250_PLL_DUTY_50
MI250_ADC_TWOCMP = _eapi.MI250_ADC_TWOCMP
MI250_ADC_OFFSET = _eapi.MI250_ADC_OFFSET
MI250_ADC_NORMAL = _eapi.MI250_ADC_NORMAL
MI250_ADC_OUT2_DISABLED = _eapi.MI250_ADC_OUT2_DISABLED
MI250_ADC_OUT1_DISABLED = _eapi.MI250_ADC_OUT1_DISABLED
MI250_ADC_OUT12_DISABLED = _eapi.MI250_ADC_OUT12_DISABLED
MI250_ADC_GLOBALPOWERDN = _eapi.MI250_ADC_GLOBALPOWERDN
MI250_ADC_CHB_STANDBY = _eapi.MI250_ADC_CHB_STANDBY
MI250_ADC_CHA_STANDBY = _eapi.MI250_ADC_CHA_STANDBY
MI250_ADC_12 = _eapi.MI250_ADC_12
MI250_ADC_34 = _eapi.MI250_ADC_34
MI250_ADC_56 = _eapi.MI250_ADC_56
MI250_ADC_78 = _eapi.MI250_ADC_78
MI250_PLL = _eapi.MI250_PLL
MI250_ADC_CHANNEL_1 = _eapi.MI250_ADC_CHANNEL_1
MI250_ADC_CHANNEL_2 = _eapi.MI250_ADC_CHANNEL_2
MI250_ADC_OCT_256K = _eapi.MI250_ADC_OCT_256K
MI250_ADC_OCT_512K = _eapi.MI250_ADC_OCT_512K
MI250_ADC_OCT_1M = _eapi.MI250_ADC_OCT_1M
MI250_ADC_OCT_2M = _eapi.MI250_ADC_OCT_2M
MI250_ADC_OCT_4M = _eapi.MI250_ADC_OCT_4M
MI250_ADC_OCT_8M = _eapi.MI250_ADC_OCT_8M
MI250_ADC_OCT_16M = _eapi.MI250_ADC_OCT_16M
MI250_ADC_OCT_32M = _eapi.MI250_ADC_OCT_32M
MI250_ADC_OCT_64M = _eapi.MI250_ADC_OCT_64M
MI250_ADC_OCT_128M = _eapi.MI250_ADC_OCT_128M
MI250_ADC_OCT_256M = _eapi.MI250_ADC_OCT_256M
MI250_ADC_OCT_512M = _eapi.MI250_ADC_OCT_512M
MI250_ADC_OCT_NULL = _eapi.MI250_ADC_OCT_NULL
MI250_ADC_0_0dB = _eapi.MI250_ADC_0_0dB
MI250_ADC_0_5dB = _eapi.MI250_ADC_0_5dB
MI250_ADC_1_0dB = _eapi.MI250_ADC_1_0dB
MI250_ADC_1_5dB = _eapi.MI250_ADC_1_5dB
MI250_ADC_2_0dB = _eapi.MI250_ADC_2_0dB
MI250_ADC_2_5dB = _eapi.MI250_ADC_2_5dB
MI250_ADC_3_0dB = _eapi.MI250_ADC_3_0dB
MI250_ADC_3_5dB = _eapi.MI250_ADC_3_5dB
MI250_ADC_4_0dB = _eapi.MI250_ADC_4_0dB
MI250_ADC_4_5dB = _eapi.MI250_ADC_4_5dB
MI250_ADC_5_0dB = _eapi.MI250_ADC_5_0dB
MI250_ADC_5_5dB = _eapi.MI250_ADC_5_5dB
MI250_ADC_6_0dB = _eapi.MI250_ADC_6_0dB
MI250_MON_INTERNAL_TEMPERATURE = _eapi.MI250_MON_INTERNAL_TEMPERATURE
MI250_MON_EXTERNAL_TEMPERATURE = _eapi.MI250_MON_EXTERNAL_TEMPERATURE
MI250_MON_VDD = _eapi.MI250_MON_VDD
MI250_MON_AIN3 = _eapi.MI250_MON_AIN3
MI250_MON_AIN4 = _eapi.MI250_MON_AIN4
MI250_MON_AIN5 = _eapi.MI250_MON_AIN5
MI250_MON_AIN6 = _eapi.MI250_MON_AIN6
MI250_MON_AIN7 = _eapi.MI250_MON_AIN7
MI250_MON_AIN8 = _eapi.MI250_MON_AIN8
MI250_CLOCKIN_100MHZ = _eapi.MI250_CLOCKIN_100MHZ
MI250_CLOCKIN_EXTERNALREF = _eapi.MI250_CLOCKIN_EXTERNALREF
MI250_CLOCKIN_EXTERNALCLOCK = _eapi.MI250_CLOCKIN_EXTERNALCLOCK
MI250_COREIDVERS = _eapi.MI250_COREIDVERS
MI250_CORERESET = _eapi.MI250_CORERESET
MI250_ADC_CONTROL = _eapi.MI250_ADC_CONTROL
MI250_PLL_CONTROL = _eapi.MI250_PLL_CONTROL
MI250_SPIREG_CONTROL = _eapi.MI250_SPIREG_CONTROL
MI250_ADC_12_CONTROL = _eapi.MI250_ADC_12_CONTROL
MI250_ADC_34_CONTROL = _eapi.MI250_ADC_34_CONTROL
MI250_ADC_56_CONTROL = _eapi.MI250_ADC_56_CONTROL
MI250_ADC_78_CONTROL = _eapi.MI250_ADC_78_CONTROL
MI250_VOLT_MON_CONTROL = _eapi.MI250_VOLT_MON_CONTROL
MI250_PLL_CLK_FREQ = _eapi.MI250_PLL_CLK_FREQ
MI250_ADC_1234_CLK_FREQ = _eapi.MI250_ADC_1234_CLK_FREQ
MI250_ADC_5678_CLK_FREQ = _eapi.MI250_ADC_5678_CLK_FREQ
MI250_ADC_BURST_SIZE = _eapi.MI250_ADC_BURST_SIZE
MI250_ADC_NB_BURST = _eapi.MI250_ADC_NB_BURST
MI250_ADC_INTERVAL = _eapi.MI250_ADC_INTERVAL
class MI250Adaptator_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250Adaptator_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250Adaptator_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["SPIDevice"] = _eapi.MI250Adaptator_t_SPIDevice_set
    __swig_getmethods__["SPIDevice"] = _eapi.MI250Adaptator_t_SPIDevice_get
    if _newclass:SPIDevice = _swig_property(_eapi.MI250Adaptator_t_SPIDevice_get, _eapi.MI250Adaptator_t_SPIDevice_set)
    __swig_getmethods__["Core_ID_Vers"] = _eapi.MI250Adaptator_t_Core_ID_Vers_get
    if _newclass:Core_ID_Vers = _swig_property(_eapi.MI250Adaptator_t_Core_ID_Vers_get)
    __swig_getmethods__["Core_Reset"] = _eapi.MI250Adaptator_t_Core_Reset_get
    if _newclass:Core_Reset = _swig_property(_eapi.MI250Adaptator_t_Core_Reset_get)
    __swig_getmethods__["ADC_Control"] = _eapi.MI250Adaptator_t_ADC_Control_get
    if _newclass:ADC_Control = _swig_property(_eapi.MI250Adaptator_t_ADC_Control_get)
    __swig_getmethods__["Pll_Control"] = _eapi.MI250Adaptator_t_Pll_Control_get
    if _newclass:Pll_Control = _swig_property(_eapi.MI250Adaptator_t_Pll_Control_get)
    __swig_getmethods__["SpiReg_Control"] = _eapi.MI250Adaptator_t_SpiReg_Control_get
    if _newclass:SpiReg_Control = _swig_property(_eapi.MI250Adaptator_t_SpiReg_Control_get)
    __swig_getmethods__["ADC_12_Control"] = _eapi.MI250Adaptator_t_ADC_12_Control_get
    if _newclass:ADC_12_Control = _swig_property(_eapi.MI250Adaptator_t_ADC_12_Control_get)
    __swig_getmethods__["ADC_34_Control"] = _eapi.MI250Adaptator_t_ADC_34_Control_get
    if _newclass:ADC_34_Control = _swig_property(_eapi.MI250Adaptator_t_ADC_34_Control_get)
    __swig_getmethods__["ADC_56_Control"] = _eapi.MI250Adaptator_t_ADC_56_Control_get
    if _newclass:ADC_56_Control = _swig_property(_eapi.MI250Adaptator_t_ADC_56_Control_get)
    __swig_getmethods__["ADC_78_Control"] = _eapi.MI250Adaptator_t_ADC_78_Control_get
    if _newclass:ADC_78_Control = _swig_property(_eapi.MI250Adaptator_t_ADC_78_Control_get)
    __swig_getmethods__["VoltMon_Control"] = _eapi.MI250Adaptator_t_VoltMon_Control_get
    if _newclass:VoltMon_Control = _swig_property(_eapi.MI250Adaptator_t_VoltMon_Control_get)
    __swig_getmethods__["Pll_ClockFreq"] = _eapi.MI250Adaptator_t_Pll_ClockFreq_get
    if _newclass:Pll_ClockFreq = _swig_property(_eapi.MI250Adaptator_t_Pll_ClockFreq_get)
    __swig_getmethods__["ADC_1234_ClkFreq"] = _eapi.MI250Adaptator_t_ADC_1234_ClkFreq_get
    if _newclass:ADC_1234_ClkFreq = _swig_property(_eapi.MI250Adaptator_t_ADC_1234_ClkFreq_get)
    __swig_getmethods__["ADC_5678_ClkFreq"] = _eapi.MI250Adaptator_t_ADC_5678_ClkFreq_get
    if _newclass:ADC_5678_ClkFreq = _swig_property(_eapi.MI250Adaptator_t_ADC_5678_ClkFreq_get)
    __swig_getmethods__["ADC_BurstSize"] = _eapi.MI250Adaptator_t_ADC_BurstSize_get
    if _newclass:ADC_BurstSize = _swig_property(_eapi.MI250Adaptator_t_ADC_BurstSize_get)
    __swig_getmethods__["ADC_NbBurst"] = _eapi.MI250Adaptator_t_ADC_NbBurst_get
    if _newclass:ADC_NbBurst = _swig_property(_eapi.MI250Adaptator_t_ADC_NbBurst_get)
    __swig_getmethods__["ADC_Interval"] = _eapi.MI250Adaptator_t_ADC_Interval_get
    if _newclass:ADC_Interval = _swig_property(_eapi.MI250Adaptator_t_ADC_Interval_get)
    def __init__(self): 
        this = _eapi.new_MI250Adaptator_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250Adaptator_t
    __del__ = lambda self : None;
MI250Adaptator_t_swigregister = _eapi.MI250Adaptator_t_swigregister
MI250Adaptator_t_swigregister(MI250Adaptator_t)

class MI250Adaptator_t_ADC_Interval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250Adaptator_t_ADC_Interval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250Adaptator_t_ADC_Interval, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_Interval_Register_set
    __swig_getmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_Interval_Register_get
    if _newclass:Register = _swig_property(_eapi.MI250Adaptator_t_ADC_Interval_Register_get, _eapi.MI250Adaptator_t_ADC_Interval_Register_set)
    def __init__(self): 
        this = _eapi.new_MI250Adaptator_t_ADC_Interval()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250Adaptator_t_ADC_Interval
    __del__ = lambda self : None;
MI250Adaptator_t_ADC_Interval_swigregister = _eapi.MI250Adaptator_t_ADC_Interval_swigregister
MI250Adaptator_t_ADC_Interval_swigregister(MI250Adaptator_t_ADC_Interval)

class MI250Adaptator_t_ADC_NbBurst(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250Adaptator_t_ADC_NbBurst, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250Adaptator_t_ADC_NbBurst, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_NbBurst_Register_set
    __swig_getmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_NbBurst_Register_get
    if _newclass:Register = _swig_property(_eapi.MI250Adaptator_t_ADC_NbBurst_Register_get, _eapi.MI250Adaptator_t_ADC_NbBurst_Register_set)
    def __init__(self): 
        this = _eapi.new_MI250Adaptator_t_ADC_NbBurst()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250Adaptator_t_ADC_NbBurst
    __del__ = lambda self : None;
MI250Adaptator_t_ADC_NbBurst_swigregister = _eapi.MI250Adaptator_t_ADC_NbBurst_swigregister
MI250Adaptator_t_ADC_NbBurst_swigregister(MI250Adaptator_t_ADC_NbBurst)

class MI250Adaptator_t_ADC_BurstSize(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250Adaptator_t_ADC_BurstSize, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250Adaptator_t_ADC_BurstSize, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_BurstSize_Register_set
    __swig_getmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_BurstSize_Register_get
    if _newclass:Register = _swig_property(_eapi.MI250Adaptator_t_ADC_BurstSize_Register_get, _eapi.MI250Adaptator_t_ADC_BurstSize_Register_set)
    def __init__(self): 
        this = _eapi.new_MI250Adaptator_t_ADC_BurstSize()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250Adaptator_t_ADC_BurstSize
    __del__ = lambda self : None;
MI250Adaptator_t_ADC_BurstSize_swigregister = _eapi.MI250Adaptator_t_ADC_BurstSize_swigregister
MI250Adaptator_t_ADC_BurstSize_swigregister(MI250Adaptator_t_ADC_BurstSize)

class MI250Adaptator_t_ADC_5678_ClkFreq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250Adaptator_t_ADC_5678_ClkFreq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250Adaptator_t_ADC_5678_ClkFreq, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_5678_ClkFreq_Register_set
    __swig_getmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_5678_ClkFreq_Register_get
    if _newclass:Register = _swig_property(_eapi.MI250Adaptator_t_ADC_5678_ClkFreq_Register_get, _eapi.MI250Adaptator_t_ADC_5678_ClkFreq_Register_set)
    def __init__(self): 
        this = _eapi.new_MI250Adaptator_t_ADC_5678_ClkFreq()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250Adaptator_t_ADC_5678_ClkFreq
    __del__ = lambda self : None;
MI250Adaptator_t_ADC_5678_ClkFreq_swigregister = _eapi.MI250Adaptator_t_ADC_5678_ClkFreq_swigregister
MI250Adaptator_t_ADC_5678_ClkFreq_swigregister(MI250Adaptator_t_ADC_5678_ClkFreq)

class MI250Adaptator_t_ADC_1234_ClkFreq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250Adaptator_t_ADC_1234_ClkFreq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250Adaptator_t_ADC_1234_ClkFreq, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_1234_ClkFreq_Register_set
    __swig_getmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_1234_ClkFreq_Register_get
    if _newclass:Register = _swig_property(_eapi.MI250Adaptator_t_ADC_1234_ClkFreq_Register_get, _eapi.MI250Adaptator_t_ADC_1234_ClkFreq_Register_set)
    def __init__(self): 
        this = _eapi.new_MI250Adaptator_t_ADC_1234_ClkFreq()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250Adaptator_t_ADC_1234_ClkFreq
    __del__ = lambda self : None;
MI250Adaptator_t_ADC_1234_ClkFreq_swigregister = _eapi.MI250Adaptator_t_ADC_1234_ClkFreq_swigregister
MI250Adaptator_t_ADC_1234_ClkFreq_swigregister(MI250Adaptator_t_ADC_1234_ClkFreq)

class MI250Adaptator_t_Pll_ClockFreq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250Adaptator_t_Pll_ClockFreq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250Adaptator_t_Pll_ClockFreq, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Register"] = _eapi.MI250Adaptator_t_Pll_ClockFreq_Register_set
    __swig_getmethods__["Register"] = _eapi.MI250Adaptator_t_Pll_ClockFreq_Register_get
    if _newclass:Register = _swig_property(_eapi.MI250Adaptator_t_Pll_ClockFreq_Register_get, _eapi.MI250Adaptator_t_Pll_ClockFreq_Register_set)
    def __init__(self): 
        this = _eapi.new_MI250Adaptator_t_Pll_ClockFreq()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250Adaptator_t_Pll_ClockFreq
    __del__ = lambda self : None;
MI250Adaptator_t_Pll_ClockFreq_swigregister = _eapi.MI250Adaptator_t_Pll_ClockFreq_swigregister
MI250Adaptator_t_Pll_ClockFreq_swigregister(MI250Adaptator_t_Pll_ClockFreq)

class MI250Adaptator_t_VoltMon_Control(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250Adaptator_t_VoltMon_Control, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250Adaptator_t_VoltMon_Control, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Register"] = _eapi.MI250Adaptator_t_VoltMon_Control_Register_set
    __swig_getmethods__["Register"] = _eapi.MI250Adaptator_t_VoltMon_Control_Register_get
    if _newclass:Register = _swig_property(_eapi.MI250Adaptator_t_VoltMon_Control_Register_get, _eapi.MI250Adaptator_t_VoltMon_Control_Register_set)
    def __init__(self): 
        this = _eapi.new_MI250Adaptator_t_VoltMon_Control()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250Adaptator_t_VoltMon_Control
    __del__ = lambda self : None;
MI250Adaptator_t_VoltMon_Control_swigregister = _eapi.MI250Adaptator_t_VoltMon_Control_swigregister
MI250Adaptator_t_VoltMon_Control_swigregister(MI250Adaptator_t_VoltMon_Control)

class MI250Adaptator_t_ADC_78_Control(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250Adaptator_t_ADC_78_Control, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250Adaptator_t_ADC_78_Control, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_78_Control_Register_set
    __swig_getmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_78_Control_Register_get
    if _newclass:Register = _swig_property(_eapi.MI250Adaptator_t_ADC_78_Control_Register_get, _eapi.MI250Adaptator_t_ADC_78_Control_Register_set)
    def __init__(self): 
        this = _eapi.new_MI250Adaptator_t_ADC_78_Control()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250Adaptator_t_ADC_78_Control
    __del__ = lambda self : None;
MI250Adaptator_t_ADC_78_Control_swigregister = _eapi.MI250Adaptator_t_ADC_78_Control_swigregister
MI250Adaptator_t_ADC_78_Control_swigregister(MI250Adaptator_t_ADC_78_Control)

class MI250Adaptator_t_ADC_56_Control(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250Adaptator_t_ADC_56_Control, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250Adaptator_t_ADC_56_Control, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_56_Control_Register_set
    __swig_getmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_56_Control_Register_get
    if _newclass:Register = _swig_property(_eapi.MI250Adaptator_t_ADC_56_Control_Register_get, _eapi.MI250Adaptator_t_ADC_56_Control_Register_set)
    def __init__(self): 
        this = _eapi.new_MI250Adaptator_t_ADC_56_Control()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250Adaptator_t_ADC_56_Control
    __del__ = lambda self : None;
MI250Adaptator_t_ADC_56_Control_swigregister = _eapi.MI250Adaptator_t_ADC_56_Control_swigregister
MI250Adaptator_t_ADC_56_Control_swigregister(MI250Adaptator_t_ADC_56_Control)

class MI250Adaptator_t_ADC_34_Control(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250Adaptator_t_ADC_34_Control, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250Adaptator_t_ADC_34_Control, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_34_Control_Register_set
    __swig_getmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_34_Control_Register_get
    if _newclass:Register = _swig_property(_eapi.MI250Adaptator_t_ADC_34_Control_Register_get, _eapi.MI250Adaptator_t_ADC_34_Control_Register_set)
    def __init__(self): 
        this = _eapi.new_MI250Adaptator_t_ADC_34_Control()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250Adaptator_t_ADC_34_Control
    __del__ = lambda self : None;
MI250Adaptator_t_ADC_34_Control_swigregister = _eapi.MI250Adaptator_t_ADC_34_Control_swigregister
MI250Adaptator_t_ADC_34_Control_swigregister(MI250Adaptator_t_ADC_34_Control)

class MI250Adaptator_t_ADC_12_Control(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250Adaptator_t_ADC_12_Control, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250Adaptator_t_ADC_12_Control, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_12_Control_Register_set
    __swig_getmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_12_Control_Register_get
    if _newclass:Register = _swig_property(_eapi.MI250Adaptator_t_ADC_12_Control_Register_get, _eapi.MI250Adaptator_t_ADC_12_Control_Register_set)
    def __init__(self): 
        this = _eapi.new_MI250Adaptator_t_ADC_12_Control()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250Adaptator_t_ADC_12_Control
    __del__ = lambda self : None;
MI250Adaptator_t_ADC_12_Control_swigregister = _eapi.MI250Adaptator_t_ADC_12_Control_swigregister
MI250Adaptator_t_ADC_12_Control_swigregister(MI250Adaptator_t_ADC_12_Control)

class MI250Adaptator_t_SpiReg_Control(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250Adaptator_t_SpiReg_Control, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250Adaptator_t_SpiReg_Control, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Register"] = _eapi.MI250Adaptator_t_SpiReg_Control_Register_set
    __swig_getmethods__["Register"] = _eapi.MI250Adaptator_t_SpiReg_Control_Register_get
    if _newclass:Register = _swig_property(_eapi.MI250Adaptator_t_SpiReg_Control_Register_get, _eapi.MI250Adaptator_t_SpiReg_Control_Register_set)
    def __init__(self): 
        this = _eapi.new_MI250Adaptator_t_SpiReg_Control()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250Adaptator_t_SpiReg_Control
    __del__ = lambda self : None;
MI250Adaptator_t_SpiReg_Control_swigregister = _eapi.MI250Adaptator_t_SpiReg_Control_swigregister
MI250Adaptator_t_SpiReg_Control_swigregister(MI250Adaptator_t_SpiReg_Control)

class MI250Adaptator_t_Pll_Control(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250Adaptator_t_Pll_Control, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250Adaptator_t_Pll_Control, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Register"] = _eapi.MI250Adaptator_t_Pll_Control_Register_set
    __swig_getmethods__["Register"] = _eapi.MI250Adaptator_t_Pll_Control_Register_get
    if _newclass:Register = _swig_property(_eapi.MI250Adaptator_t_Pll_Control_Register_get, _eapi.MI250Adaptator_t_Pll_Control_Register_set)
    def __init__(self): 
        this = _eapi.new_MI250Adaptator_t_Pll_Control()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250Adaptator_t_Pll_Control
    __del__ = lambda self : None;
MI250Adaptator_t_Pll_Control_swigregister = _eapi.MI250Adaptator_t_Pll_Control_swigregister
MI250Adaptator_t_Pll_Control_swigregister(MI250Adaptator_t_Pll_Control)

class MI250Adaptator_t_ADC_Control(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250Adaptator_t_ADC_Control, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250Adaptator_t_ADC_Control, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_Control_Register_set
    __swig_getmethods__["Register"] = _eapi.MI250Adaptator_t_ADC_Control_Register_get
    if _newclass:Register = _swig_property(_eapi.MI250Adaptator_t_ADC_Control_Register_get, _eapi.MI250Adaptator_t_ADC_Control_Register_set)
    def __init__(self): 
        this = _eapi.new_MI250Adaptator_t_ADC_Control()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250Adaptator_t_ADC_Control
    __del__ = lambda self : None;
MI250Adaptator_t_ADC_Control_swigregister = _eapi.MI250Adaptator_t_ADC_Control_swigregister
MI250Adaptator_t_ADC_Control_swigregister(MI250Adaptator_t_ADC_Control)

class MI250Adaptator_t_Core_Reset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250Adaptator_t_Core_Reset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250Adaptator_t_Core_Reset, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Register"] = _eapi.MI250Adaptator_t_Core_Reset_Register_set
    __swig_getmethods__["Register"] = _eapi.MI250Adaptator_t_Core_Reset_Register_get
    if _newclass:Register = _swig_property(_eapi.MI250Adaptator_t_Core_Reset_Register_get, _eapi.MI250Adaptator_t_Core_Reset_Register_set)
    def __init__(self): 
        this = _eapi.new_MI250Adaptator_t_Core_Reset()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250Adaptator_t_Core_Reset
    __del__ = lambda self : None;
MI250Adaptator_t_Core_Reset_swigregister = _eapi.MI250Adaptator_t_Core_Reset_swigregister
MI250Adaptator_t_Core_Reset_swigregister(MI250Adaptator_t_Core_Reset)

class MI250Adaptator_t_Core_ID_Vers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250Adaptator_t_Core_ID_Vers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250Adaptator_t_Core_ID_Vers, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Register"] = _eapi.MI250Adaptator_t_Core_ID_Vers_Register_set
    __swig_getmethods__["Register"] = _eapi.MI250Adaptator_t_Core_ID_Vers_Register_get
    if _newclass:Register = _swig_property(_eapi.MI250Adaptator_t_Core_ID_Vers_Register_get, _eapi.MI250Adaptator_t_Core_ID_Vers_Register_set)
    def __init__(self): 
        this = _eapi.new_MI250Adaptator_t_Core_ID_Vers()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250Adaptator_t_Core_ID_Vers
    __del__ = lambda self : None;
MI250Adaptator_t_Core_ID_Vers_swigregister = _eapi.MI250Adaptator_t_Core_ID_Vers_swigregister
MI250Adaptator_t_Core_ID_Vers_swigregister(MI250Adaptator_t_Core_ID_Vers)

class sCalibResult_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sCalibResult_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sCalibResult_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cRefIdelayMiddle"] = _eapi.sCalibResult_t_cRefIdelayMiddle_set
    __swig_getmethods__["cRefIdelayMiddle"] = _eapi.sCalibResult_t_cRefIdelayMiddle_get
    if _newclass:cRefIdelayMiddle = _swig_property(_eapi.sCalibResult_t_cRefIdelayMiddle_get, _eapi.sCalibResult_t_cRefIdelayMiddle_set)
    __swig_setmethods__["cRefIdelayWidth"] = _eapi.sCalibResult_t_cRefIdelayWidth_set
    __swig_getmethods__["cRefIdelayWidth"] = _eapi.sCalibResult_t_cRefIdelayWidth_get
    if _newclass:cRefIdelayWidth = _swig_property(_eapi.sCalibResult_t_cRefIdelayWidth_get, _eapi.sCalibResult_t_cRefIdelayWidth_set)
    __swig_setmethods__["cRefBitSlip"] = _eapi.sCalibResult_t_cRefBitSlip_set
    __swig_getmethods__["cRefBitSlip"] = _eapi.sCalibResult_t_cRefBitSlip_get
    if _newclass:cRefBitSlip = _swig_property(_eapi.sCalibResult_t_cRefBitSlip_get, _eapi.sCalibResult_t_cRefBitSlip_set)
    __swig_setmethods__["cSucceeded"] = _eapi.sCalibResult_t_cSucceeded_set
    __swig_getmethods__["cSucceeded"] = _eapi.sCalibResult_t_cSucceeded_get
    if _newclass:cSucceeded = _swig_property(_eapi.sCalibResult_t_cSucceeded_get, _eapi.sCalibResult_t_cSucceeded_set)
    __swig_setmethods__["usRefLaneDelay"] = _eapi.sCalibResult_t_usRefLaneDelay_set
    __swig_getmethods__["usRefLaneDelay"] = _eapi.sCalibResult_t_usRefLaneDelay_get
    if _newclass:usRefLaneDelay = _swig_property(_eapi.sCalibResult_t_usRefLaneDelay_get, _eapi.sCalibResult_t_usRefLaneDelay_set)
    def __init__(self): 
        this = _eapi.new_sCalibResult_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_sCalibResult_t
    __del__ = lambda self : None;
sCalibResult_t_swigregister = _eapi.sCalibResult_t_swigregister
sCalibResult_t_swigregister(sCalibResult_t)

class MI250Board_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI250Board_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI250Board_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BaseAdd"] = _eapi.MI250Board_t_BaseAdd_set
    __swig_getmethods__["BaseAdd"] = _eapi.MI250Board_t_BaseAdd_get
    if _newclass:BaseAdd = _swig_property(_eapi.MI250Board_t_BaseAdd_get, _eapi.MI250Board_t_BaseAdd_set)
    __swig_setmethods__["Device"] = _eapi.MI250Board_t_Device_set
    __swig_getmethods__["Device"] = _eapi.MI250Board_t_Device_get
    if _newclass:Device = _swig_property(_eapi.MI250Board_t_Device_get, _eapi.MI250Board_t_Device_set)
    __swig_setmethods__["Adaptor"] = _eapi.MI250Board_t_Adaptor_set
    __swig_getmethods__["Adaptor"] = _eapi.MI250Board_t_Adaptor_get
    if _newclass:Adaptor = _swig_property(_eapi.MI250Board_t_Adaptor_get, _eapi.MI250Board_t_Adaptor_set)
    __swig_setmethods__["SPI_Transport"] = _eapi.MI250Board_t_SPI_Transport_set
    __swig_getmethods__["SPI_Transport"] = _eapi.MI250Board_t_SPI_Transport_get
    if _newclass:SPI_Transport = _swig_property(_eapi.MI250Board_t_SPI_Transport_get, _eapi.MI250Board_t_SPI_Transport_set)
    __swig_setmethods__["pfUsleep"] = _eapi.MI250Board_t_pfUsleep_set
    __swig_getmethods__["pfUsleep"] = _eapi.MI250Board_t_pfUsleep_get
    if _newclass:pfUsleep = _swig_property(_eapi.MI250Board_t_pfUsleep_get, _eapi.MI250Board_t_pfUsleep_set)
    __swig_setmethods__["CalibResult"] = _eapi.MI250Board_t_CalibResult_set
    __swig_getmethods__["CalibResult"] = _eapi.MI250Board_t_CalibResult_get
    if _newclass:CalibResult = _swig_property(_eapi.MI250Board_t_CalibResult_get, _eapi.MI250Board_t_CalibResult_set)
    __swig_setmethods__["pMasterCalibResult"] = _eapi.MI250Board_t_pMasterCalibResult_set
    __swig_getmethods__["pMasterCalibResult"] = _eapi.MI250Board_t_pMasterCalibResult_get
    if _newclass:pMasterCalibResult = _swig_property(_eapi.MI250Board_t_pMasterCalibResult_get, _eapi.MI250Board_t_pMasterCalibResult_set)
    __swig_setmethods__["pLaneDelay"] = _eapi.MI250Board_t_pLaneDelay_set
    __swig_getmethods__["pLaneDelay"] = _eapi.MI250Board_t_pLaneDelay_get
    if _newclass:pLaneDelay = _swig_property(_eapi.MI250Board_t_pLaneDelay_get, _eapi.MI250Board_t_pLaneDelay_set)
    def __init__(self): 
        this = _eapi.new_MI250Board_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI250Board_t
    __del__ = lambda self : None;
MI250Board_t_swigregister = _eapi.MI250Board_t_swigregister
MI250Board_t_swigregister(MI250Board_t)


def MI125_Presence_send(*args):
  return _eapi.MI125_Presence_send(*args)
MI125_Presence_send = _eapi.MI125_Presence_send

def MI125_powerup_send(*args):
  return _eapi.MI125_powerup_send(*args)
MI125_powerup_send = _eapi.MI125_powerup_send

def MI125_mi125_reset_send(*args):
  return _eapi.MI125_mi125_reset_send(*args)
MI125_mi125_reset_send = _eapi.MI125_mi125_reset_send

def MI125_mi125_digital_adccalibration_send(*args):
  return _eapi.MI125_mi125_digital_adccalibration_send(*args)
MI125_mi125_digital_adccalibration_send = _eapi.MI125_mi125_digital_adccalibration_send

def MI125_mi125_set_config_send(*args):
  return _eapi.MI125_mi125_set_config_send(*args)
MI125_mi125_set_config_send = _eapi.MI125_mi125_set_config_send

def MI125_mi125_set_clksrc_send(*args):
  return _eapi.MI125_mi125_set_clksrc_send(*args)
MI125_mi125_set_clksrc_send = _eapi.MI125_mi125_set_clksrc_send

def MI125_mi125_checkcore_send(*args):
  return _eapi.MI125_mi125_checkcore_send(*args)
MI125_mi125_checkcore_send = _eapi.MI125_mi125_checkcore_send

def MI125_mi125_set_testmode_send(*args):
  return _eapi.MI125_mi125_set_testmode_send(*args)
MI125_mi125_set_testmode_send = _eapi.MI125_mi125_set_testmode_send

def MI125_mi125_get_temperature_send(*args):
  return _eapi.MI125_mi125_get_temperature_send(*args)
MI125_mi125_get_temperature_send = _eapi.MI125_mi125_get_temperature_send

def MI125_mi125_get_channelcalibstatus_send(*args):
  return _eapi.MI125_mi125_get_channelcalibstatus_send(*args)
MI125_mi125_get_channelcalibstatus_send = _eapi.MI125_mi125_get_channelcalibstatus_send

def MI125_mi125_get_versions_send(*args):
  return _eapi.MI125_mi125_get_versions_send(*args)
MI125_mi125_get_versions_send = _eapi.MI125_mi125_get_versions_send

def MI125_mi125_checkadc_send(*args):
  return _eapi.MI125_mi125_checkadc_send(*args)
MI125_mi125_checkadc_send = _eapi.MI125_mi125_checkadc_send

def MI125_mi125_set_trigout_send(*args):
  return _eapi.MI125_mi125_set_trigout_send(*args)
MI125_mi125_set_trigout_send = _eapi.MI125_mi125_set_trigout_send

def MI125_mi125_get_clkmaster_send(*args):
  return _eapi.MI125_mi125_get_clkmaster_send(*args)
MI125_mi125_get_clkmaster_send = _eapi.MI125_mi125_get_clkmaster_send

def MI125_mi125_clockreset_send(*args):
  return _eapi.MI125_mi125_clockreset_send(*args)
MI125_mi125_clockreset_send = _eapi.MI125_mi125_clockreset_send

def MI125_mi125_scan_i2c_send(*args):
  return _eapi.MI125_mi125_scan_i2c_send(*args)
MI125_mi125_scan_i2c_send = _eapi.MI125_mi125_scan_i2c_send

def MI125_mi125_test_localoscsw_send(*args):
  return _eapi.MI125_mi125_test_localoscsw_send(*args)
MI125_mi125_test_localoscsw_send = _eapi.MI125_mi125_test_localoscsw_send
MI125_MAX_CALIB_ATTEMPT = _eapi.MI125_MAX_CALIB_ATTEMPT
MI125_I2SCAN_MAX_DEV = _eapi.MI125_I2SCAN_MAX_DEV
MI125_BOTTOM = _eapi.MI125_BOTTOM
MI125_TOP = _eapi.MI125_TOP
MI125_CLKSRC125MHZ = _eapi.MI125_CLKSRC125MHZ
MI125_CLKSRCEXT = _eapi.MI125_CLKSRCEXT
MI125_CLKSRCBOTTOMFMC = _eapi.MI125_CLKSRCBOTTOMFMC
MI125_CLKSRCFMCCARRIER = _eapi.MI125_CLKSRCFMCCARRIER
MI125_REF300MHZ = _eapi.MI125_REF300MHZ
MI125_REF200MHZ = _eapi.MI125_REF200MHZ
MI125_TRIGOUTON = _eapi.MI125_TRIGOUTON
MI125_TRIGOUTOFF = _eapi.MI125_TRIGOUTOFF
MI125_TEMP1C = _eapi.MI125_TEMP1C
MI125_TEMP0DOT1C = _eapi.MI125_TEMP0DOT1C
MI125_ADC0 = _eapi.MI125_ADC0
MI125_ADC1 = _eapi.MI125_ADC1
MI125_ADC2 = _eapi.MI125_ADC2
MI125_ADC3 = _eapi.MI125_ADC3
MI125_04CHANNELS = _eapi.MI125_04CHANNELS
MI125_08CHANNELS = _eapi.MI125_08CHANNELS
MI125_12CHANNELS = _eapi.MI125_12CHANNELS
MI125_16CHANNELS = _eapi.MI125_16CHANNELS
MI125_RANDOMIZEOFF = _eapi.MI125_RANDOMIZEOFF
MI125_RANDOMIZEON = _eapi.MI125_RANDOMIZEON
MI125_OFFSETBINARYFORMAT = _eapi.MI125_OFFSETBINARYFORMAT
MI125_TWOCOMPLEMENTFORMAT = _eapi.MI125_TWOCOMPLEMENTFORMAT
MI125_TERMOFF1750UA = _eapi.MI125_TERMOFF1750UA
MI125_TERMOFF2100UA = _eapi.MI125_TERMOFF2100UA
MI125_TERMOFF2500UA = _eapi.MI125_TERMOFF2500UA
MI125_TERMOFF3000UA = _eapi.MI125_TERMOFF3000UA
MI125_TERMOFF3500UA = _eapi.MI125_TERMOFF3500UA
MI125_TERMOFF4000UA = _eapi.MI125_TERMOFF4000UA
MI125_TERMOFF4500UA = _eapi.MI125_TERMOFF4500UA
MI125_TERMON1750UA = _eapi.MI125_TERMON1750UA
MI125_TERMON2100UA = _eapi.MI125_TERMON2100UA
MI125_TERMON2500UA = _eapi.MI125_TERMON2500UA
MI125_TESTMODEOFF = _eapi.MI125_TESTMODEOFF
MI125_TESTMODE1 = _eapi.MI125_TESTMODE1
MI125_TESTMODE2 = _eapi.MI125_TESTMODE2
class MI125_mi125_config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI125_mi125_config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI125_mi125_config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["groupch"] = _eapi.MI125_mi125_config_groupch_set
    __swig_getmethods__["groupch"] = _eapi.MI125_mi125_config_groupch_get
    if _newclass:groupch = _swig_property(_eapi.MI125_mi125_config_groupch_get, _eapi.MI125_mi125_config_groupch_set)
    __swig_setmethods__["lvds"] = _eapi.MI125_mi125_config_lvds_set
    __swig_getmethods__["lvds"] = _eapi.MI125_mi125_config_lvds_get
    if _newclass:lvds = _swig_property(_eapi.MI125_mi125_config_lvds_get, _eapi.MI125_mi125_config_lvds_set)
    __swig_setmethods__["randmode"] = _eapi.MI125_mi125_config_randmode_set
    __swig_getmethods__["randmode"] = _eapi.MI125_mi125_config_randmode_get
    if _newclass:randmode = _swig_property(_eapi.MI125_mi125_config_randmode_get, _eapi.MI125_mi125_config_randmode_set)
    __swig_setmethods__["binmode"] = _eapi.MI125_mi125_config_binmode_set
    __swig_getmethods__["binmode"] = _eapi.MI125_mi125_config_binmode_get
    if _newclass:binmode = _swig_property(_eapi.MI125_mi125_config_binmode_get, _eapi.MI125_mi125_config_binmode_set)
    def __init__(self): 
        this = _eapi.new_MI125_mi125_config()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI125_mi125_config
    __del__ = lambda self : None;
MI125_mi125_config_swigregister = _eapi.MI125_mi125_config_swigregister
MI125_mi125_config_swigregister(MI125_mi125_config)

class MI125_mi125_laneoffset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI125_mi125_laneoffset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI125_mi125_laneoffset, name)
    __repr__ = _swig_repr
    __swig_setmethods__["laneoffset"] = _eapi.MI125_mi125_laneoffset_laneoffset_set
    __swig_getmethods__["laneoffset"] = _eapi.MI125_mi125_laneoffset_laneoffset_get
    if _newclass:laneoffset = _swig_property(_eapi.MI125_mi125_laneoffset_laneoffset_get, _eapi.MI125_mi125_laneoffset_laneoffset_set)
    def __init__(self): 
        this = _eapi.new_MI125_mi125_laneoffset()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI125_mi125_laneoffset
    __del__ = lambda self : None;
MI125_mi125_laneoffset_swigregister = _eapi.MI125_mi125_laneoffset_swigregister
MI125_mi125_laneoffset_swigregister(MI125_mi125_laneoffset)

class MI125_mi125_i2caddr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI125_mi125_i2caddr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI125_mi125_i2caddr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eeprom"] = _eapi.MI125_mi125_i2caddr_eeprom_set
    __swig_getmethods__["eeprom"] = _eapi.MI125_mi125_i2caddr_eeprom_get
    if _newclass:eeprom = _swig_property(_eapi.MI125_mi125_i2caddr_eeprom_get, _eapi.MI125_mi125_i2caddr_eeprom_set)
    __swig_setmethods__["spibridge"] = _eapi.MI125_mi125_i2caddr_spibridge_set
    __swig_getmethods__["spibridge"] = _eapi.MI125_mi125_i2caddr_spibridge_get
    if _newclass:spibridge = _swig_property(_eapi.MI125_mi125_i2caddr_spibridge_get, _eapi.MI125_mi125_i2caddr_spibridge_set)
    __swig_setmethods__["sensor"] = _eapi.MI125_mi125_i2caddr_sensor_set
    __swig_getmethods__["sensor"] = _eapi.MI125_mi125_i2caddr_sensor_get
    if _newclass:sensor = _swig_property(_eapi.MI125_mi125_i2caddr_sensor_get, _eapi.MI125_mi125_i2caddr_sensor_set)
    __swig_setmethods__["expander"] = _eapi.MI125_mi125_i2caddr_expander_set
    __swig_getmethods__["expander"] = _eapi.MI125_mi125_i2caddr_expander_get
    if _newclass:expander = _swig_property(_eapi.MI125_mi125_i2caddr_expander_get, _eapi.MI125_mi125_i2caddr_expander_set)
    def __init__(self): 
        this = _eapi.new_MI125_mi125_i2caddr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI125_mi125_i2caddr
    __del__ = lambda self : None;
MI125_mi125_i2caddr_swigregister = _eapi.MI125_mi125_i2caddr_swigregister
MI125_mi125_i2caddr_swigregister(MI125_mi125_i2caddr)

class MI125_mi125_i2cscan(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI125_mi125_i2cscan, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI125_mi125_i2cscan, name)
    __repr__ = _swig_repr
    __swig_setmethods__["devdetect"] = _eapi.MI125_mi125_i2cscan_devdetect_set
    __swig_getmethods__["devdetect"] = _eapi.MI125_mi125_i2cscan_devdetect_get
    if _newclass:devdetect = _swig_property(_eapi.MI125_mi125_i2cscan_devdetect_get, _eapi.MI125_mi125_i2cscan_devdetect_set)
    def __init__(self): 
        this = _eapi.new_MI125_mi125_i2cscan()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI125_mi125_i2cscan
    __del__ = lambda self : None;
MI125_mi125_i2cscan_swigregister = _eapi.MI125_mi125_i2cscan_swigregister
MI125_mi125_i2cscan_swigregister(MI125_mi125_i2cscan)

class MI125_mi125(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MI125_mi125, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MI125_mi125, name)
    __repr__ = _swig_repr
    __swig_setmethods__["core"] = _eapi.MI125_mi125_core_set
    __swig_getmethods__["core"] = _eapi.MI125_mi125_core_get
    if _newclass:core = _swig_property(_eapi.MI125_mi125_core_get, _eapi.MI125_mi125_core_set)
    __swig_setmethods__["groupch"] = _eapi.MI125_mi125_groupch_set
    __swig_getmethods__["groupch"] = _eapi.MI125_mi125_groupch_get
    if _newclass:groupch = _swig_property(_eapi.MI125_mi125_groupch_get, _eapi.MI125_mi125_groupch_set)
    __swig_setmethods__["com"] = _eapi.MI125_mi125_com_set
    __swig_getmethods__["com"] = _eapi.MI125_mi125_com_get
    if _newclass:com = _swig_property(_eapi.MI125_mi125_com_get, _eapi.MI125_mi125_com_set)
    __swig_setmethods__["expander"] = _eapi.MI125_mi125_expander_set
    __swig_getmethods__["expander"] = _eapi.MI125_mi125_expander_get
    if _newclass:expander = _swig_property(_eapi.MI125_mi125_expander_get, _eapi.MI125_mi125_expander_set)
    __swig_setmethods__["expander2"] = _eapi.MI125_mi125_expander2_set
    __swig_getmethods__["expander2"] = _eapi.MI125_mi125_expander2_get
    if _newclass:expander2 = _swig_property(_eapi.MI125_mi125_expander2_get, _eapi.MI125_mi125_expander2_set)
    __swig_setmethods__["adc"] = _eapi.MI125_mi125_adc_set
    __swig_getmethods__["adc"] = _eapi.MI125_mi125_adc_get
    if _newclass:adc = _swig_property(_eapi.MI125_mi125_adc_get, _eapi.MI125_mi125_adc_set)
    __swig_setmethods__["monitor"] = _eapi.MI125_mi125_monitor_set
    __swig_getmethods__["monitor"] = _eapi.MI125_mi125_monitor_get
    if _newclass:monitor = _swig_property(_eapi.MI125_mi125_monitor_get, _eapi.MI125_mi125_monitor_set)
    __swig_setmethods__["hCarrier"] = _eapi.MI125_mi125_hCarrier_set
    __swig_getmethods__["hCarrier"] = _eapi.MI125_mi125_hCarrier_get
    if _newclass:hCarrier = _swig_property(_eapi.MI125_mi125_hCarrier_get, _eapi.MI125_mi125_hCarrier_set)
    __swig_setmethods__["FmcConnector"] = _eapi.MI125_mi125_FmcConnector_set
    __swig_getmethods__["FmcConnector"] = _eapi.MI125_mi125_FmcConnector_get
    if _newclass:FmcConnector = _swig_property(_eapi.MI125_mi125_FmcConnector_get, _eapi.MI125_mi125_FmcConnector_set)
    __swig_setmethods__["resetdone"] = _eapi.MI125_mi125_resetdone_set
    __swig_getmethods__["resetdone"] = _eapi.MI125_mi125_resetdone_get
    if _newclass:resetdone = _swig_property(_eapi.MI125_mi125_resetdone_get, _eapi.MI125_mi125_resetdone_set)
    __swig_setmethods__["channelslanecalib"] = _eapi.MI125_mi125_channelslanecalib_set
    __swig_getmethods__["channelslanecalib"] = _eapi.MI125_mi125_channelslanecalib_get
    if _newclass:channelslanecalib = _swig_property(_eapi.MI125_mi125_channelslanecalib_get, _eapi.MI125_mi125_channelslanecalib_set)
    __swig_setmethods__["calibndx"] = _eapi.MI125_mi125_calibndx_set
    __swig_getmethods__["calibndx"] = _eapi.MI125_mi125_calibndx_get
    if _newclass:calibndx = _swig_property(_eapi.MI125_mi125_calibndx_get, _eapi.MI125_mi125_calibndx_set)
    __swig_setmethods__["calibdone"] = _eapi.MI125_mi125_calibdone_set
    __swig_getmethods__["calibdone"] = _eapi.MI125_mi125_calibdone_get
    if _newclass:calibdone = _swig_property(_eapi.MI125_mi125_calibdone_get, _eapi.MI125_mi125_calibdone_set)
    __swig_setmethods__["testmode"] = _eapi.MI125_mi125_testmode_set
    __swig_getmethods__["testmode"] = _eapi.MI125_mi125_testmode_get
    if _newclass:testmode = _swig_property(_eapi.MI125_mi125_testmode_get, _eapi.MI125_mi125_testmode_set)
    __swig_setmethods__["fmcposition"] = _eapi.MI125_mi125_fmcposition_set
    __swig_getmethods__["fmcposition"] = _eapi.MI125_mi125_fmcposition_get
    if _newclass:fmcposition = _swig_property(_eapi.MI125_mi125_fmcposition_get, _eapi.MI125_mi125_fmcposition_set)
    __swig_setmethods__["resetinprog"] = _eapi.MI125_mi125_resetinprog_set
    __swig_getmethods__["resetinprog"] = _eapi.MI125_mi125_resetinprog_get
    if _newclass:resetinprog = _swig_property(_eapi.MI125_mi125_resetinprog_get, _eapi.MI125_mi125_resetinprog_set)
    __swig_setmethods__["channellanemask"] = _eapi.MI125_mi125_channellanemask_set
    __swig_getmethods__["channellanemask"] = _eapi.MI125_mi125_channellanemask_get
    if _newclass:channellanemask = _swig_property(_eapi.MI125_mi125_channellanemask_get, _eapi.MI125_mi125_channellanemask_set)
    __swig_setmethods__["randommode"] = _eapi.MI125_mi125_randommode_set
    __swig_getmethods__["randommode"] = _eapi.MI125_mi125_randommode_get
    if _newclass:randommode = _swig_property(_eapi.MI125_mi125_randommode_get, _eapi.MI125_mi125_randommode_set)
    __swig_setmethods__["lanedelays"] = _eapi.MI125_mi125_lanedelays_set
    __swig_getmethods__["lanedelays"] = _eapi.MI125_mi125_lanedelays_get
    if _newclass:lanedelays = _swig_property(_eapi.MI125_mi125_lanedelays_get, _eapi.MI125_mi125_lanedelays_set)
    __swig_setmethods__["beta"] = _eapi.MI125_mi125_beta_set
    __swig_getmethods__["beta"] = _eapi.MI125_mi125_beta_get
    if _newclass:beta = _swig_property(_eapi.MI125_mi125_beta_get, _eapi.MI125_mi125_beta_set)
    __swig_setmethods__["pausLaneDelays"] = _eapi.MI125_mi125_pausLaneDelays_set
    __swig_getmethods__["pausLaneDelays"] = _eapi.MI125_mi125_pausLaneDelays_get
    if _newclass:pausLaneDelays = _swig_property(_eapi.MI125_mi125_pausLaneDelays_get, _eapi.MI125_mi125_pausLaneDelays_set)
    __swig_setmethods__["Reference"] = _eapi.MI125_mi125_Reference_set
    __swig_getmethods__["Reference"] = _eapi.MI125_mi125_Reference_get
    if _newclass:Reference = _swig_property(_eapi.MI125_mi125_Reference_get, _eapi.MI125_mi125_Reference_set)
    __swig_setmethods__["defaulttaps"] = _eapi.MI125_mi125_defaulttaps_set
    __swig_getmethods__["defaulttaps"] = _eapi.MI125_mi125_defaulttaps_get
    if _newclass:defaulttaps = _swig_property(_eapi.MI125_mi125_defaulttaps_get, _eapi.MI125_mi125_defaulttaps_set)
    __swig_setmethods__["ucDataRefLane"] = _eapi.MI125_mi125_ucDataRefLane_set
    __swig_getmethods__["ucDataRefLane"] = _eapi.MI125_mi125_ucDataRefLane_get
    if _newclass:ucDataRefLane = _swig_property(_eapi.MI125_mi125_ucDataRefLane_get, _eapi.MI125_mi125_ucDataRefLane_set)
    __swig_setmethods__["usRefDelay"] = _eapi.MI125_mi125_usRefDelay_set
    __swig_getmethods__["usRefDelay"] = _eapi.MI125_mi125_usRefDelay_get
    if _newclass:usRefDelay = _swig_property(_eapi.MI125_mi125_usRefDelay_get, _eapi.MI125_mi125_usRefDelay_set)
    __swig_setmethods__["pusBottomRefDelay"] = _eapi.MI125_mi125_pusBottomRefDelay_set
    __swig_getmethods__["pusBottomRefDelay"] = _eapi.MI125_mi125_pusBottomRefDelay_get
    if _newclass:pusBottomRefDelay = _swig_property(_eapi.MI125_mi125_pusBottomRefDelay_get, _eapi.MI125_mi125_pusBottomRefDelay_set)
    __swig_setmethods__["iFirstTapOffsetFeed"] = _eapi.MI125_mi125_iFirstTapOffsetFeed_set
    __swig_getmethods__["iFirstTapOffsetFeed"] = _eapi.MI125_mi125_iFirstTapOffsetFeed_get
    if _newclass:iFirstTapOffsetFeed = _swig_property(_eapi.MI125_mi125_iFirstTapOffsetFeed_get, _eapi.MI125_mi125_iFirstTapOffsetFeed_set)
    __swig_setmethods__["errorDelay"] = _eapi.MI125_mi125_errorDelay_set
    __swig_getmethods__["errorDelay"] = _eapi.MI125_mi125_errorDelay_get
    if _newclass:errorDelay = _swig_property(_eapi.MI125_mi125_errorDelay_get, _eapi.MI125_mi125_errorDelay_set)
    __swig_setmethods__["usDcoDelay"] = _eapi.MI125_mi125_usDcoDelay_set
    __swig_getmethods__["usDcoDelay"] = _eapi.MI125_mi125_usDcoDelay_get
    if _newclass:usDcoDelay = _swig_property(_eapi.MI125_mi125_usDcoDelay_get, _eapi.MI125_mi125_usDcoDelay_set)
    __swig_setmethods__["pusBottomDcoDelay"] = _eapi.MI125_mi125_pusBottomDcoDelay_set
    __swig_getmethods__["pusBottomDcoDelay"] = _eapi.MI125_mi125_pusBottomDcoDelay_get
    if _newclass:pusBottomDcoDelay = _swig_property(_eapi.MI125_mi125_pusBottomDcoDelay_get, _eapi.MI125_mi125_pusBottomDcoDelay_set)
    __swig_setmethods__["ucDataRefIoDelay"] = _eapi.MI125_mi125_ucDataRefIoDelay_set
    __swig_getmethods__["ucDataRefIoDelay"] = _eapi.MI125_mi125_ucDataRefIoDelay_get
    if _newclass:ucDataRefIoDelay = _swig_property(_eapi.MI125_mi125_ucDataRefIoDelay_get, _eapi.MI125_mi125_ucDataRefIoDelay_set)
    __swig_setmethods__["pucBottomDataRefIoDelay"] = _eapi.MI125_mi125_pucBottomDataRefIoDelay_set
    __swig_getmethods__["pucBottomDataRefIoDelay"] = _eapi.MI125_mi125_pucBottomDataRefIoDelay_get
    if _newclass:pucBottomDataRefIoDelay = _swig_property(_eapi.MI125_mi125_pucBottomDataRefIoDelay_get, _eapi.MI125_mi125_pucBottomDataRefIoDelay_set)
    __swig_setmethods__["ucDataIoDelTable"] = _eapi.MI125_mi125_ucDataIoDelTable_set
    __swig_getmethods__["ucDataIoDelTable"] = _eapi.MI125_mi125_ucDataIoDelTable_get
    if _newclass:ucDataIoDelTable = _swig_property(_eapi.MI125_mi125_ucDataIoDelTable_get, _eapi.MI125_mi125_ucDataIoDelTable_set)
    __swig_setmethods__["ucDataIoGroupCount"] = _eapi.MI125_mi125_ucDataIoGroupCount_set
    __swig_getmethods__["ucDataIoGroupCount"] = _eapi.MI125_mi125_ucDataIoGroupCount_get
    if _newclass:ucDataIoGroupCount = _swig_property(_eapi.MI125_mi125_ucDataIoGroupCount_get, _eapi.MI125_mi125_ucDataIoGroupCount_set)
    __swig_setmethods__["ucDataIoGroupEnd"] = _eapi.MI125_mi125_ucDataIoGroupEnd_set
    __swig_getmethods__["ucDataIoGroupEnd"] = _eapi.MI125_mi125_ucDataIoGroupEnd_get
    if _newclass:ucDataIoGroupEnd = _swig_property(_eapi.MI125_mi125_ucDataIoGroupEnd_get, _eapi.MI125_mi125_ucDataIoGroupEnd_set)
    __swig_setmethods__["ucDataSmallestPosDcoTol"] = _eapi.MI125_mi125_ucDataSmallestPosDcoTol_set
    __swig_getmethods__["ucDataSmallestPosDcoTol"] = _eapi.MI125_mi125_ucDataSmallestPosDcoTol_get
    if _newclass:ucDataSmallestPosDcoTol = _swig_property(_eapi.MI125_mi125_ucDataSmallestPosDcoTol_get, _eapi.MI125_mi125_ucDataSmallestPosDcoTol_set)
    __swig_setmethods__["ucDataSmallestNegDcoTol"] = _eapi.MI125_mi125_ucDataSmallestNegDcoTol_set
    __swig_getmethods__["ucDataSmallestNegDcoTol"] = _eapi.MI125_mi125_ucDataSmallestNegDcoTol_get
    if _newclass:ucDataSmallestNegDcoTol = _swig_property(_eapi.MI125_mi125_ucDataSmallestNegDcoTol_get, _eapi.MI125_mi125_ucDataSmallestNegDcoTol_set)
    __swig_setmethods__["ucDataSmallestDelay"] = _eapi.MI125_mi125_ucDataSmallestDelay_set
    __swig_getmethods__["ucDataSmallestDelay"] = _eapi.MI125_mi125_ucDataSmallestDelay_get
    if _newclass:ucDataSmallestDelay = _swig_property(_eapi.MI125_mi125_ucDataSmallestDelay_get, _eapi.MI125_mi125_ucDataSmallestDelay_set)
    __swig_setmethods__["ucDataGreatestDelay"] = _eapi.MI125_mi125_ucDataGreatestDelay_set
    __swig_getmethods__["ucDataGreatestDelay"] = _eapi.MI125_mi125_ucDataGreatestDelay_get
    if _newclass:ucDataGreatestDelay = _swig_property(_eapi.MI125_mi125_ucDataGreatestDelay_get, _eapi.MI125_mi125_ucDataGreatestDelay_set)
    __swig_setmethods__["ucBitslipRetry"] = _eapi.MI125_mi125_ucBitslipRetry_set
    __swig_getmethods__["ucBitslipRetry"] = _eapi.MI125_mi125_ucBitslipRetry_get
    if _newclass:ucBitslipRetry = _swig_property(_eapi.MI125_mi125_ucBitslipRetry_get, _eapi.MI125_mi125_ucBitslipRetry_set)
    __swig_setmethods__["ucBitslipIndex"] = _eapi.MI125_mi125_ucBitslipIndex_set
    __swig_getmethods__["ucBitslipIndex"] = _eapi.MI125_mi125_ucBitslipIndex_get
    if _newclass:ucBitslipIndex = _swig_property(_eapi.MI125_mi125_ucBitslipIndex_get, _eapi.MI125_mi125_ucBitslipIndex_set)
    __swig_setmethods__["pucBottomBitslipIndex"] = _eapi.MI125_mi125_pucBottomBitslipIndex_set
    __swig_getmethods__["pucBottomBitslipIndex"] = _eapi.MI125_mi125_pucBottomBitslipIndex_get
    if _newclass:pucBottomBitslipIndex = _swig_property(_eapi.MI125_mi125_pucBottomBitslipIndex_get, _eapi.MI125_mi125_pucBottomBitslipIndex_set)
    def __init__(self): 
        this = _eapi.new_MI125_mi125()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_MI125_mi125
    __del__ = lambda self : None;
MI125_mi125_swigregister = _eapi.MI125_mi125_swigregister
MI125_mi125_swigregister(MI125_mi125)

MI125_MI125OK = _eapi.MI125_MI125OK
MI125_MI125NOCORE = _eapi.MI125_MI125NOCORE
MI125_MI125IDELAYRDY = _eapi.MI125_MI125IDELAYRDY
MI125_MI125TRAININGDONE = _eapi.MI125_MI125TRAININGDONE
MI125_MI125NORESET = _eapi.MI125_MI125NORESET
MI125_MI125INVALIDCLKBOT = _eapi.MI125_MI125INVALIDCLKBOT
MI125_MI125INVALIDCLK = _eapi.MI125_MI125INVALIDCLK
MI125_MI125INVALIDTRIG = _eapi.MI125_MI125INVALIDTRIG
MI125_MI125INVALIDCH = _eapi.MI125_MI125INVALIDCH
MI125_MI125INVALIDLVDS = _eapi.MI125_MI125INVALIDLVDS
MI125_MI125INVALIDRAN = _eapi.MI125_MI125INVALIDRAN
MI125_MI125INVALIDBIN = _eapi.MI125_MI125INVALIDBIN
MI125_MI125INVALIDTEST = _eapi.MI125_MI125INVALIDTEST
MI125_MI125NOCALIB = _eapi.MI125_MI125NOCALIB
MI125_MI125INVALIDADC = _eapi.MI125_MI125INVALIDADC
MI125_MI125TESTMODEACT = _eapi.MI125_MI125TESTMODEACT
MI125_MI125BADUSECFCT = _eapi.MI125_MI125BADUSECFCT
MI125_MI125ABSENT = _eapi.MI125_MI125ABSENT
MI125_MI125MMCMLOCK = _eapi.MI125_MI125MMCMLOCK
MI125_MI125INVALIDCLKTOP = _eapi.MI125_MI125INVALIDCLKTOP
MI125_MI125BADBOTTAPREFPTR = _eapi.MI125_MI125BADBOTTAPREFPTR
MI125_MI125BADBOTTAPREFVALUE = _eapi.MI125_MI125BADBOTTAPREFVALUE
MI125_MI125BADBOTREFDELAYPTR = _eapi.MI125_MI125BADBOTREFDELAYPTR
MI125_MI125BADBOTDCODELAYPTR = _eapi.MI125_MI125BADBOTDCODELAYPTR

def Mo1000_Presence_send(*args):
  return _eapi.Mo1000_Presence_send(*args)
Mo1000_Presence_send = _eapi.Mo1000_Presence_send

def Mo1000_PowerUp_send(*args):
  return _eapi.Mo1000_PowerUp_send(*args)
Mo1000_PowerUp_send = _eapi.Mo1000_PowerUp_send

def Mo1000_Reset_send(*args):
  return _eapi.Mo1000_Reset_send(*args)
Mo1000_Reset_send = _eapi.Mo1000_Reset_send

def Mo1000_Init_send(*args):
  return _eapi.Mo1000_Init_send(*args)
Mo1000_Init_send = _eapi.Mo1000_Init_send

def Mo1000_WriteReg_send(*args):
  return _eapi.Mo1000_WriteReg_send(*args)
Mo1000_WriteReg_send = _eapi.Mo1000_WriteReg_send

def Mo1000_ReadReg_send(*args):
  return _eapi.Mo1000_ReadReg_send(*args)
Mo1000_ReadReg_send = _eapi.Mo1000_ReadReg_send

def Mo1000_GetStatus_send(*args):
  return _eapi.Mo1000_GetStatus_send(*args)
Mo1000_GetStatus_send = _eapi.Mo1000_GetStatus_send

def Mo1000_GetTemperature_send(*args):
  return _eapi.Mo1000_GetTemperature_send(*args)
Mo1000_GetTemperature_send = _eapi.Mo1000_GetTemperature_send

def Mo1000_SetClockConfig_send(*args):
  return _eapi.Mo1000_SetClockConfig_send(*args)
Mo1000_SetClockConfig_send = _eapi.Mo1000_SetClockConfig_send

def Mo1000_WriteClockConfig_send(*args):
  return _eapi.Mo1000_WriteClockConfig_send(*args)
Mo1000_WriteClockConfig_send = _eapi.Mo1000_WriteClockConfig_send

def Mo1000_GetPllConfig_send(*args):
  return _eapi.Mo1000_GetPllConfig_send(*args)
Mo1000_GetPllConfig_send = _eapi.Mo1000_GetPllConfig_send

def Mo1000_SetPllConfig_send(*args):
  return _eapi.Mo1000_SetPllConfig_send(*args)
Mo1000_SetPllConfig_send = _eapi.Mo1000_SetPllConfig_send

def Mo1000_DoDacCalibration_send(*args):
  return _eapi.Mo1000_DoDacCalibration_send(*args)
Mo1000_DoDacCalibration_send = _eapi.Mo1000_DoDacCalibration_send

def Mo1000_GetChannelCalibStatus_send(*args):
  return _eapi.Mo1000_GetChannelCalibStatus_send(*args)
Mo1000_GetChannelCalibStatus_send = _eapi.Mo1000_GetChannelCalibStatus_send

def Mo1000_SetDacOutCtrl_send(*args):
  return _eapi.Mo1000_SetDacOutCtrl_send(*args)
Mo1000_SetDacOutCtrl_send = _eapi.Mo1000_SetDacOutCtrl_send

def Mo1000_SetDacParDcOffset_send(*args):
  return _eapi.Mo1000_SetDacParDcOffset_send(*args)
Mo1000_SetDacParDcOffset_send = _eapi.Mo1000_SetDacParDcOffset_send

def Mo1000_SetDacParGain_send(*args):
  return _eapi.Mo1000_SetDacParGain_send(*args)
Mo1000_SetDacParGain_send = _eapi.Mo1000_SetDacParGain_send

def Mo1000_SetDacParInterpolation_send(*args):
  return _eapi.Mo1000_SetDacParInterpolation_send(*args)
Mo1000_SetDacParInterpolation_send = _eapi.Mo1000_SetDacParInterpolation_send

def Mo1000_DoDacUpdate_send(*args):
  return _eapi.Mo1000_DoDacUpdate_send(*args)
Mo1000_DoDacUpdate_send = _eapi.Mo1000_DoDacUpdate_send

def Mo1000_SetDacParActChannel_send(*args):
  return _eapi.Mo1000_SetDacParActChannel_send(*args)
Mo1000_SetDacParActChannel_send = _eapi.Mo1000_SetDacParActChannel_send

def Mo1000_GetClkMaster_send(*args):
  return _eapi.Mo1000_GetClkMaster_send(*args)
Mo1000_GetClkMaster_send = _eapi.Mo1000_GetClkMaster_send

def Mo1000_SetDacParISinc_send(*args):
  return _eapi.Mo1000_SetDacParISinc_send(*args)
Mo1000_SetDacParISinc_send = _eapi.Mo1000_SetDacParISinc_send

def Mo1000_SetDacParISincCtrl_send(*args):
  return _eapi.Mo1000_SetDacParISincCtrl_send(*args)
Mo1000_SetDacParISincCtrl_send = _eapi.Mo1000_SetDacParISincCtrl_send

def Mo1000_SetDacParFineMod_send(*args):
  return _eapi.Mo1000_SetDacParFineMod_send(*args)
Mo1000_SetDacParFineMod_send = _eapi.Mo1000_SetDacParFineMod_send

def Mo1000_SetDacParFineModCtrl_send(*args):
  return _eapi.Mo1000_SetDacParFineModCtrl_send(*args)
Mo1000_SetDacParFineModCtrl_send = _eapi.Mo1000_SetDacParFineModCtrl_send

def Mo1000_SetDacParDataFormat_send(*args):
  return _eapi.Mo1000_SetDacParDataFormat_send(*args)
Mo1000_SetDacParDataFormat_send = _eapi.Mo1000_SetDacParDataFormat_send

def Mo1000_SetDacParQuadPhase_send(*args):
  return _eapi.Mo1000_SetDacParQuadPhase_send(*args)
Mo1000_SetDacParQuadPhase_send = _eapi.Mo1000_SetDacParQuadPhase_send

def Mo1000_GetVersions_send(*args):
  return _eapi.Mo1000_GetVersions_send(*args)
Mo1000_GetVersions_send = _eapi.Mo1000_GetVersions_send

def Mo1000_TestLocalOscSw_send(*args):
  return _eapi.Mo1000_TestLocalOscSw_send(*args)
Mo1000_TestLocalOscSw_send = _eapi.Mo1000_TestLocalOscSw_send

def Mo1000_TestBridgeReset_send(*args):
  return _eapi.Mo1000_TestBridgeReset_send(*args)
Mo1000_TestBridgeReset_send = _eapi.Mo1000_TestBridgeReset_send

def Mo1000_TestDacReset_send(*args):
  return _eapi.Mo1000_TestDacReset_send(*args)
Mo1000_TestDacReset_send = _eapi.Mo1000_TestDacReset_send

def Mo1000_TestPllSel_send(*args):
  return _eapi.Mo1000_TestPllSel_send(*args)
Mo1000_TestPllSel_send = _eapi.Mo1000_TestPllSel_send

def Mo1000_TestPllPowDown_send(*args):
  return _eapi.Mo1000_TestPllPowDown_send(*args)
Mo1000_TestPllPowDown_send = _eapi.Mo1000_TestPllPowDown_send

def Mo1000_TestPllSync_send(*args):
  return _eapi.Mo1000_TestPllSync_send(*args)
Mo1000_TestPllSync_send = _eapi.Mo1000_TestPllSync_send

def Mo1000_TestDacIrq_send(*args):
  return _eapi.Mo1000_TestDacIrq_send(*args)
Mo1000_TestDacIrq_send = _eapi.Mo1000_TestDacIrq_send

def Mo1000_TestDacClks_send(*args):
  return _eapi.Mo1000_TestDacClks_send(*args)
Mo1000_TestDacClks_send = _eapi.Mo1000_TestDacClks_send

def Mo1000_TestDciFrame_send(*args):
  return _eapi.Mo1000_TestDciFrame_send(*args)
Mo1000_TestDciFrame_send = _eapi.Mo1000_TestDciFrame_send

def Mo1000_CheckI2c_send(*args):
  return _eapi.Mo1000_CheckI2c_send(*args)
Mo1000_CheckI2c_send = _eapi.Mo1000_CheckI2c_send

def Mo1000_GetCoreFrequency_send(*args):
  return _eapi.Mo1000_GetCoreFrequency_send(*args)
Mo1000_GetCoreFrequency_send = _eapi.Mo1000_GetCoreFrequency_send

def Mo1000_SetTestMode_send(*args):
  return _eapi.Mo1000_SetTestMode_send(*args)
Mo1000_SetTestMode_send = _eapi.Mo1000_SetTestMode_send
MO1000_NBMAX = _eapi.MO1000_NBMAX
MO1000_MAX_CALIB_ATTEMPT = _eapi.MO1000_MAX_CALIB_ATTEMPT
MO1000_MAX_FRAME_CALIB_ATTEMPT = _eapi.MO1000_MAX_FRAME_CALIB_ATTEMPT
MO1000_MAX_SYNC_CALIB_ATTEMPT = _eapi.MO1000_MAX_SYNC_CALIB_ATTEMPT
MO1000_DAC_PER_BOARD = _eapi.MO1000_DAC_PER_BOARD
MO1000_DAC_FIFO_SIZE = _eapi.MO1000_DAC_FIFO_SIZE
MO1000_DELAY_TAPS = _eapi.MO1000_DELAY_TAPS
MO1000_FRAME_MODES = _eapi.MO1000_FRAME_MODES
MO1000_I2SCAN_MAX_DEV = _eapi.MO1000_I2SCAN_MAX_DEV
eMo1000PositBottom = _eapi.eMo1000PositBottom
eMo1000PositTop = _eapi.eMo1000PositTop
eMo1000Ref300Mhz = _eapi.eMo1000Ref300Mhz
eMo1000Ref200Mhz = _eapi.eMo1000Ref200Mhz
eMo1000TestModeoff = _eapi.eMo1000TestModeoff
eMo1000TestMode1 = _eapi.eMo1000TestMode1
eMo1000TestMode2 = _eapi.eMo1000TestMode2
eMo1000MasterClkAuto = _eapi.eMo1000MasterClkAuto
eMo1000MasterClkManual = _eapi.eMo1000MasterClkManual
eMo1000RevB = _eapi.eMo1000RevB
eMo1000RevC = _eapi.eMo1000RevC
eMo1000RevLast = _eapi.eMo1000RevLast
eMo1000DeviceDac1 = _eapi.eMo1000DeviceDac1
eMo1000DeviceDac2 = _eapi.eMo1000DeviceDac2
eMo1000DevicePll = _eapi.eMo1000DevicePll
eMo1000DevicePorts = _eapi.eMo1000DevicePorts
eMo1000DeviceCore = _eapi.eMo1000DeviceCore
eMo1000ClkSrc125mhz = _eapi.eMo1000ClkSrc125mhz
eMo1000ClkSrcExt = _eapi.eMo1000ClkSrcExt
eMo1000ClkSrcBottomfmc = _eapi.eMo1000ClkSrcBottomfmc
eMo1000ClkSrcFmccarrier2 = _eapi.eMo1000ClkSrcFmccarrier2
eMo1000ClkSrcFmccarrier3 = _eapi.eMo1000ClkSrcFmccarrier3
eMo1000Temp1c = _eapi.eMo1000Temp1c
eMo1000Temp0dot1c = _eapi.eMo1000Temp0dot1c
eMo1000DacGroup14 = _eapi.eMo1000DacGroup14
eMo1000DacGroup58 = _eapi.eMo1000DacGroup58
eMo1000Format2complement = _eapi.eMo1000Format2complement
eMo1000FormatBinary = _eapi.eMo1000FormatBinary
eMo1000SelectDac1 = _eapi.eMo1000SelectDac1
eMo1000SelectDac2 = _eapi.eMo1000SelectDac2
eMo1000SelectDac3 = _eapi.eMo1000SelectDac3
eMo1000SelectDac4 = _eapi.eMo1000SelectDac4
eMo1000SelectDac5 = _eapi.eMo1000SelectDac5
eMo1000SelectDac6 = _eapi.eMo1000SelectDac6
eMo1000SelectDac7 = _eapi.eMo1000SelectDac7
eMo1000SelectDac8 = _eapi.eMo1000SelectDac8
eMo1000SelectIQDac12 = _eapi.eMo1000SelectIQDac12
eMo1000SelectIQDac34 = _eapi.eMo1000SelectIQDac34
eMo1000SelectIQDac56 = _eapi.eMo1000SelectIQDac56
eMo1000SelectIQDac78 = _eapi.eMo1000SelectIQDac78
eMo1000NcoHighside = _eapi.eMo1000NcoHighside
eMo1000NcoLowside = _eapi.eMo1000NcoLowside
eMo1000OutputEnable = _eapi.eMo1000OutputEnable
eMo1000OutputDisable = _eapi.eMo1000OutputDisable
eMo1000ActChannels02 = _eapi.eMo1000ActChannels02
eMo1000ActChannels04 = _eapi.eMo1000ActChannels04
eMo1000ActChannels06 = _eapi.eMo1000ActChannels06
eMo1000ActChannels08 = _eapi.eMo1000ActChannels08
eMo1000IsincEnable = _eapi.eMo1000IsincEnable
eMo1000IsincDisable = _eapi.eMo1000IsincDisable
eMo1000FineModEnable = _eapi.eMo1000FineModEnable
eMo1000FineModDisable = _eapi.eMo1000FineModDisable
class Mo1000_stBoardStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mo1000_stBoardStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mo1000_stBoardStatus, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _eapi.new_Mo1000_stBoardStatus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_Mo1000_stBoardStatus
    __del__ = lambda self : None;
Mo1000_stBoardStatus_swigregister = _eapi.Mo1000_stBoardStatus_swigregister
Mo1000_stBoardStatus_swigregister(Mo1000_stBoardStatus)

class Mo1000_stCompareErrors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mo1000_stCompareErrors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mo1000_stCompareErrors, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _eapi.new_Mo1000_stCompareErrors()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_Mo1000_stCompareErrors
    __del__ = lambda self : None;
Mo1000_stCompareErrors_swigregister = _eapi.Mo1000_stCompareErrors_swigregister
Mo1000_stCompareErrors_swigregister(Mo1000_stCompareErrors)

class Mo1000_stI2cAddr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mo1000_stI2cAddr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mo1000_stI2cAddr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_ucEeprom"] = _eapi.Mo1000_stI2cAddr_m_ucEeprom_set
    __swig_getmethods__["m_ucEeprom"] = _eapi.Mo1000_stI2cAddr_m_ucEeprom_get
    if _newclass:m_ucEeprom = _swig_property(_eapi.Mo1000_stI2cAddr_m_ucEeprom_get, _eapi.Mo1000_stI2cAddr_m_ucEeprom_set)
    __swig_setmethods__["m_ucSpiBridge"] = _eapi.Mo1000_stI2cAddr_m_ucSpiBridge_set
    __swig_getmethods__["m_ucSpiBridge"] = _eapi.Mo1000_stI2cAddr_m_ucSpiBridge_get
    if _newclass:m_ucSpiBridge = _swig_property(_eapi.Mo1000_stI2cAddr_m_ucSpiBridge_get, _eapi.Mo1000_stI2cAddr_m_ucSpiBridge_set)
    __swig_setmethods__["m_ucSensor"] = _eapi.Mo1000_stI2cAddr_m_ucSensor_set
    __swig_getmethods__["m_ucSensor"] = _eapi.Mo1000_stI2cAddr_m_ucSensor_get
    if _newclass:m_ucSensor = _swig_property(_eapi.Mo1000_stI2cAddr_m_ucSensor_get, _eapi.Mo1000_stI2cAddr_m_ucSensor_set)
    __swig_setmethods__["m_ucExpander"] = _eapi.Mo1000_stI2cAddr_m_ucExpander_set
    __swig_getmethods__["m_ucExpander"] = _eapi.Mo1000_stI2cAddr_m_ucExpander_get
    if _newclass:m_ucExpander = _swig_property(_eapi.Mo1000_stI2cAddr_m_ucExpander_get, _eapi.Mo1000_stI2cAddr_m_ucExpander_set)
    def __init__(self): 
        this = _eapi.new_Mo1000_stI2cAddr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_Mo1000_stI2cAddr
    __del__ = lambda self : None;
Mo1000_stI2cAddr_swigregister = _eapi.Mo1000_stI2cAddr_swigregister
Mo1000_stI2cAddr_swigregister(Mo1000_stI2cAddr)

class Mo1000_stI2cScan(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mo1000_stI2cScan, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mo1000_stI2cScan, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_ucDevDetect"] = _eapi.Mo1000_stI2cScan_m_ucDevDetect_set
    __swig_getmethods__["m_ucDevDetect"] = _eapi.Mo1000_stI2cScan_m_ucDevDetect_get
    if _newclass:m_ucDevDetect = _swig_property(_eapi.Mo1000_stI2cScan_m_ucDevDetect_get, _eapi.Mo1000_stI2cScan_m_ucDevDetect_set)
    def __init__(self): 
        this = _eapi.new_Mo1000_stI2cScan()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_Mo1000_stI2cScan
    __del__ = lambda self : None;
Mo1000_stI2cScan_swigregister = _eapi.Mo1000_stI2cScan_swigregister
Mo1000_stI2cScan_swigregister(Mo1000_stI2cScan)

class Mo1000_stDacConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mo1000_stDacConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mo1000_stDacConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ActPairState"] = _eapi.Mo1000_stDacConfig_ActPairState_set
    __swig_getmethods__["ActPairState"] = _eapi.Mo1000_stDacConfig_ActPairState_get
    if _newclass:ActPairState = _swig_property(_eapi.Mo1000_stDacConfig_ActPairState_get, _eapi.Mo1000_stDacConfig_ActPairState_set)
    __swig_setmethods__["ucActPairStateUpdate"] = _eapi.Mo1000_stDacConfig_ucActPairStateUpdate_set
    __swig_getmethods__["ucActPairStateUpdate"] = _eapi.Mo1000_stDacConfig_ucActPairStateUpdate_get
    if _newclass:ucActPairStateUpdate = _swig_property(_eapi.Mo1000_stDacConfig_ucActPairStateUpdate_get, _eapi.Mo1000_stDacConfig_ucActPairStateUpdate_set)
    __swig_setmethods__["stISincReal"] = _eapi.Mo1000_stDacConfig_stISincReal_set
    __swig_getmethods__["stISincReal"] = _eapi.Mo1000_stDacConfig_stISincReal_get
    if _newclass:stISincReal = _swig_property(_eapi.Mo1000_stDacConfig_stISincReal_get, _eapi.Mo1000_stDacConfig_stISincReal_set)
    __swig_setmethods__["stISincImaginary"] = _eapi.Mo1000_stDacConfig_stISincImaginary_set
    __swig_getmethods__["stISincImaginary"] = _eapi.Mo1000_stDacConfig_stISincImaginary_get
    if _newclass:stISincImaginary = _swig_property(_eapi.Mo1000_stDacConfig_stISincImaginary_get, _eapi.Mo1000_stDacConfig_stISincImaginary_set)
    __swig_setmethods__["ucISincUpdate"] = _eapi.Mo1000_stDacConfig_ucISincUpdate_set
    __swig_getmethods__["ucISincUpdate"] = _eapi.Mo1000_stDacConfig_ucISincUpdate_get
    if _newclass:ucISincUpdate = _swig_property(_eapi.Mo1000_stDacConfig_ucISincUpdate_get, _eapi.Mo1000_stDacConfig_ucISincUpdate_set)
    __swig_setmethods__["ISincState"] = _eapi.Mo1000_stDacConfig_ISincState_set
    __swig_getmethods__["ISincState"] = _eapi.Mo1000_stDacConfig_ISincState_get
    if _newclass:ISincState = _swig_property(_eapi.Mo1000_stDacConfig_ISincState_get, _eapi.Mo1000_stDacConfig_ISincState_set)
    __swig_setmethods__["ucISincStateUpdate"] = _eapi.Mo1000_stDacConfig_ucISincStateUpdate_set
    __swig_getmethods__["ucISincStateUpdate"] = _eapi.Mo1000_stDacConfig_ucISincStateUpdate_get
    if _newclass:ucISincStateUpdate = _swig_property(_eapi.Mo1000_stDacConfig_ucISincStateUpdate_get, _eapi.Mo1000_stDacConfig_ucISincStateUpdate_set)
    __swig_setmethods__["InterMode"] = _eapi.Mo1000_stDacConfig_InterMode_set
    __swig_getmethods__["InterMode"] = _eapi.Mo1000_stDacConfig_InterMode_get
    if _newclass:InterMode = _swig_property(_eapi.Mo1000_stDacConfig_InterMode_get, _eapi.Mo1000_stDacConfig_InterMode_set)
    __swig_setmethods__["ucInterUpdate"] = _eapi.Mo1000_stDacConfig_ucInterUpdate_set
    __swig_getmethods__["ucInterUpdate"] = _eapi.Mo1000_stDacConfig_ucInterUpdate_get
    if _newclass:ucInterUpdate = _swig_property(_eapi.Mo1000_stDacConfig_ucInterUpdate_get, _eapi.Mo1000_stDacConfig_ucInterUpdate_set)
    __swig_setmethods__["uFtw"] = _eapi.Mo1000_stDacConfig_uFtw_set
    __swig_getmethods__["uFtw"] = _eapi.Mo1000_stDacConfig_uFtw_get
    if _newclass:uFtw = _swig_property(_eapi.Mo1000_stDacConfig_uFtw_get, _eapi.Mo1000_stDacConfig_uFtw_set)
    __swig_setmethods__["usNcoPhaseOffset"] = _eapi.Mo1000_stDacConfig_usNcoPhaseOffset_set
    __swig_getmethods__["usNcoPhaseOffset"] = _eapi.Mo1000_stDacConfig_usNcoPhaseOffset_get
    if _newclass:usNcoPhaseOffset = _swig_property(_eapi.Mo1000_stDacConfig_usNcoPhaseOffset_get, _eapi.Mo1000_stDacConfig_usNcoPhaseOffset_set)
    __swig_setmethods__["Sideband"] = _eapi.Mo1000_stDacConfig_Sideband_set
    __swig_getmethods__["Sideband"] = _eapi.Mo1000_stDacConfig_Sideband_get
    if _newclass:Sideband = _swig_property(_eapi.Mo1000_stDacConfig_Sideband_get, _eapi.Mo1000_stDacConfig_Sideband_set)
    __swig_setmethods__["ucFineModUpdate"] = _eapi.Mo1000_stDacConfig_ucFineModUpdate_set
    __swig_getmethods__["ucFineModUpdate"] = _eapi.Mo1000_stDacConfig_ucFineModUpdate_get
    if _newclass:ucFineModUpdate = _swig_property(_eapi.Mo1000_stDacConfig_ucFineModUpdate_get, _eapi.Mo1000_stDacConfig_ucFineModUpdate_set)
    __swig_setmethods__["FineModState"] = _eapi.Mo1000_stDacConfig_FineModState_set
    __swig_getmethods__["FineModState"] = _eapi.Mo1000_stDacConfig_FineModState_get
    if _newclass:FineModState = _swig_property(_eapi.Mo1000_stDacConfig_FineModState_get, _eapi.Mo1000_stDacConfig_FineModState_set)
    __swig_setmethods__["ucFineModStateUpdate"] = _eapi.Mo1000_stDacConfig_ucFineModStateUpdate_set
    __swig_getmethods__["ucFineModStateUpdate"] = _eapi.Mo1000_stDacConfig_ucFineModStateUpdate_get
    if _newclass:ucFineModStateUpdate = _swig_property(_eapi.Mo1000_stDacConfig_ucFineModStateUpdate_get, _eapi.Mo1000_stDacConfig_ucFineModStateUpdate_set)
    __swig_setmethods__["sRealPhase"] = _eapi.Mo1000_stDacConfig_sRealPhase_set
    __swig_getmethods__["sRealPhase"] = _eapi.Mo1000_stDacConfig_sRealPhase_get
    if _newclass:sRealPhase = _swig_property(_eapi.Mo1000_stDacConfig_sRealPhase_get, _eapi.Mo1000_stDacConfig_sRealPhase_set)
    __swig_setmethods__["sImaginaryPhase"] = _eapi.Mo1000_stDacConfig_sImaginaryPhase_set
    __swig_getmethods__["sImaginaryPhase"] = _eapi.Mo1000_stDacConfig_sImaginaryPhase_get
    if _newclass:sImaginaryPhase = _swig_property(_eapi.Mo1000_stDacConfig_sImaginaryPhase_get, _eapi.Mo1000_stDacConfig_sImaginaryPhase_set)
    __swig_setmethods__["ucQuadPhaseUpdate"] = _eapi.Mo1000_stDacConfig_ucQuadPhaseUpdate_set
    __swig_getmethods__["ucQuadPhaseUpdate"] = _eapi.Mo1000_stDacConfig_ucQuadPhaseUpdate_get
    if _newclass:ucQuadPhaseUpdate = _swig_property(_eapi.Mo1000_stDacConfig_ucQuadPhaseUpdate_get, _eapi.Mo1000_stDacConfig_ucQuadPhaseUpdate_set)
    __swig_setmethods__["DataFormat"] = _eapi.Mo1000_stDacConfig_DataFormat_set
    __swig_getmethods__["DataFormat"] = _eapi.Mo1000_stDacConfig_DataFormat_get
    if _newclass:DataFormat = _swig_property(_eapi.Mo1000_stDacConfig_DataFormat_get, _eapi.Mo1000_stDacConfig_DataFormat_set)
    __swig_setmethods__["ucDataFormatUpdate"] = _eapi.Mo1000_stDacConfig_ucDataFormatUpdate_set
    __swig_getmethods__["ucDataFormatUpdate"] = _eapi.Mo1000_stDacConfig_ucDataFormatUpdate_get
    if _newclass:ucDataFormatUpdate = _swig_property(_eapi.Mo1000_stDacConfig_ucDataFormatUpdate_get, _eapi.Mo1000_stDacConfig_ucDataFormatUpdate_set)
    __swig_setmethods__["sDcOffset"] = _eapi.Mo1000_stDacConfig_sDcOffset_set
    __swig_getmethods__["sDcOffset"] = _eapi.Mo1000_stDacConfig_sDcOffset_get
    if _newclass:sDcOffset = _swig_property(_eapi.Mo1000_stDacConfig_sDcOffset_get, _eapi.Mo1000_stDacConfig_sDcOffset_set)
    __swig_setmethods__["ucDcOffsetUpdate"] = _eapi.Mo1000_stDacConfig_ucDcOffsetUpdate_set
    __swig_getmethods__["ucDcOffsetUpdate"] = _eapi.Mo1000_stDacConfig_ucDcOffsetUpdate_get
    if _newclass:ucDcOffsetUpdate = _swig_property(_eapi.Mo1000_stDacConfig_ucDcOffsetUpdate_get, _eapi.Mo1000_stDacConfig_ucDcOffsetUpdate_set)
    __swig_setmethods__["ucGain"] = _eapi.Mo1000_stDacConfig_ucGain_set
    __swig_getmethods__["ucGain"] = _eapi.Mo1000_stDacConfig_ucGain_get
    if _newclass:ucGain = _swig_property(_eapi.Mo1000_stDacConfig_ucGain_get, _eapi.Mo1000_stDacConfig_ucGain_set)
    __swig_setmethods__["ucGainUpdate"] = _eapi.Mo1000_stDacConfig_ucGainUpdate_set
    __swig_getmethods__["ucGainUpdate"] = _eapi.Mo1000_stDacConfig_ucGainUpdate_get
    if _newclass:ucGainUpdate = _swig_property(_eapi.Mo1000_stDacConfig_ucGainUpdate_get, _eapi.Mo1000_stDacConfig_ucGainUpdate_set)
    def __init__(self): 
        this = _eapi.new_Mo1000_stDacConfig()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_Mo1000_stDacConfig
    __del__ = lambda self : None;
Mo1000_stDacConfig_swigregister = _eapi.Mo1000_stDacConfig_swigregister
Mo1000_stDacConfig_swigregister(Mo1000_stDacConfig)

class Mo1000_stPllParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mo1000_stPllParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mo1000_stPllParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["uPrimRefFreq"] = _eapi.Mo1000_stPllParam_uPrimRefFreq_set
    __swig_getmethods__["uPrimRefFreq"] = _eapi.Mo1000_stPllParam_uPrimRefFreq_get
    if _newclass:uPrimRefFreq = _swig_property(_eapi.Mo1000_stPllParam_uPrimRefFreq_get, _eapi.Mo1000_stPllParam_uPrimRefFreq_set)
    __swig_setmethods__["uSecRefFreq"] = _eapi.Mo1000_stPllParam_uSecRefFreq_set
    __swig_getmethods__["uSecRefFreq"] = _eapi.Mo1000_stPllParam_uSecRefFreq_get
    if _newclass:uSecRefFreq = _swig_property(_eapi.Mo1000_stPllParam_uSecRefFreq_get, _eapi.Mo1000_stPllParam_uSecRefFreq_set)
    __swig_setmethods__["OutputRef0"] = _eapi.Mo1000_stPllParam_OutputRef0_set
    __swig_getmethods__["OutputRef0"] = _eapi.Mo1000_stPllParam_OutputRef0_get
    if _newclass:OutputRef0 = _swig_property(_eapi.Mo1000_stPllParam_OutputRef0_get, _eapi.Mo1000_stPllParam_OutputRef0_set)
    __swig_setmethods__["OutputRef1"] = _eapi.Mo1000_stPllParam_OutputRef1_set
    __swig_getmethods__["OutputRef1"] = _eapi.Mo1000_stPllParam_OutputRef1_get
    if _newclass:OutputRef1 = _swig_property(_eapi.Mo1000_stPllParam_OutputRef1_get, _eapi.Mo1000_stPllParam_OutputRef1_set)
    __swig_setmethods__["OutputRef2"] = _eapi.Mo1000_stPllParam_OutputRef2_set
    __swig_getmethods__["OutputRef2"] = _eapi.Mo1000_stPllParam_OutputRef2_get
    if _newclass:OutputRef2 = _swig_property(_eapi.Mo1000_stPllParam_OutputRef2_get, _eapi.Mo1000_stPllParam_OutputRef2_set)
    __swig_setmethods__["OutputRef3"] = _eapi.Mo1000_stPllParam_OutputRef3_set
    __swig_getmethods__["OutputRef3"] = _eapi.Mo1000_stPllParam_OutputRef3_get
    if _newclass:OutputRef3 = _swig_property(_eapi.Mo1000_stPllParam_OutputRef3_get, _eapi.Mo1000_stPllParam_OutputRef3_set)
    __swig_setmethods__["OutputRef4"] = _eapi.Mo1000_stPllParam_OutputRef4_set
    __swig_getmethods__["OutputRef4"] = _eapi.Mo1000_stPllParam_OutputRef4_get
    if _newclass:OutputRef4 = _swig_property(_eapi.Mo1000_stPllParam_OutputRef4_get, _eapi.Mo1000_stPllParam_OutputRef4_set)
    __swig_setmethods__["uVcoFreq"] = _eapi.Mo1000_stPllParam_uVcoFreq_set
    __swig_getmethods__["uVcoFreq"] = _eapi.Mo1000_stPllParam_uVcoFreq_get
    if _newclass:uVcoFreq = _swig_property(_eapi.Mo1000_stPllParam_uVcoFreq_get, _eapi.Mo1000_stPllParam_uVcoFreq_set)
    __swig_setmethods__["ucPrimaryInputDivider"] = _eapi.Mo1000_stPllParam_ucPrimaryInputDivider_set
    __swig_getmethods__["ucPrimaryInputDivider"] = _eapi.Mo1000_stPllParam_ucPrimaryInputDivider_get
    if _newclass:ucPrimaryInputDivider = _swig_property(_eapi.Mo1000_stPllParam_ucPrimaryInputDivider_get, _eapi.Mo1000_stPllParam_ucPrimaryInputDivider_set)
    __swig_setmethods__["usReferenceDivider"] = _eapi.Mo1000_stPllParam_usReferenceDivider_set
    __swig_getmethods__["usReferenceDivider"] = _eapi.Mo1000_stPllParam_usReferenceDivider_get
    if _newclass:usReferenceDivider = _swig_property(_eapi.Mo1000_stPllParam_usReferenceDivider_get, _eapi.Mo1000_stPllParam_usReferenceDivider_set)
    __swig_setmethods__["usInputDivider"] = _eapi.Mo1000_stPllParam_usInputDivider_set
    __swig_getmethods__["usInputDivider"] = _eapi.Mo1000_stPllParam_usInputDivider_get
    if _newclass:usInputDivider = _swig_property(_eapi.Mo1000_stPllParam_usInputDivider_get, _eapi.Mo1000_stPllParam_usInputDivider_set)
    __swig_setmethods__["usFeedbackDivider"] = _eapi.Mo1000_stPllParam_usFeedbackDivider_set
    __swig_getmethods__["usFeedbackDivider"] = _eapi.Mo1000_stPllParam_usFeedbackDivider_get
    if _newclass:usFeedbackDivider = _swig_property(_eapi.Mo1000_stPllParam_usFeedbackDivider_get, _eapi.Mo1000_stPllParam_usFeedbackDivider_set)
    __swig_setmethods__["ucBypassDivider"] = _eapi.Mo1000_stPllParam_ucBypassDivider_set
    __swig_getmethods__["ucBypassDivider"] = _eapi.Mo1000_stPllParam_ucBypassDivider_get
    if _newclass:ucBypassDivider = _swig_property(_eapi.Mo1000_stPllParam_ucBypassDivider_get, _eapi.Mo1000_stPllParam_ucBypassDivider_set)
    __swig_setmethods__["ucPrescaleDivider"] = _eapi.Mo1000_stPllParam_ucPrescaleDivider_set
    __swig_getmethods__["ucPrescaleDivider"] = _eapi.Mo1000_stPllParam_ucPrescaleDivider_get
    if _newclass:ucPrescaleDivider = _swig_property(_eapi.Mo1000_stPllParam_ucPrescaleDivider_get, _eapi.Mo1000_stPllParam_ucPrescaleDivider_set)
    __swig_setmethods__["aucOutDivider0"] = _eapi.Mo1000_stPllParam_aucOutDivider0_set
    __swig_getmethods__["aucOutDivider0"] = _eapi.Mo1000_stPllParam_aucOutDivider0_get
    if _newclass:aucOutDivider0 = _swig_property(_eapi.Mo1000_stPllParam_aucOutDivider0_get, _eapi.Mo1000_stPllParam_aucOutDivider0_set)
    __swig_setmethods__["aucOutDivider1"] = _eapi.Mo1000_stPllParam_aucOutDivider1_set
    __swig_getmethods__["aucOutDivider1"] = _eapi.Mo1000_stPllParam_aucOutDivider1_get
    if _newclass:aucOutDivider1 = _swig_property(_eapi.Mo1000_stPllParam_aucOutDivider1_get, _eapi.Mo1000_stPllParam_aucOutDivider1_set)
    __swig_setmethods__["aucOutDivider2"] = _eapi.Mo1000_stPllParam_aucOutDivider2_set
    __swig_getmethods__["aucOutDivider2"] = _eapi.Mo1000_stPllParam_aucOutDivider2_get
    if _newclass:aucOutDivider2 = _swig_property(_eapi.Mo1000_stPllParam_aucOutDivider2_get, _eapi.Mo1000_stPllParam_aucOutDivider2_set)
    __swig_setmethods__["aucOutDivider3"] = _eapi.Mo1000_stPllParam_aucOutDivider3_set
    __swig_getmethods__["aucOutDivider3"] = _eapi.Mo1000_stPllParam_aucOutDivider3_get
    if _newclass:aucOutDivider3 = _swig_property(_eapi.Mo1000_stPllParam_aucOutDivider3_get, _eapi.Mo1000_stPllParam_aucOutDivider3_set)
    __swig_setmethods__["aucOutDivider4"] = _eapi.Mo1000_stPllParam_aucOutDivider4_set
    __swig_getmethods__["aucOutDivider4"] = _eapi.Mo1000_stPllParam_aucOutDivider4_get
    if _newclass:aucOutDivider4 = _swig_property(_eapi.Mo1000_stPllParam_aucOutDivider4_get, _eapi.Mo1000_stPllParam_aucOutDivider4_set)
    __swig_setmethods__["R2Value"] = _eapi.Mo1000_stPllParam_R2Value_set
    __swig_getmethods__["R2Value"] = _eapi.Mo1000_stPllParam_R2Value_get
    if _newclass:R2Value = _swig_property(_eapi.Mo1000_stPllParam_R2Value_get, _eapi.Mo1000_stPllParam_R2Value_set)
    __swig_setmethods__["R3Value"] = _eapi.Mo1000_stPllParam_R3Value_set
    __swig_getmethods__["R3Value"] = _eapi.Mo1000_stPllParam_R3Value_get
    if _newclass:R3Value = _swig_property(_eapi.Mo1000_stPllParam_R3Value_get, _eapi.Mo1000_stPllParam_R3Value_set)
    __swig_setmethods__["C1Value"] = _eapi.Mo1000_stPllParam_C1Value_set
    __swig_getmethods__["C1Value"] = _eapi.Mo1000_stPllParam_C1Value_get
    if _newclass:C1Value = _swig_property(_eapi.Mo1000_stPllParam_C1Value_get, _eapi.Mo1000_stPllParam_C1Value_set)
    __swig_setmethods__["C2Value"] = _eapi.Mo1000_stPllParam_C2Value_set
    __swig_getmethods__["C2Value"] = _eapi.Mo1000_stPllParam_C2Value_get
    if _newclass:C2Value = _swig_property(_eapi.Mo1000_stPllParam_C2Value_get, _eapi.Mo1000_stPllParam_C2Value_set)
    __swig_setmethods__["C3Value"] = _eapi.Mo1000_stPllParam_C3Value_set
    __swig_getmethods__["C3Value"] = _eapi.Mo1000_stPllParam_C3Value_get
    if _newclass:C3Value = _swig_property(_eapi.Mo1000_stPllParam_C3Value_get, _eapi.Mo1000_stPllParam_C3Value_set)
    __swig_setmethods__["ChargePump"] = _eapi.Mo1000_stPllParam_ChargePump_set
    __swig_getmethods__["ChargePump"] = _eapi.Mo1000_stPllParam_ChargePump_get
    if _newclass:ChargePump = _swig_property(_eapi.Mo1000_stPllParam_ChargePump_get, _eapi.Mo1000_stPllParam_ChargePump_set)
    def __init__(self): 
        this = _eapi.new_Mo1000_stPllParam()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_Mo1000_stPllParam
    __del__ = lambda self : None;
Mo1000_stPllParam_swigregister = _eapi.Mo1000_stPllParam_swigregister
Mo1000_stPllParam_swigregister(Mo1000_stPllParam)

class Mo1000_stMo1000(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mo1000_stMo1000, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mo1000_stMo1000, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pCore"] = _eapi.Mo1000_stMo1000_pCore_set
    __swig_getmethods__["pCore"] = _eapi.Mo1000_stMo1000_pCore_get
    if _newclass:pCore = _swig_property(_eapi.Mo1000_stMo1000_pCore_get, _eapi.Mo1000_stMo1000_pCore_set)
    __swig_setmethods__["Com"] = _eapi.Mo1000_stMo1000_Com_set
    __swig_getmethods__["Com"] = _eapi.Mo1000_stMo1000_Com_get
    if _newclass:Com = _swig_property(_eapi.Mo1000_stMo1000_Com_get, _eapi.Mo1000_stMo1000_Com_set)
    __swig_setmethods__["hCom"] = _eapi.Mo1000_stMo1000_hCom_set
    __swig_getmethods__["hCom"] = _eapi.Mo1000_stMo1000_hCom_get
    if _newclass:hCom = _swig_property(_eapi.Mo1000_stMo1000_hCom_get, _eapi.Mo1000_stMo1000_hCom_set)
    __swig_setmethods__["Expander"] = _eapi.Mo1000_stMo1000_Expander_set
    __swig_getmethods__["Expander"] = _eapi.Mo1000_stMo1000_Expander_get
    if _newclass:Expander = _swig_property(_eapi.Mo1000_stMo1000_Expander_get, _eapi.Mo1000_stMo1000_Expander_set)
    __swig_setmethods__["Dac"] = _eapi.Mo1000_stMo1000_Dac_set
    __swig_getmethods__["Dac"] = _eapi.Mo1000_stMo1000_Dac_get
    if _newclass:Dac = _swig_property(_eapi.Mo1000_stMo1000_Dac_get, _eapi.Mo1000_stMo1000_Dac_set)
    __swig_setmethods__["Monitor"] = _eapi.Mo1000_stMo1000_Monitor_set
    __swig_getmethods__["Monitor"] = _eapi.Mo1000_stMo1000_Monitor_get
    if _newclass:Monitor = _swig_property(_eapi.Mo1000_stMo1000_Monitor_get, _eapi.Mo1000_stMo1000_Monitor_set)
    __swig_setmethods__["Pll"] = _eapi.Mo1000_stMo1000_Pll_set
    __swig_getmethods__["Pll"] = _eapi.Mo1000_stMo1000_Pll_get
    if _newclass:Pll = _swig_property(_eapi.Mo1000_stMo1000_Pll_get, _eapi.Mo1000_stMo1000_Pll_set)
    __swig_setmethods__["GroupCh"] = _eapi.Mo1000_stMo1000_GroupCh_set
    __swig_getmethods__["GroupCh"] = _eapi.Mo1000_stMo1000_GroupCh_get
    if _newclass:GroupCh = _swig_property(_eapi.Mo1000_stMo1000_GroupCh_get, _eapi.Mo1000_stMo1000_GroupCh_set)
    __swig_setmethods__["DacConfig"] = _eapi.Mo1000_stMo1000_DacConfig_set
    __swig_getmethods__["DacConfig"] = _eapi.Mo1000_stMo1000_DacConfig_get
    if _newclass:DacConfig = _swig_property(_eapi.Mo1000_stMo1000_DacConfig_get, _eapi.Mo1000_stMo1000_DacConfig_set)
    __swig_setmethods__["hCarrier"] = _eapi.Mo1000_stMo1000_hCarrier_set
    __swig_getmethods__["hCarrier"] = _eapi.Mo1000_stMo1000_hCarrier_get
    if _newclass:hCarrier = _swig_property(_eapi.Mo1000_stMo1000_hCarrier_get, _eapi.Mo1000_stMo1000_hCarrier_set)
    __swig_setmethods__["FmcConnector"] = _eapi.Mo1000_stMo1000_FmcConnector_set
    __swig_getmethods__["FmcConnector"] = _eapi.Mo1000_stMo1000_FmcConnector_get
    if _newclass:FmcConnector = _swig_property(_eapi.Mo1000_stMo1000_FmcConnector_get, _eapi.Mo1000_stMo1000_FmcConnector_set)
    __swig_setmethods__["iResetDone"] = _eapi.Mo1000_stMo1000_iResetDone_set
    __swig_getmethods__["iResetDone"] = _eapi.Mo1000_stMo1000_iResetDone_get
    if _newclass:iResetDone = _swig_property(_eapi.Mo1000_stMo1000_iResetDone_get, _eapi.Mo1000_stMo1000_iResetDone_set)
    __swig_setmethods__["iInitDone"] = _eapi.Mo1000_stMo1000_iInitDone_set
    __swig_getmethods__["iInitDone"] = _eapi.Mo1000_stMo1000_iInitDone_get
    if _newclass:iInitDone = _swig_property(_eapi.Mo1000_stMo1000_iInitDone_get, _eapi.Mo1000_stMo1000_iInitDone_set)
    __swig_setmethods__["iSynthDone"] = _eapi.Mo1000_stMo1000_iSynthDone_set
    __swig_getmethods__["iSynthDone"] = _eapi.Mo1000_stMo1000_iSynthDone_get
    if _newclass:iSynthDone = _swig_property(_eapi.Mo1000_stMo1000_iSynthDone_get, _eapi.Mo1000_stMo1000_iSynthDone_set)
    __swig_setmethods__["iLoopFilterDone"] = _eapi.Mo1000_stMo1000_iLoopFilterDone_set
    __swig_getmethods__["iLoopFilterDone"] = _eapi.Mo1000_stMo1000_iLoopFilterDone_get
    if _newclass:iLoopFilterDone = _swig_property(_eapi.Mo1000_stMo1000_iLoopFilterDone_get, _eapi.Mo1000_stMo1000_iLoopFilterDone_set)
    __swig_setmethods__["pausLaneDelays"] = _eapi.Mo1000_stMo1000_pausLaneDelays_set
    __swig_getmethods__["pausLaneDelays"] = _eapi.Mo1000_stMo1000_pausLaneDelays_get
    if _newclass:pausLaneDelays = _swig_property(_eapi.Mo1000_stMo1000_pausLaneDelays_get, _eapi.Mo1000_stMo1000_pausLaneDelays_set)
    __swig_setmethods__["auChannelsLaneCalib"] = _eapi.Mo1000_stMo1000_auChannelsLaneCalib_set
    __swig_getmethods__["auChannelsLaneCalib"] = _eapi.Mo1000_stMo1000_auChannelsLaneCalib_get
    if _newclass:auChannelsLaneCalib = _swig_property(_eapi.Mo1000_stMo1000_auChannelsLaneCalib_get, _eapi.Mo1000_stMo1000_auChannelsLaneCalib_set)
    __swig_setmethods__["uCalibNdx"] = _eapi.Mo1000_stMo1000_uCalibNdx_set
    __swig_getmethods__["uCalibNdx"] = _eapi.Mo1000_stMo1000_uCalibNdx_get
    if _newclass:uCalibNdx = _swig_property(_eapi.Mo1000_stMo1000_uCalibNdx_get, _eapi.Mo1000_stMo1000_uCalibNdx_set)
    __swig_setmethods__["auFrameLaneCalib"] = _eapi.Mo1000_stMo1000_auFrameLaneCalib_set
    __swig_getmethods__["auFrameLaneCalib"] = _eapi.Mo1000_stMo1000_auFrameLaneCalib_get
    if _newclass:auFrameLaneCalib = _swig_property(_eapi.Mo1000_stMo1000_auFrameLaneCalib_get, _eapi.Mo1000_stMo1000_auFrameLaneCalib_set)
    __swig_setmethods__["uCalibFrameNdx"] = _eapi.Mo1000_stMo1000_uCalibFrameNdx_set
    __swig_getmethods__["uCalibFrameNdx"] = _eapi.Mo1000_stMo1000_uCalibFrameNdx_get
    if _newclass:uCalibFrameNdx = _swig_property(_eapi.Mo1000_stMo1000_uCalibFrameNdx_get, _eapi.Mo1000_stMo1000_uCalibFrameNdx_set)
    __swig_setmethods__["auSyncCalib"] = _eapi.Mo1000_stMo1000_auSyncCalib_set
    __swig_getmethods__["auSyncCalib"] = _eapi.Mo1000_stMo1000_auSyncCalib_get
    if _newclass:auSyncCalib = _swig_property(_eapi.Mo1000_stMo1000_auSyncCalib_get, _eapi.Mo1000_stMo1000_auSyncCalib_set)
    __swig_setmethods__["uCalibSyncNdx"] = _eapi.Mo1000_stMo1000_uCalibSyncNdx_set
    __swig_getmethods__["uCalibSyncNdx"] = _eapi.Mo1000_stMo1000_uCalibSyncNdx_get
    if _newclass:uCalibSyncNdx = _swig_property(_eapi.Mo1000_stMo1000_uCalibSyncNdx_get, _eapi.Mo1000_stMo1000_uCalibSyncNdx_set)
    __swig_setmethods__["iCalibDone"] = _eapi.Mo1000_stMo1000_iCalibDone_set
    __swig_getmethods__["iCalibDone"] = _eapi.Mo1000_stMo1000_iCalibDone_get
    if _newclass:iCalibDone = _swig_property(_eapi.Mo1000_stMo1000_iCalibDone_get, _eapi.Mo1000_stMo1000_iCalibDone_set)
    __swig_setmethods__["iDataCalibDone"] = _eapi.Mo1000_stMo1000_iDataCalibDone_set
    __swig_getmethods__["iDataCalibDone"] = _eapi.Mo1000_stMo1000_iDataCalibDone_get
    if _newclass:iDataCalibDone = _swig_property(_eapi.Mo1000_stMo1000_iDataCalibDone_get, _eapi.Mo1000_stMo1000_iDataCalibDone_set)
    __swig_setmethods__["iFrameCalibDone"] = _eapi.Mo1000_stMo1000_iFrameCalibDone_set
    __swig_getmethods__["iFrameCalibDone"] = _eapi.Mo1000_stMo1000_iFrameCalibDone_get
    if _newclass:iFrameCalibDone = _swig_property(_eapi.Mo1000_stMo1000_iFrameCalibDone_get, _eapi.Mo1000_stMo1000_iFrameCalibDone_set)
    __swig_setmethods__["iSyncCalibDone"] = _eapi.Mo1000_stMo1000_iSyncCalibDone_set
    __swig_getmethods__["iSyncCalibDone"] = _eapi.Mo1000_stMo1000_iSyncCalibDone_get
    if _newclass:iSyncCalibDone = _swig_property(_eapi.Mo1000_stMo1000_iSyncCalibDone_get, _eapi.Mo1000_stMo1000_iSyncCalibDone_set)
    __swig_setmethods__["iTestMode"] = _eapi.Mo1000_stMo1000_iTestMode_set
    __swig_getmethods__["iTestMode"] = _eapi.Mo1000_stMo1000_iTestMode_get
    if _newclass:iTestMode = _swig_property(_eapi.Mo1000_stMo1000_iTestMode_get, _eapi.Mo1000_stMo1000_iTestMode_set)
    __swig_setmethods__["FmcPosition"] = _eapi.Mo1000_stMo1000_FmcPosition_set
    __swig_getmethods__["FmcPosition"] = _eapi.Mo1000_stMo1000_FmcPosition_get
    if _newclass:FmcPosition = _swig_property(_eapi.Mo1000_stMo1000_FmcPosition_get, _eapi.Mo1000_stMo1000_FmcPosition_set)
    __swig_setmethods__["iResetInProg"] = _eapi.Mo1000_stMo1000_iResetInProg_set
    __swig_getmethods__["iResetInProg"] = _eapi.Mo1000_stMo1000_iResetInProg_get
    if _newclass:iResetInProg = _swig_property(_eapi.Mo1000_stMo1000_iResetInProg_get, _eapi.Mo1000_stMo1000_iResetInProg_set)
    __swig_setmethods__["uChannelLaneMask"] = _eapi.Mo1000_stMo1000_uChannelLaneMask_set
    __swig_getmethods__["uChannelLaneMask"] = _eapi.Mo1000_stMo1000_uChannelLaneMask_get
    if _newclass:uChannelLaneMask = _swig_property(_eapi.Mo1000_stMo1000_uChannelLaneMask_get, _eapi.Mo1000_stMo1000_uChannelLaneMask_set)
    __swig_setmethods__["HardwareRev"] = _eapi.Mo1000_stMo1000_HardwareRev_set
    __swig_getmethods__["HardwareRev"] = _eapi.Mo1000_stMo1000_HardwareRev_get
    if _newclass:HardwareRev = _swig_property(_eapi.Mo1000_stMo1000_HardwareRev_get, _eapi.Mo1000_stMo1000_HardwareRev_set)
    __swig_setmethods__["ucDciIoDelay"] = _eapi.Mo1000_stMo1000_ucDciIoDelay_set
    __swig_getmethods__["ucDciIoDelay"] = _eapi.Mo1000_stMo1000_ucDciIoDelay_get
    if _newclass:ucDciIoDelay = _swig_property(_eapi.Mo1000_stMo1000_ucDciIoDelay_get, _eapi.Mo1000_stMo1000_ucDciIoDelay_set)
    __swig_setmethods__["pucBottomDciIoDelay"] = _eapi.Mo1000_stMo1000_pucBottomDciIoDelay_set
    __swig_getmethods__["pucBottomDciIoDelay"] = _eapi.Mo1000_stMo1000_pucBottomDciIoDelay_get
    if _newclass:pucBottomDciIoDelay = _swig_property(_eapi.Mo1000_stMo1000_pucBottomDciIoDelay_get, _eapi.Mo1000_stMo1000_pucBottomDciIoDelay_set)
    __swig_setmethods__["cTapsDelayOffset"] = _eapi.Mo1000_stMo1000_cTapsDelayOffset_set
    __swig_getmethods__["cTapsDelayOffset"] = _eapi.Mo1000_stMo1000_cTapsDelayOffset_get
    if _newclass:cTapsDelayOffset = _swig_property(_eapi.Mo1000_stMo1000_cTapsDelayOffset_get, _eapi.Mo1000_stMo1000_cTapsDelayOffset_set)
    __swig_setmethods__["cLaneOffset"] = _eapi.Mo1000_stMo1000_cLaneOffset_set
    __swig_getmethods__["cLaneOffset"] = _eapi.Mo1000_stMo1000_cLaneOffset_get
    if _newclass:cLaneOffset = _swig_property(_eapi.Mo1000_stMo1000_cLaneOffset_get, _eapi.Mo1000_stMo1000_cLaneOffset_set)
    __swig_setmethods__["usRefDelay"] = _eapi.Mo1000_stMo1000_usRefDelay_set
    __swig_getmethods__["usRefDelay"] = _eapi.Mo1000_stMo1000_usRefDelay_get
    if _newclass:usRefDelay = _swig_property(_eapi.Mo1000_stMo1000_usRefDelay_get, _eapi.Mo1000_stMo1000_usRefDelay_set)
    __swig_setmethods__["pusBottomRefDelay"] = _eapi.Mo1000_stMo1000_pusBottomRefDelay_set
    __swig_getmethods__["pusBottomRefDelay"] = _eapi.Mo1000_stMo1000_pusBottomRefDelay_get
    if _newclass:pusBottomRefDelay = _swig_property(_eapi.Mo1000_stMo1000_pusBottomRefDelay_get, _eapi.Mo1000_stMo1000_pusBottomRefDelay_set)
    __swig_setmethods__["usDciDelay"] = _eapi.Mo1000_stMo1000_usDciDelay_set
    __swig_getmethods__["usDciDelay"] = _eapi.Mo1000_stMo1000_usDciDelay_get
    if _newclass:usDciDelay = _swig_property(_eapi.Mo1000_stMo1000_usDciDelay_get, _eapi.Mo1000_stMo1000_usDciDelay_set)
    __swig_setmethods__["pusBottomDciDelay"] = _eapi.Mo1000_stMo1000_pusBottomDciDelay_set
    __swig_getmethods__["pusBottomDciDelay"] = _eapi.Mo1000_stMo1000_pusBottomDciDelay_get
    if _newclass:pusBottomDciDelay = _swig_property(_eapi.Mo1000_stMo1000_pusBottomDciDelay_get, _eapi.Mo1000_stMo1000_pusBottomDciDelay_set)
    __swig_setmethods__["uDataTapTable0"] = _eapi.Mo1000_stMo1000_uDataTapTable0_set
    __swig_getmethods__["uDataTapTable0"] = _eapi.Mo1000_stMo1000_uDataTapTable0_get
    if _newclass:uDataTapTable0 = _swig_property(_eapi.Mo1000_stMo1000_uDataTapTable0_get, _eapi.Mo1000_stMo1000_uDataTapTable0_set)
    __swig_setmethods__["uFrameTapTable"] = _eapi.Mo1000_stMo1000_uFrameTapTable_set
    __swig_getmethods__["uFrameTapTable"] = _eapi.Mo1000_stMo1000_uFrameTapTable_get
    if _newclass:uFrameTapTable = _swig_property(_eapi.Mo1000_stMo1000_uFrameTapTable_get, _eapi.Mo1000_stMo1000_uFrameTapTable_set)
    __swig_setmethods__["ucDataRefLane"] = _eapi.Mo1000_stMo1000_ucDataRefLane_set
    __swig_getmethods__["ucDataRefLane"] = _eapi.Mo1000_stMo1000_ucDataRefLane_get
    if _newclass:ucDataRefLane = _swig_property(_eapi.Mo1000_stMo1000_ucDataRefLane_get, _eapi.Mo1000_stMo1000_ucDataRefLane_set)
    __swig_setmethods__["ucDataRefIoDelay"] = _eapi.Mo1000_stMo1000_ucDataRefIoDelay_set
    __swig_getmethods__["ucDataRefIoDelay"] = _eapi.Mo1000_stMo1000_ucDataRefIoDelay_get
    if _newclass:ucDataRefIoDelay = _swig_property(_eapi.Mo1000_stMo1000_ucDataRefIoDelay_get, _eapi.Mo1000_stMo1000_ucDataRefIoDelay_set)
    __swig_setmethods__["pucBottomDataRefIoDelay"] = _eapi.Mo1000_stMo1000_pucBottomDataRefIoDelay_set
    __swig_getmethods__["pucBottomDataRefIoDelay"] = _eapi.Mo1000_stMo1000_pucBottomDataRefIoDelay_get
    if _newclass:pucBottomDataRefIoDelay = _swig_property(_eapi.Mo1000_stMo1000_pucBottomDataRefIoDelay_get, _eapi.Mo1000_stMo1000_pucBottomDataRefIoDelay_set)
    __swig_setmethods__["ucDciInverted"] = _eapi.Mo1000_stMo1000_ucDciInverted_set
    __swig_getmethods__["ucDciInverted"] = _eapi.Mo1000_stMo1000_ucDciInverted_get
    if _newclass:ucDciInverted = _swig_property(_eapi.Mo1000_stMo1000_ucDciInverted_get, _eapi.Mo1000_stMo1000_ucDciInverted_set)
    __swig_setmethods__["pucBottomDciInverted"] = _eapi.Mo1000_stMo1000_pucBottomDciInverted_set
    __swig_getmethods__["pucBottomDciInverted"] = _eapi.Mo1000_stMo1000_pucBottomDciInverted_get
    if _newclass:pucBottomDciInverted = _swig_property(_eapi.Mo1000_stMo1000_pucBottomDciInverted_get, _eapi.Mo1000_stMo1000_pucBottomDciInverted_set)
    __swig_setmethods__["ucDataIoDelTable"] = _eapi.Mo1000_stMo1000_ucDataIoDelTable_set
    __swig_getmethods__["ucDataIoDelTable"] = _eapi.Mo1000_stMo1000_ucDataIoDelTable_get
    if _newclass:ucDataIoDelTable = _swig_property(_eapi.Mo1000_stMo1000_ucDataIoDelTable_get, _eapi.Mo1000_stMo1000_ucDataIoDelTable_set)
    __swig_setmethods__["ucDataIoGroupCount"] = _eapi.Mo1000_stMo1000_ucDataIoGroupCount_set
    __swig_getmethods__["ucDataIoGroupCount"] = _eapi.Mo1000_stMo1000_ucDataIoGroupCount_get
    if _newclass:ucDataIoGroupCount = _swig_property(_eapi.Mo1000_stMo1000_ucDataIoGroupCount_get, _eapi.Mo1000_stMo1000_ucDataIoGroupCount_set)
    __swig_setmethods__["ucDataIoGroupEnd"] = _eapi.Mo1000_stMo1000_ucDataIoGroupEnd_set
    __swig_getmethods__["ucDataIoGroupEnd"] = _eapi.Mo1000_stMo1000_ucDataIoGroupEnd_get
    if _newclass:ucDataIoGroupEnd = _swig_property(_eapi.Mo1000_stMo1000_ucDataIoGroupEnd_get, _eapi.Mo1000_stMo1000_ucDataIoGroupEnd_set)
    __swig_setmethods__["ucDataSmallestPosDciTol"] = _eapi.Mo1000_stMo1000_ucDataSmallestPosDciTol_set
    __swig_getmethods__["ucDataSmallestPosDciTol"] = _eapi.Mo1000_stMo1000_ucDataSmallestPosDciTol_get
    if _newclass:ucDataSmallestPosDciTol = _swig_property(_eapi.Mo1000_stMo1000_ucDataSmallestPosDciTol_get, _eapi.Mo1000_stMo1000_ucDataSmallestPosDciTol_set)
    __swig_setmethods__["ucDataSmallestNegDciTol"] = _eapi.Mo1000_stMo1000_ucDataSmallestNegDciTol_set
    __swig_getmethods__["ucDataSmallestNegDciTol"] = _eapi.Mo1000_stMo1000_ucDataSmallestNegDciTol_get
    if _newclass:ucDataSmallestNegDciTol = _swig_property(_eapi.Mo1000_stMo1000_ucDataSmallestNegDciTol_get, _eapi.Mo1000_stMo1000_ucDataSmallestNegDciTol_set)
    __swig_setmethods__["ucDataSmallestDelay"] = _eapi.Mo1000_stMo1000_ucDataSmallestDelay_set
    __swig_getmethods__["ucDataSmallestDelay"] = _eapi.Mo1000_stMo1000_ucDataSmallestDelay_get
    if _newclass:ucDataSmallestDelay = _swig_property(_eapi.Mo1000_stMo1000_ucDataSmallestDelay_get, _eapi.Mo1000_stMo1000_ucDataSmallestDelay_set)
    __swig_setmethods__["ucDataGreatestDelay"] = _eapi.Mo1000_stMo1000_ucDataGreatestDelay_set
    __swig_getmethods__["ucDataGreatestDelay"] = _eapi.Mo1000_stMo1000_ucDataGreatestDelay_get
    if _newclass:ucDataGreatestDelay = _swig_property(_eapi.Mo1000_stMo1000_ucDataGreatestDelay_get, _eapi.Mo1000_stMo1000_ucDataGreatestDelay_set)
    __swig_setmethods__["ucFrameIoDelay"] = _eapi.Mo1000_stMo1000_ucFrameIoDelay_set
    __swig_getmethods__["ucFrameIoDelay"] = _eapi.Mo1000_stMo1000_ucFrameIoDelay_get
    if _newclass:ucFrameIoDelay = _swig_property(_eapi.Mo1000_stMo1000_ucFrameIoDelay_get, _eapi.Mo1000_stMo1000_ucFrameIoDelay_set)
    __swig_setmethods__["ucFrameGroupCount"] = _eapi.Mo1000_stMo1000_ucFrameGroupCount_set
    __swig_getmethods__["ucFrameGroupCount"] = _eapi.Mo1000_stMo1000_ucFrameGroupCount_get
    if _newclass:ucFrameGroupCount = _swig_property(_eapi.Mo1000_stMo1000_ucFrameGroupCount_get, _eapi.Mo1000_stMo1000_ucFrameGroupCount_set)
    __swig_setmethods__["ucFrameGroupEnd"] = _eapi.Mo1000_stMo1000_ucFrameGroupEnd_set
    __swig_getmethods__["ucFrameGroupEnd"] = _eapi.Mo1000_stMo1000_ucFrameGroupEnd_get
    if _newclass:ucFrameGroupEnd = _swig_property(_eapi.Mo1000_stMo1000_ucFrameGroupEnd_get, _eapi.Mo1000_stMo1000_ucFrameGroupEnd_set)
    __swig_setmethods__["ucFramePattern"] = _eapi.Mo1000_stMo1000_ucFramePattern_set
    __swig_getmethods__["ucFramePattern"] = _eapi.Mo1000_stMo1000_ucFramePattern_get
    if _newclass:ucFramePattern = _swig_property(_eapi.Mo1000_stMo1000_ucFramePattern_get, _eapi.Mo1000_stMo1000_ucFramePattern_set)
    __swig_setmethods__["ucFrameSmallestPosDciTol"] = _eapi.Mo1000_stMo1000_ucFrameSmallestPosDciTol_set
    __swig_getmethods__["ucFrameSmallestPosDciTol"] = _eapi.Mo1000_stMo1000_ucFrameSmallestPosDciTol_get
    if _newclass:ucFrameSmallestPosDciTol = _swig_property(_eapi.Mo1000_stMo1000_ucFrameSmallestPosDciTol_get, _eapi.Mo1000_stMo1000_ucFrameSmallestPosDciTol_set)
    __swig_setmethods__["ucFrameSmallestNegDciTol"] = _eapi.Mo1000_stMo1000_ucFrameSmallestNegDciTol_set
    __swig_getmethods__["ucFrameSmallestNegDciTol"] = _eapi.Mo1000_stMo1000_ucFrameSmallestNegDciTol_get
    if _newclass:ucFrameSmallestNegDciTol = _swig_property(_eapi.Mo1000_stMo1000_ucFrameSmallestNegDciTol_get, _eapi.Mo1000_stMo1000_ucFrameSmallestNegDciTol_set)
    __swig_setmethods__["usFifoTherm"] = _eapi.Mo1000_stMo1000_usFifoTherm_set
    __swig_getmethods__["usFifoTherm"] = _eapi.Mo1000_stMo1000_usFifoTherm_get
    if _newclass:usFifoTherm = _swig_property(_eapi.Mo1000_stMo1000_usFifoTherm_get, _eapi.Mo1000_stMo1000_usFifoTherm_set)
    __swig_setmethods__["usFifoThermV"] = _eapi.Mo1000_stMo1000_usFifoThermV_set
    __swig_getmethods__["usFifoThermV"] = _eapi.Mo1000_stMo1000_usFifoThermV_get
    if _newclass:usFifoThermV = _swig_property(_eapi.Mo1000_stMo1000_usFifoThermV_get, _eapi.Mo1000_stMo1000_usFifoThermV_set)
    __swig_setmethods__["ucFifoThermOff"] = _eapi.Mo1000_stMo1000_ucFifoThermOff_set
    __swig_getmethods__["ucFifoThermOff"] = _eapi.Mo1000_stMo1000_ucFifoThermOff_get
    if _newclass:ucFifoThermOff = _swig_property(_eapi.Mo1000_stMo1000_ucFifoThermOff_get, _eapi.Mo1000_stMo1000_ucFifoThermOff_set)
    __swig_setmethods__["ucFifoThermVOff"] = _eapi.Mo1000_stMo1000_ucFifoThermVOff_set
    __swig_getmethods__["ucFifoThermVOff"] = _eapi.Mo1000_stMo1000_ucFifoThermVOff_get
    if _newclass:ucFifoThermVOff = _swig_property(_eapi.Mo1000_stMo1000_ucFifoThermVOff_get, _eapi.Mo1000_stMo1000_ucFifoThermVOff_set)
    __swig_setmethods__["Reference"] = _eapi.Mo1000_stMo1000_Reference_set
    __swig_getmethods__["Reference"] = _eapi.Mo1000_stMo1000_Reference_get
    if _newclass:Reference = _swig_property(_eapi.Mo1000_stMo1000_Reference_get, _eapi.Mo1000_stMo1000_Reference_set)
    __swig_setmethods__["uFreqSrcClk"] = _eapi.Mo1000_stMo1000_uFreqSrcClk_set
    __swig_getmethods__["uFreqSrcClk"] = _eapi.Mo1000_stMo1000_uFreqSrcClk_get
    if _newclass:uFreqSrcClk = _swig_property(_eapi.Mo1000_stMo1000_uFreqSrcClk_get, _eapi.Mo1000_stMo1000_uFreqSrcClk_set)
    __swig_setmethods__["iFreqDacClock1"] = _eapi.Mo1000_stMo1000_iFreqDacClock1_set
    __swig_getmethods__["iFreqDacClock1"] = _eapi.Mo1000_stMo1000_iFreqDacClock1_get
    if _newclass:iFreqDacClock1 = _swig_property(_eapi.Mo1000_stMo1000_iFreqDacClock1_get, _eapi.Mo1000_stMo1000_iFreqDacClock1_set)
    __swig_setmethods__["iFreqMasterClock3"] = _eapi.Mo1000_stMo1000_iFreqMasterClock3_set
    __swig_getmethods__["iFreqMasterClock3"] = _eapi.Mo1000_stMo1000_iFreqMasterClock3_get
    if _newclass:iFreqMasterClock3 = _swig_property(_eapi.Mo1000_stMo1000_iFreqMasterClock3_get, _eapi.Mo1000_stMo1000_iFreqMasterClock3_set)
    __swig_setmethods__["iFreqMasterRef2"] = _eapi.Mo1000_stMo1000_iFreqMasterRef2_set
    __swig_getmethods__["iFreqMasterRef2"] = _eapi.Mo1000_stMo1000_iFreqMasterRef2_get
    if _newclass:iFreqMasterRef2 = _swig_property(_eapi.Mo1000_stMo1000_iFreqMasterRef2_get, _eapi.Mo1000_stMo1000_iFreqMasterRef2_set)
    __swig_setmethods__["iFreqCoreRef4"] = _eapi.Mo1000_stMo1000_iFreqCoreRef4_set
    __swig_getmethods__["iFreqCoreRef4"] = _eapi.Mo1000_stMo1000_iFreqCoreRef4_get
    if _newclass:iFreqCoreRef4 = _swig_property(_eapi.Mo1000_stMo1000_iFreqCoreRef4_get, _eapi.Mo1000_stMo1000_iFreqCoreRef4_set)
    __swig_setmethods__["iFreqSyncClock0"] = _eapi.Mo1000_stMo1000_iFreqSyncClock0_set
    __swig_getmethods__["iFreqSyncClock0"] = _eapi.Mo1000_stMo1000_iFreqSyncClock0_get
    if _newclass:iFreqSyncClock0 = _swig_property(_eapi.Mo1000_stMo1000_iFreqSyncClock0_get, _eapi.Mo1000_stMo1000_iFreqSyncClock0_set)
    __swig_setmethods__["iFreqCoreRef4Calculated"] = _eapi.Mo1000_stMo1000_iFreqCoreRef4Calculated_set
    __swig_getmethods__["iFreqCoreRef4Calculated"] = _eapi.Mo1000_stMo1000_iFreqCoreRef4Calculated_get
    if _newclass:iFreqCoreRef4Calculated = _swig_property(_eapi.Mo1000_stMo1000_iFreqCoreRef4Calculated_get, _eapi.Mo1000_stMo1000_iFreqCoreRef4Calculated_set)
    __swig_setmethods__["iFreqVirtualClock5"] = _eapi.Mo1000_stMo1000_iFreqVirtualClock5_set
    __swig_getmethods__["iFreqVirtualClock5"] = _eapi.Mo1000_stMo1000_iFreqVirtualClock5_get
    if _newclass:iFreqVirtualClock5 = _swig_property(_eapi.Mo1000_stMo1000_iFreqVirtualClock5_get, _eapi.Mo1000_stMo1000_iFreqVirtualClock5_set)
    __swig_setmethods__["stParam"] = _eapi.Mo1000_stMo1000_stParam_set
    __swig_getmethods__["stParam"] = _eapi.Mo1000_stMo1000_stParam_get
    if _newclass:stParam = _swig_property(_eapi.Mo1000_stMo1000_stParam_get, _eapi.Mo1000_stMo1000_stParam_set)
    def __init__(self): 
        this = _eapi.new_Mo1000_stMo1000()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_Mo1000_stMo1000
    __del__ = lambda self : None;
Mo1000_stMo1000_swigregister = _eapi.Mo1000_stMo1000_swigregister
Mo1000_stMo1000_swigregister(Mo1000_stMo1000)

eMo1000Ok = _eapi.eMo1000Ok
eMo1000InvalidDevice01 = _eapi.eMo1000InvalidDevice01
eMo1000InvalidDevice02 = _eapi.eMo1000InvalidDevice02
eMo1000InvalidCoreReg01 = _eapi.eMo1000InvalidCoreReg01
eMo1000InvalidCoreReg02 = _eapi.eMo1000InvalidCoreReg02
eMo1000BadUseCFct = _eapi.eMo1000BadUseCFct
eMo1000NoCore = _eapi.eMo1000NoCore
eMo1000UnknownRevision = _eapi.eMo1000UnknownRevision
eMo1000NoReset01 = _eapi.eMo1000NoReset01
eMo1000NoInit01 = _eapi.eMo1000NoInit01
eMo1000NoInit02 = _eapi.eMo1000NoInit02
eMo1000InvalidClkTop = _eapi.eMo1000InvalidClkTop
eMo1000Absent = _eapi.eMo1000Absent
eMo1000NoInit03 = _eapi.eMo1000NoInit03
eMo1000NoInit04 = _eapi.eMo1000NoInit04
eMo1000NoReadSync = _eapi.eMo1000NoReadSync
eMo1000ReadSyncLost = _eapi.eMo1000ReadSyncLost
eMo1000FifoTher = _eapi.eMo1000FifoTher
eMo1000FifoWar = _eapi.eMo1000FifoWar
eMo1000NoInit05 = _eapi.eMo1000NoInit05
eMo1000NoIDelayReady = _eapi.eMo1000NoIDelayReady
eMo1000NoMmcmLock = _eapi.eMo1000NoMmcmLock
eMo1000DataTraining = _eapi.eMo1000DataTraining
eMo1000NoInit06 = _eapi.eMo1000NoInit06
eMo1000InvalidClkSrc = _eapi.eMo1000InvalidClkSrc
eMo1000UnsupportedClkSrc = _eapi.eMo1000UnsupportedClkSrc
eMo1000InvalidBottomClk = _eapi.eMo1000InvalidBottomClk
eMo1000InvalidTopClk = _eapi.eMo1000InvalidTopClk
eMo1000DacClkOver = _eapi.eMo1000DacClkOver
eMo1000InvalidInterRate = _eapi.eMo1000InvalidInterRate
eMo1000BadMasterClkMode = _eapi.eMo1000BadMasterClkMode
eMo1000BadMasterClkFreq = _eapi.eMo1000BadMasterClkFreq
eMo1000MmcmLock = _eapi.eMo1000MmcmLock
eMo1000FrameTraining = _eapi.eMo1000FrameTraining
eMo1000NoInit07 = _eapi.eMo1000NoInit07
eMo1000InvalidChannel01 = _eapi.eMo1000InvalidChannel01
eMo1000InvalidState01 = _eapi.eMo1000InvalidState01
eMo1000NoInit08 = _eapi.eMo1000NoInit08
eMo1000InvalidInterMode = _eapi.eMo1000InvalidInterMode
eMo1000NoInit09 = _eapi.eMo1000NoInit09
eMo1000NoInit10 = _eapi.eMo1000NoInit10
eMo1000InvalidChannel02 = _eapi.eMo1000InvalidChannel02
eMo1000InvalidChannel03 = _eapi.eMo1000InvalidChannel03
eMo1000NoInit11 = _eapi.eMo1000NoInit11
eMo1000InvalidActChannel = _eapi.eMo1000InvalidActChannel
eMo1000FifoTherWrong = _eapi.eMo1000FifoTherWrong
eMo1000FifoTherNotSet = _eapi.eMo1000FifoTherNotSet
eMo1000FifoTherWrong2 = _eapi.eMo1000FifoTherWrong2
eMo1000FifoTher2 = _eapi.eMo1000FifoTher2
eMo1000NoInit12 = _eapi.eMo1000NoInit12
eMo1000InvalidDacPair01 = _eapi.eMo1000InvalidDacPair01
eMo1000NoInit13 = _eapi.eMo1000NoInit13
eMo1000InvalidDacGroup01 = _eapi.eMo1000InvalidDacGroup01
eMo1000InvalidState02 = _eapi.eMo1000InvalidState02
eMo1000NoInit14 = _eapi.eMo1000NoInit14
eMo1000InvalidDacGroup02 = _eapi.eMo1000InvalidDacGroup02
eMo1000InvalidSideBand = _eapi.eMo1000InvalidSideBand
eMo1000NoInit15 = _eapi.eMo1000NoInit15
eMo1000InvalidDacGroup03 = _eapi.eMo1000InvalidDacGroup03
eMo1000InvalidNCOState = _eapi.eMo1000InvalidNCOState
eMo1000NoInit16 = _eapi.eMo1000NoInit16
eMo1000InvalidDacGroup04 = _eapi.eMo1000InvalidDacGroup04
eMo1000InvalidDataFormat = _eapi.eMo1000InvalidDataFormat
eMo1000NoInit17 = _eapi.eMo1000NoInit17
eMo1000InvalidDacPair02 = _eapi.eMo1000InvalidDacPair02
eMo1000NoReset02 = _eapi.eMo1000NoReset02
eMo1000NoReset03 = _eapi.eMo1000NoReset03
eMo1000NoReset04 = _eapi.eMo1000NoReset04
eMo1000NoReset05 = _eapi.eMo1000NoReset05
eMo1000NoReset06 = _eapi.eMo1000NoReset06
eMo1000NoReset07 = _eapi.eMo1000NoReset07
eMo1000NoReset08 = _eapi.eMo1000NoReset08
eMo1000NoReset09 = _eapi.eMo1000NoReset09
eMo1000NoReset10 = _eapi.eMo1000NoReset10
eMo1000BadCoreFrequency = _eapi.eMo1000BadCoreFrequency
eMo1000BadDacsFrequency = _eapi.eMo1000BadDacsFrequency
eMo1000InvalidTestMode = _eapi.eMo1000InvalidTestMode
eMo1000NoInit18 = _eapi.eMo1000NoInit18
eMo1000NoCalibDone = _eapi.eMo1000NoCalibDone
eMo1000BadIsincRealC0 = _eapi.eMo1000BadIsincRealC0
eMo1000BadIsincRealC1 = _eapi.eMo1000BadIsincRealC1
eMo1000BadIsincRealC2 = _eapi.eMo1000BadIsincRealC2
eMo1000BadIsincRealC3 = _eapi.eMo1000BadIsincRealC3
eMo1000BadIsincRealC4 = _eapi.eMo1000BadIsincRealC4
eMo1000BadIsincImgC0 = _eapi.eMo1000BadIsincImgC0
eMo1000BadIsincImgC1 = _eapi.eMo1000BadIsincImgC1
eMo1000BadIsincImgC2 = _eapi.eMo1000BadIsincImgC2
eMo1000BadIsincImgC3 = _eapi.eMo1000BadIsincImgC3
eMo1000BadIsincImgC4 = _eapi.eMo1000BadIsincImgC4
eMo1000NoInit19 = _eapi.eMo1000NoInit19
eMo1000NoClockSetup01 = _eapi.eMo1000NoClockSetup01
eMo1000NoClockLoopFilter = _eapi.eMo1000NoClockLoopFilter
eMo1000NoClockSetup02 = _eapi.eMo1000NoClockSetup02
eMo1000NoInit20 = _eapi.eMo1000NoInit20
eMo1000NoInit21 = _eapi.eMo1000NoInit21
eMo1000NoClockSetup03 = _eapi.eMo1000NoClockSetup03
eMo1000DataFreqUnder = _eapi.eMo1000DataFreqUnder
eMo1000BadBotTapRefPtr = _eapi.eMo1000BadBotTapRefPtr
eMo1000BadBotTapRefValue = _eapi.eMo1000BadBotTapRefValue
eMo1000BadBotDciDelPtr = _eapi.eMo1000BadBotDciDelPtr
eMo1000BadBotDciDelValue = _eapi.eMo1000BadBotDciDelValue
eMo1000BadBotDciInvPtr = _eapi.eMo1000BadBotDciInvPtr
eMo1000BadBotDciInvValue = _eapi.eMo1000BadBotDciInvValue
eMo1000BadBotRefDelayPtr = _eapi.eMo1000BadBotRefDelayPtr
eMo1000BadBotDciDelayPtr = _eapi.eMo1000BadBotDciDelayPtr
CDCE62005_NREALPLL = _eapi.CDCE62005_NREALPLL
CDCE62005_NPLL = _eapi.CDCE62005_NPLL
CDCE62005_PFDMAX = _eapi.CDCE62005_PFDMAX
CDCE62005_PFDMINEXT = _eapi.CDCE62005_PFDMINEXT
CDCE62005_PFDMININT = _eapi.CDCE62005_PFDMININT
class Cdce62005_stCore(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cdce62005_stCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cdce62005_stCore, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_pCom"] = _eapi.Cdce62005_stCore_m_pCom_set
    __swig_getmethods__["m_pCom"] = _eapi.Cdce62005_stCore_m_pCom_get
    if _newclass:m_pCom = _swig_property(_eapi.Cdce62005_stCore_m_pCom_get, _eapi.Cdce62005_stCore_m_pCom_set)
    __swig_setmethods__["hCarrier"] = _eapi.Cdce62005_stCore_hCarrier_set
    __swig_getmethods__["hCarrier"] = _eapi.Cdce62005_stCore_hCarrier_get
    if _newclass:hCarrier = _swig_property(_eapi.Cdce62005_stCore_hCarrier_get, _eapi.Cdce62005_stCore_hCarrier_set)
    def __init__(self): 
        this = _eapi.new_Cdce62005_stCore()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_Cdce62005_stCore
    __del__ = lambda self : None;
Cdce62005_stCore_swigregister = _eapi.Cdce62005_stCore_swigregister
Cdce62005_stCore_swigregister(Cdce62005_stCore)

eCdce62005PllUnlocked = _eapi.eCdce62005PllUnlocked
eCdce62005PllLocked = _eapi.eCdce62005PllLocked
eCdce62005DigitalPllLock = _eapi.eCdce62005DigitalPllLock
eCdce62005AnalogPllLock = _eapi.eCdce62005AnalogPllLock
eCdce62005PllLockCount1Pfd = _eapi.eCdce62005PllLockCount1Pfd
eCdce62005PllLockCount64Pfd = _eapi.eCdce62005PllLockCount64Pfd
eCdce62005PllLockW1D5Ns = _eapi.eCdce62005PllLockW1D5Ns
eCdce62005PllLockW3D4Ns = _eapi.eCdce62005PllLockW3D4Ns
eCdce62005PllLockW5D4Ns = _eapi.eCdce62005PllLockW5D4Ns
eCdce62005PllLockW5D8Ns = _eapi.eCdce62005PllLockW5D8Ns
eCdce62005PllLockW7D7Ns = _eapi.eCdce62005PllLockW7D7Ns
eCdce62005PllLockW9D7Ns = _eapi.eCdce62005PllLockW9D7Ns
eCdce62005PllLockW15D0Ns = _eapi.eCdce62005PllLockW15D0Ns
eCdce62005PllLockW15D1Ns = _eapi.eCdce62005PllLockW15D1Ns
eCdce62005PllLockW17D0Ns = _eapi.eCdce62005PllLockW17D0Ns
eCdce62005PllLockW19D0Ns = _eapi.eCdce62005PllLockW19D0Ns
eCdce62005PllLockW19D3Ns = _eapi.eCdce62005PllLockW19D3Ns
eCdce62005PllLockW28D6Ns = _eapi.eCdce62005PllLockW28D6Ns
eCdce62005InputVbbNormal = _eapi.eCdce62005InputVbbNormal
eCdce62005InputVbbInverted = _eapi.eCdce62005InputVbbInverted
eCdce62005InputTermEnabled = _eapi.eCdce62005InputTermEnabled
eCdce62005InputTermDisabled = _eapi.eCdce62005InputTermDisabled
eCdce62005InputAcTermination = _eapi.eCdce62005InputAcTermination
eCdce62005InputDcTermination = _eapi.eCdce62005InputDcTermination
eCdce62005InputLvCmos = _eapi.eCdce62005InputLvCmos
eCdce62005InputLvPecl = _eapi.eCdce62005InputLvPecl
eCdce62005InputLvds = _eapi.eCdce62005InputLvds
eCdce62005LvdsInputFailDisable = _eapi.eCdce62005LvdsInputFailDisable
eCdce62005LvdsInputFailEnable = _eapi.eCdce62005LvdsInputFailEnable
class Cdce62005_stReferenceInput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cdce62005_stReferenceInput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cdce62005_stReferenceInput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["InputTerm"] = _eapi.Cdce62005_stReferenceInput_InputTerm_set
    __swig_getmethods__["InputTerm"] = _eapi.Cdce62005_stReferenceInput_InputTerm_get
    if _newclass:InputTerm = _swig_property(_eapi.Cdce62005_stReferenceInput_InputTerm_get, _eapi.Cdce62005_stReferenceInput_InputTerm_set)
    __swig_setmethods__["InputVbb"] = _eapi.Cdce62005_stReferenceInput_InputVbb_set
    __swig_getmethods__["InputVbb"] = _eapi.Cdce62005_stReferenceInput_InputVbb_get
    if _newclass:InputVbb = _swig_property(_eapi.Cdce62005_stReferenceInput_InputVbb_get, _eapi.Cdce62005_stReferenceInput_InputVbb_set)
    __swig_setmethods__["uInputFrequency"] = _eapi.Cdce62005_stReferenceInput_uInputFrequency_set
    __swig_getmethods__["uInputFrequency"] = _eapi.Cdce62005_stReferenceInput_uInputFrequency_get
    if _newclass:uInputFrequency = _swig_property(_eapi.Cdce62005_stReferenceInput_uInputFrequency_get, _eapi.Cdce62005_stReferenceInput_uInputFrequency_set)
    __swig_setmethods__["ucForceDiv2"] = _eapi.Cdce62005_stReferenceInput_ucForceDiv2_set
    __swig_getmethods__["ucForceDiv2"] = _eapi.Cdce62005_stReferenceInput_ucForceDiv2_get
    if _newclass:ucForceDiv2 = _swig_property(_eapi.Cdce62005_stReferenceInput_ucForceDiv2_get, _eapi.Cdce62005_stReferenceInput_ucForceDiv2_set)
    def __init__(self): 
        this = _eapi.new_Cdce62005_stReferenceInput()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_Cdce62005_stReferenceInput
    __del__ = lambda self : None;
Cdce62005_stReferenceInput_swigregister = _eapi.Cdce62005_stReferenceInput_swigregister
Cdce62005_stReferenceInput_swigregister(Cdce62005_stReferenceInput)

class Cdce62005_stPllLockParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cdce62005_stPllLockParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cdce62005_stPllLockParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["PllLockMode"] = _eapi.Cdce62005_stPllLockParams_PllLockMode_set
    __swig_getmethods__["PllLockMode"] = _eapi.Cdce62005_stPllLockParams_PllLockMode_get
    if _newclass:PllLockMode = _swig_property(_eapi.Cdce62005_stPllLockParams_PllLockMode_get, _eapi.Cdce62005_stPllLockParams_PllLockMode_set)
    __swig_setmethods__["PllLockWidth"] = _eapi.Cdce62005_stPllLockParams_PllLockWidth_set
    __swig_getmethods__["PllLockWidth"] = _eapi.Cdce62005_stPllLockParams_PllLockWidth_get
    if _newclass:PllLockWidth = _swig_property(_eapi.Cdce62005_stPllLockParams_PllLockWidth_get, _eapi.Cdce62005_stPllLockParams_PllLockWidth_set)
    __swig_setmethods__["PllLockCount"] = _eapi.Cdce62005_stPllLockParams_PllLockCount_set
    __swig_getmethods__["PllLockCount"] = _eapi.Cdce62005_stPllLockParams_PllLockCount_get
    if _newclass:PllLockCount = _swig_property(_eapi.Cdce62005_stPllLockParams_PllLockCount_get, _eapi.Cdce62005_stPllLockParams_PllLockCount_set)
    def __init__(self): 
        this = _eapi.new_Cdce62005_stPllLockParams()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_Cdce62005_stPllLockParams
    __del__ = lambda self : None;
Cdce62005_stPllLockParams_swigregister = _eapi.Cdce62005_stPllLockParams_swigregister
Cdce62005_stPllLockParams_swigregister(Cdce62005_stPllLockParams)

class Cdce62005_stGlobalReferenceInput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cdce62005_stGlobalReferenceInput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cdce62005_stGlobalReferenceInput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["InputsType"] = _eapi.Cdce62005_stGlobalReferenceInput_InputsType_set
    __swig_getmethods__["InputsType"] = _eapi.Cdce62005_stGlobalReferenceInput_InputsType_get
    if _newclass:InputsType = _swig_property(_eapi.Cdce62005_stGlobalReferenceInput_InputsType_get, _eapi.Cdce62005_stGlobalReferenceInput_InputsType_set)
    __swig_setmethods__["InputsTermination"] = _eapi.Cdce62005_stGlobalReferenceInput_InputsTermination_set
    __swig_getmethods__["InputsTermination"] = _eapi.Cdce62005_stGlobalReferenceInput_InputsTermination_get
    if _newclass:InputsTermination = _swig_property(_eapi.Cdce62005_stGlobalReferenceInput_InputsTermination_get, _eapi.Cdce62005_stGlobalReferenceInput_InputsTermination_set)
    __swig_setmethods__["PrimaryInput"] = _eapi.Cdce62005_stGlobalReferenceInput_PrimaryInput_set
    __swig_getmethods__["PrimaryInput"] = _eapi.Cdce62005_stGlobalReferenceInput_PrimaryInput_get
    if _newclass:PrimaryInput = _swig_property(_eapi.Cdce62005_stGlobalReferenceInput_PrimaryInput_get, _eapi.Cdce62005_stGlobalReferenceInput_PrimaryInput_set)
    __swig_setmethods__["SecondaryInput"] = _eapi.Cdce62005_stGlobalReferenceInput_SecondaryInput_set
    __swig_getmethods__["SecondaryInput"] = _eapi.Cdce62005_stGlobalReferenceInput_SecondaryInput_get
    if _newclass:SecondaryInput = _swig_property(_eapi.Cdce62005_stGlobalReferenceInput_SecondaryInput_get, _eapi.Cdce62005_stGlobalReferenceInput_SecondaryInput_set)
    __swig_setmethods__["LvdsFailSafe"] = _eapi.Cdce62005_stGlobalReferenceInput_LvdsFailSafe_set
    __swig_getmethods__["LvdsFailSafe"] = _eapi.Cdce62005_stGlobalReferenceInput_LvdsFailSafe_get
    if _newclass:LvdsFailSafe = _swig_property(_eapi.Cdce62005_stGlobalReferenceInput_LvdsFailSafe_get, _eapi.Cdce62005_stGlobalReferenceInput_LvdsFailSafe_set)
    __swig_setmethods__["uAuxInputFrequency"] = _eapi.Cdce62005_stGlobalReferenceInput_uAuxInputFrequency_set
    __swig_getmethods__["uAuxInputFrequency"] = _eapi.Cdce62005_stGlobalReferenceInput_uAuxInputFrequency_get
    if _newclass:uAuxInputFrequency = _swig_property(_eapi.Cdce62005_stGlobalReferenceInput_uAuxInputFrequency_get, _eapi.Cdce62005_stGlobalReferenceInput_uAuxInputFrequency_set)
    def __init__(self): 
        this = _eapi.new_Cdce62005_stGlobalReferenceInput()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_Cdce62005_stGlobalReferenceInput
    __del__ = lambda self : None;
Cdce62005_stGlobalReferenceInput_swigregister = _eapi.Cdce62005_stGlobalReferenceInput_swigregister
Cdce62005_stGlobalReferenceInput_swigregister(Cdce62005_stGlobalReferenceInput)

eCdce62005OutModeLvCmos = _eapi.eCdce62005OutModeLvCmos
eCdce62005OutModeDisabled = _eapi.eCdce62005OutModeDisabled
eCdce62005OutModeLvPecl = _eapi.eCdce62005OutModeLvPecl
eCdce62005OutModeLvds = _eapi.eCdce62005OutModeLvds
eCdce62005OutModeLvPeclHighSwing = _eapi.eCdce62005OutModeLvPeclHighSwing
eCdce62005LvCmosOutPinActive = _eapi.eCdce62005LvCmosOutPinActive
eCdce62005LvCmosOutPinInverted = _eapi.eCdce62005LvCmosOutPinInverted
eCdce62005LvCmosOutPin3State = _eapi.eCdce62005LvCmosOutPin3State
eCdce62005LvCmosOutPinLow = _eapi.eCdce62005LvCmosOutPinLow
eCdce62005OutRefModePrimary = _eapi.eCdce62005OutRefModePrimary
eCdce62005OutRefModeSecondary = _eapi.eCdce62005OutRefModeSecondary
eCdce62005OutRefModeSmartmux = _eapi.eCdce62005OutRefModeSmartmux
eCdce62005OutRefModeSynth = _eapi.eCdce62005OutRefModeSynth
Cdce62005_eSync6UsNextRefAndOutput = _eapi.Cdce62005_eSync6UsNextRefAndOutput
Cdce62005_eSync6UsNextOutput = _eapi.Cdce62005_eSync6UsNextOutput
Cdce62005_eSyncNextRefAndOutput = _eapi.Cdce62005_eSyncNextRefAndOutput
Cdce62005_eSyncNextOutput = _eapi.Cdce62005_eSyncNextOutput
class Cdce62005_stOutputParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cdce62005_stOutputParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cdce62005_stOutputParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["OutputRef"] = _eapi.Cdce62005_stOutputParams_OutputRef_set
    __swig_getmethods__["OutputRef"] = _eapi.Cdce62005_stOutputParams_OutputRef_get
    if _newclass:OutputRef = _swig_property(_eapi.Cdce62005_stOutputParams_OutputRef_get, _eapi.Cdce62005_stOutputParams_OutputRef_set)
    __swig_setmethods__["OutputMode"] = _eapi.Cdce62005_stOutputParams_OutputMode_set
    __swig_getmethods__["OutputMode"] = _eapi.Cdce62005_stOutputParams_OutputMode_get
    if _newclass:OutputMode = _swig_property(_eapi.Cdce62005_stOutputParams_OutputMode_get, _eapi.Cdce62005_stOutputParams_OutputMode_set)
    __swig_setmethods__["PLvCmosMode"] = _eapi.Cdce62005_stOutputParams_PLvCmosMode_set
    __swig_getmethods__["PLvCmosMode"] = _eapi.Cdce62005_stOutputParams_PLvCmosMode_get
    if _newclass:PLvCmosMode = _swig_property(_eapi.Cdce62005_stOutputParams_PLvCmosMode_get, _eapi.Cdce62005_stOutputParams_PLvCmosMode_set)
    __swig_setmethods__["NLvCmosMode"] = _eapi.Cdce62005_stOutputParams_NLvCmosMode_set
    __swig_getmethods__["NLvCmosMode"] = _eapi.Cdce62005_stOutputParams_NLvCmosMode_get
    if _newclass:NLvCmosMode = _swig_property(_eapi.Cdce62005_stOutputParams_NLvCmosMode_get, _eapi.Cdce62005_stOutputParams_NLvCmosMode_set)
    __swig_setmethods__["uOutputFreq"] = _eapi.Cdce62005_stOutputParams_uOutputFreq_set
    __swig_getmethods__["uOutputFreq"] = _eapi.Cdce62005_stOutputParams_uOutputFreq_get
    if _newclass:uOutputFreq = _swig_property(_eapi.Cdce62005_stOutputParams_uOutputFreq_get, _eapi.Cdce62005_stOutputParams_uOutputFreq_set)
    __swig_setmethods__["usPhaseAdj"] = _eapi.Cdce62005_stOutputParams_usPhaseAdj_set
    __swig_getmethods__["usPhaseAdj"] = _eapi.Cdce62005_stOutputParams_usPhaseAdj_get
    if _newclass:usPhaseAdj = _swig_property(_eapi.Cdce62005_stOutputParams_usPhaseAdj_get, _eapi.Cdce62005_stOutputParams_usPhaseAdj_set)
    def __init__(self): 
        this = _eapi.new_Cdce62005_stOutputParams()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_Cdce62005_stOutputParams
    __del__ = lambda self : None;
Cdce62005_stOutputParams_swigregister = _eapi.Cdce62005_stOutputParams_swigregister
Cdce62005_stOutputParams_swigregister(Cdce62005_stOutputParams)

eCdce62005InputRefModePrimary = _eapi.eCdce62005InputRefModePrimary
eCdce62005InputRefModeSecondary = _eapi.eCdce62005InputRefModeSecondary
eCdce62005InputRefModeAux = _eapi.eCdce62005InputRefModeAux
eCdce62005AuxDisable = _eapi.eCdce62005AuxDisable
eCdce62005AuxEnable = _eapi.eCdce62005AuxEnable
eCdce62005AuxSelect2 = _eapi.eCdce62005AuxSelect2
eCdce62005AuxSelect3 = _eapi.eCdce62005AuxSelect3
eCdce62005C1Val0D0PF = _eapi.eCdce62005C1Val0D0PF
eCdce62005C1Val1D5PF = _eapi.eCdce62005C1Val1D5PF
eCdce62005C1Val6D5PF = _eapi.eCdce62005C1Val6D5PF
eCdce62005C1Val8D0PF = _eapi.eCdce62005C1Val8D0PF
eCdce62005C1Val10D0PF = _eapi.eCdce62005C1Val10D0PF
eCdce62005C1Val11D5PF = _eapi.eCdce62005C1Val11D5PF
eCdce62005C1Val16D5PF = _eapi.eCdce62005C1Val16D5PF
eCdce62005C1Val18D0PF = _eapi.eCdce62005C1Val18D0PF
eCdce62005C1Val21D5PF = _eapi.eCdce62005C1Val21D5PF
eCdce62005C1Val23D0PF = _eapi.eCdce62005C1Val23D0PF
eCdce62005C1Val28D0PF = _eapi.eCdce62005C1Val28D0PF
eCdce62005C1Val29D5PF = _eapi.eCdce62005C1Val29D5PF
eCdce62005C1Val31D5PF = _eapi.eCdce62005C1Val31D5PF
eCdce62005C1Val33D0PF = _eapi.eCdce62005C1Val33D0PF
eCdce62005C1Val37D5PF = _eapi.eCdce62005C1Val37D5PF
eCdce62005C1Val38D0PF = _eapi.eCdce62005C1Val38D0PF
eCdce62005C1Val39D0PF = _eapi.eCdce62005C1Val39D0PF
eCdce62005C1Val39D5PF = _eapi.eCdce62005C1Val39D5PF
eCdce62005C1Val44D0PF = _eapi.eCdce62005C1Val44D0PF
eCdce62005C1Val45D5PF = _eapi.eCdce62005C1Val45D5PF
eCdce62005C1Val47D5PF = _eapi.eCdce62005C1Val47D5PF
eCdce62005C1Val49D0PF = _eapi.eCdce62005C1Val49D0PF
eCdce62005C1Val54D0PF = _eapi.eCdce62005C1Val54D0PF
eCdce62005C1Val55D5PF = _eapi.eCdce62005C1Val55D5PF
eCdce62005C1Val59D0PF = _eapi.eCdce62005C1Val59D0PF
eCdce62005C1Val60D5PF = _eapi.eCdce62005C1Val60D5PF
eCdce62005C1Val65D5PF = _eapi.eCdce62005C1Val65D5PF
eCdce62005C1Val67D0PF = _eapi.eCdce62005C1Val67D0PF
eCdce62005C1Val69D0PF = _eapi.eCdce62005C1Val69D0PF
eCdce62005C1Val70D5PF = _eapi.eCdce62005C1Val70D5PF
eCdce62005C1Val75D5PF = _eapi.eCdce62005C1Val75D5PF
eCdce62005C1Val77D0PF = _eapi.eCdce62005C1Val77D0PF
eCdce62005C2Val0D0PF = _eapi.eCdce62005C2Val0D0PF
eCdce62005C2Val12D5PF = _eapi.eCdce62005C2Val12D5PF
eCdce62005C2Val25D0PF = _eapi.eCdce62005C2Val25D0PF
eCdce62005C2Val37D5PF = _eapi.eCdce62005C2Val37D5PF
eCdce62005C2Val87D0PF = _eapi.eCdce62005C2Val87D0PF
eCdce62005C2Val95D5PF = _eapi.eCdce62005C2Val95D5PF
eCdce62005C2Val112D0PF = _eapi.eCdce62005C2Val112D0PF
eCdce62005C2Val123D0PF = _eapi.eCdce62005C2Val123D0PF
eCdce62005C2Val124D5PF = _eapi.eCdce62005C2Val124D5PF
eCdce62005C2Val135D5PF = _eapi.eCdce62005C2Val135D5PF
eCdce62005C2Val148D0PF = _eapi.eCdce62005C2Val148D0PF
eCdce62005C2Val160D5PF = _eapi.eCdce62005C2Val160D5PF
eCdce62005C2Val210D0PF = _eapi.eCdce62005C2Val210D0PF
eCdce62005C2Val222D5PF = _eapi.eCdce62005C2Val222D5PF
eCdce62005C2Val226D0PF = _eapi.eCdce62005C2Val226D0PF
eCdce62005C2Val235D0PF = _eapi.eCdce62005C2Val235D0PF
eCdce62005C2Val238D5PF = _eapi.eCdce62005C2Val238D5PF
eCdce62005C2Val247D5PF = _eapi.eCdce62005C2Val247D5PF
eCdce62005C2Val251D0PF = _eapi.eCdce62005C2Val251D0PF
eCdce62005C2Val263D5PF = _eapi.eCdce62005C2Val263D5PF
eCdce62005C2Val313D0PF = _eapi.eCdce62005C2Val313D0PF
eCdce62005C2Val325D5PF = _eapi.eCdce62005C2Val325D5PF
eCdce62005C2Val338D0PF = _eapi.eCdce62005C2Val338D0PF
eCdce62005C2Val349D0PF = _eapi.eCdce62005C2Val349D0PF
eCdce62005C2Val350D5PF = _eapi.eCdce62005C2Val350D5PF
eCdce62005C2Val361D5PF = _eapi.eCdce62005C2Val361D5PF
eCdce62005C2Val374D0PF = _eapi.eCdce62005C2Val374D0PF
eCdce62005C2Val386D5PF = _eapi.eCdce62005C2Val386D5PF
eCdce62005C2Val436D0PF = _eapi.eCdce62005C2Val436D0PF
eCdce62005C2Val448D5PF = _eapi.eCdce62005C2Val448D5PF
eCdce62005C2Val461D0PF = _eapi.eCdce62005C2Val461D0PF
eCdce62005C2Val473D5PF = _eapi.eCdce62005C2Val473D5PF
eCdce62005C3Val0D0PF = _eapi.eCdce62005C3Val0D0PF
eCdce62005C3Val2D5PF = _eapi.eCdce62005C3Val2D5PF
eCdce62005C3Val5D5PF = _eapi.eCdce62005C3Val5D5PF
eCdce62005C3Val8D0PF = _eapi.eCdce62005C3Val8D0PF
eCdce62005C3Val19D5PF = _eapi.eCdce62005C3Val19D5PF
eCdce62005C3Val22D0PF = _eapi.eCdce62005C3Val22D0PF
eCdce62005C3Val25D0PF = _eapi.eCdce62005C3Val25D0PF
eCdce62005C3Val27D5PF = _eapi.eCdce62005C3Val27D5PF
eCdce62005C3Val85D0PF = _eapi.eCdce62005C3Val85D0PF
eCdce62005C3Val87D5PF = _eapi.eCdce62005C3Val87D5PF
eCdce62005C3Val90D5PF = _eapi.eCdce62005C3Val90D5PF
eCdce62005C3Val93D0PF = _eapi.eCdce62005C3Val93D0PF
eCdce62005C3Val104D5PF = _eapi.eCdce62005C3Val104D5PF
eCdce62005C3Val107D0PF = _eapi.eCdce62005C3Val107D0PF
eCdce62005C3Val110D0PF = _eapi.eCdce62005C3Val110D0PF
eCdce62005C3Val112D5PF = _eapi.eCdce62005C3Val112D5PF
eCdce62005R2Val127D6KO = _eapi.eCdce62005R2Val127D6KO
eCdce62005R2Val123D6KO = _eapi.eCdce62005R2Val123D6KO
eCdce62005R2Val118D6KO = _eapi.eCdce62005R2Val118D6KO
eCdce62005R2Val114D6KO = _eapi.eCdce62005R2Val114D6KO
eCdce62005R2Val107D6KO = _eapi.eCdce62005R2Val107D6KO
eCdce62005R2Val103D6KO = _eapi.eCdce62005R2Val103D6KO
eCdce62005R2Val98D6KO = _eapi.eCdce62005R2Val98D6KO
eCdce62005R2Val94D6KO = _eapi.eCdce62005R2Val94D6KO
eCdce62005R2Val89D4KO = _eapi.eCdce62005R2Val89D4KO
eCdce62005R2Val85D4KO = _eapi.eCdce62005R2Val85D4KO
eCdce62005R2Val80D4KO = _eapi.eCdce62005R2Val80D4KO
eCdce62005R2Val76D4KO = _eapi.eCdce62005R2Val76D4KO
eCdce62005R2Val71D2KO = _eapi.eCdce62005R2Val71D2KO
eCdce62005R2Val69D4KO = _eapi.eCdce62005R2Val69D4KO
eCdce62005R2Val67D2KO = _eapi.eCdce62005R2Val67D2KO
eCdce62005R2Val65D4KO = _eapi.eCdce62005R2Val65D4KO
eCdce62005R2Val62D2KO = _eapi.eCdce62005R2Val62D2KO
eCdce62005R2Val60D4KO = _eapi.eCdce62005R2Val60D4KO
eCdce62005R2Val58D2KO = _eapi.eCdce62005R2Val58D2KO
eCdce62005R2Val56D4KO = _eapi.eCdce62005R2Val56D4KO
eCdce62005R2Val51D2KO = _eapi.eCdce62005R2Val51D2KO
eCdce62005R2Val47D2KO = _eapi.eCdce62005R2Val47D2KO
eCdce62005R2Val42D2KO = _eapi.eCdce62005R2Val42D2KO
eCdce62005R2Val38D2KO = _eapi.eCdce62005R2Val38D2KO
eCdce62005R2Val33D0KO = _eapi.eCdce62005R2Val33D0KO
eCdce62005R2Val29D0KO = _eapi.eCdce62005R2Val29D0KO
eCdce62005R2Val24D0KO = _eapi.eCdce62005R2Val24D0KO
eCdce62005R2Val20D0KO = _eapi.eCdce62005R2Val20D0KO
eCdce62005R2Val13D0KO = _eapi.eCdce62005R2Val13D0KO
eCdce62005R2Val9D0KO = _eapi.eCdce62005R2Val9D0KO
eCdce62005R2Val4D0KO = _eapi.eCdce62005R2Val4D0KO
eCdce62005R2Val0D1KO = _eapi.eCdce62005R2Val0D1KO
eCdce62005R3Val20D0KO = _eapi.eCdce62005R3Val20D0KO
eCdce62005R3Val15D0KO = _eapi.eCdce62005R3Val15D0KO
eCdce62005R3Val10D0KO = _eapi.eCdce62005R3Val10D0KO
eCdce62005R3Val5D0KO = _eapi.eCdce62005R3Val5D0KO
eCdce62005ChargePump50D0UA = _eapi.eCdce62005ChargePump50D0UA
eCdce62005ChargePump100D0UA = _eapi.eCdce62005ChargePump100D0UA
eCdce62005ChargePump150D0UA = _eapi.eCdce62005ChargePump150D0UA
eCdce62005ChargePump200D0UA = _eapi.eCdce62005ChargePump200D0UA
eCdce62005ChargePump300D0UA = _eapi.eCdce62005ChargePump300D0UA
eCdce62005ChargePump400D0UA = _eapi.eCdce62005ChargePump400D0UA
eCdce62005ChargePump600D0UA = _eapi.eCdce62005ChargePump600D0UA
eCdce62005ChargePump750D0UA = _eapi.eCdce62005ChargePump750D0UA
eCdce62005ChargePump1D0MA = _eapi.eCdce62005ChargePump1D0MA
eCdce62005ChargePump1D25MA = _eapi.eCdce62005ChargePump1D25MA
eCdce62005ChargePump1D5MA = _eapi.eCdce62005ChargePump1D5MA
eCdce62005ChargePump2D0MA = _eapi.eCdce62005ChargePump2D0MA
eCdce62005ChargePump2D5MA = _eapi.eCdce62005ChargePump2D5MA
eCdce62005ChargePump3D0MA = _eapi.eCdce62005ChargePump3D0MA
eCdce62005ChargePump3D5MA = _eapi.eCdce62005ChargePump3D5MA
eCdce62005ChargePump3D75MA = _eapi.eCdce62005ChargePump3D75MA
class Cdce62005_stAuxParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cdce62005_stAuxParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cdce62005_stAuxParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["AuxSelect"] = _eapi.Cdce62005_stAuxParam_AuxSelect_set
    __swig_getmethods__["AuxSelect"] = _eapi.Cdce62005_stAuxParam_AuxSelect_get
    if _newclass:AuxSelect = _swig_property(_eapi.Cdce62005_stAuxParam_AuxSelect_get, _eapi.Cdce62005_stAuxParam_AuxSelect_set)
    __swig_setmethods__["AuxState"] = _eapi.Cdce62005_stAuxParam_AuxState_set
    __swig_getmethods__["AuxState"] = _eapi.Cdce62005_stAuxParam_AuxState_get
    if _newclass:AuxState = _swig_property(_eapi.Cdce62005_stAuxParam_AuxState_get, _eapi.Cdce62005_stAuxParam_AuxState_set)
    def __init__(self): 
        this = _eapi.new_Cdce62005_stAuxParam()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_Cdce62005_stAuxParam
    __del__ = lambda self : None;
Cdce62005_stAuxParam_swigregister = _eapi.Cdce62005_stAuxParam_swigregister
Cdce62005_stAuxParam_swigregister(Cdce62005_stAuxParam)

eCdce62005LoopFilterInt = _eapi.eCdce62005LoopFilterInt
eCdce62005LoopFilterExt = _eapi.eCdce62005LoopFilterExt
class Cdce62005_stParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cdce62005_stParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cdce62005_stParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["RefInput"] = _eapi.Cdce62005_stParam_RefInput_set
    __swig_getmethods__["RefInput"] = _eapi.Cdce62005_stParam_RefInput_get
    if _newclass:RefInput = _swig_property(_eapi.Cdce62005_stParam_RefInput_get, _eapi.Cdce62005_stParam_RefInput_set)
    __swig_setmethods__["SmartMuxRefSelect"] = _eapi.Cdce62005_stParam_SmartMuxRefSelect_set
    __swig_getmethods__["SmartMuxRefSelect"] = _eapi.Cdce62005_stParam_SmartMuxRefSelect_get
    if _newclass:SmartMuxRefSelect = _swig_property(_eapi.Cdce62005_stParam_SmartMuxRefSelect_get, _eapi.Cdce62005_stParam_SmartMuxRefSelect_set)
    __swig_setmethods__["OutParams"] = _eapi.Cdce62005_stParam_OutParams_set
    __swig_getmethods__["OutParams"] = _eapi.Cdce62005_stParam_OutParams_get
    if _newclass:OutParams = _swig_property(_eapi.Cdce62005_stParam_OutParams_get, _eapi.Cdce62005_stParam_OutParams_set)
    __swig_setmethods__["SyncMode"] = _eapi.Cdce62005_stParam_SyncMode_set
    __swig_getmethods__["SyncMode"] = _eapi.Cdce62005_stParam_SyncMode_get
    if _newclass:SyncMode = _swig_property(_eapi.Cdce62005_stParam_SyncMode_get, _eapi.Cdce62005_stParam_SyncMode_set)
    __swig_setmethods__["AuxParams"] = _eapi.Cdce62005_stParam_AuxParams_set
    __swig_getmethods__["AuxParams"] = _eapi.Cdce62005_stParam_AuxParams_get
    if _newclass:AuxParams = _swig_property(_eapi.Cdce62005_stParam_AuxParams_get, _eapi.Cdce62005_stParam_AuxParams_set)
    __swig_setmethods__["PllLockParams"] = _eapi.Cdce62005_stParam_PllLockParams_set
    __swig_getmethods__["PllLockParams"] = _eapi.Cdce62005_stParam_PllLockParams_get
    if _newclass:PllLockParams = _swig_property(_eapi.Cdce62005_stParam_PllLockParams_get, _eapi.Cdce62005_stParam_PllLockParams_set)
    __swig_setmethods__["LoopFilterType"] = _eapi.Cdce62005_stParam_LoopFilterType_set
    __swig_getmethods__["LoopFilterType"] = _eapi.Cdce62005_stParam_LoopFilterType_get
    if _newclass:LoopFilterType = _swig_property(_eapi.Cdce62005_stParam_LoopFilterType_get, _eapi.Cdce62005_stParam_LoopFilterType_set)
    __swig_setmethods__["uPfdFreqMin"] = _eapi.Cdce62005_stParam_uPfdFreqMin_set
    __swig_getmethods__["uPfdFreqMin"] = _eapi.Cdce62005_stParam_uPfdFreqMin_get
    if _newclass:uPfdFreqMin = _swig_property(_eapi.Cdce62005_stParam_uPfdFreqMin_get, _eapi.Cdce62005_stParam_uPfdFreqMin_set)
    __swig_setmethods__["uPfdFreqMax"] = _eapi.Cdce62005_stParam_uPfdFreqMax_set
    __swig_getmethods__["uPfdFreqMax"] = _eapi.Cdce62005_stParam_uPfdFreqMax_get
    if _newclass:uPfdFreqMax = _swig_property(_eapi.Cdce62005_stParam_uPfdFreqMax_get, _eapi.Cdce62005_stParam_uPfdFreqMax_set)
    __swig_setmethods__["uRefFreq"] = _eapi.Cdce62005_stParam_uRefFreq_set
    __swig_getmethods__["uRefFreq"] = _eapi.Cdce62005_stParam_uRefFreq_get
    if _newclass:uRefFreq = _swig_property(_eapi.Cdce62005_stParam_uRefFreq_get, _eapi.Cdce62005_stParam_uRefFreq_set)
    __swig_setmethods__["uPfdFreq"] = _eapi.Cdce62005_stParam_uPfdFreq_set
    __swig_getmethods__["uPfdFreq"] = _eapi.Cdce62005_stParam_uPfdFreq_get
    if _newclass:uPfdFreq = _swig_property(_eapi.Cdce62005_stParam_uPfdFreq_get, _eapi.Cdce62005_stParam_uPfdFreq_set)
    __swig_setmethods__["uVcoFreq"] = _eapi.Cdce62005_stParam_uVcoFreq_set
    __swig_getmethods__["uVcoFreq"] = _eapi.Cdce62005_stParam_uVcoFreq_get
    if _newclass:uVcoFreq = _swig_property(_eapi.Cdce62005_stParam_uVcoFreq_get, _eapi.Cdce62005_stParam_uVcoFreq_set)
    __swig_setmethods__["uSynthFreq"] = _eapi.Cdce62005_stParam_uSynthFreq_set
    __swig_getmethods__["uSynthFreq"] = _eapi.Cdce62005_stParam_uSynthFreq_get
    if _newclass:uSynthFreq = _swig_property(_eapi.Cdce62005_stParam_uSynthFreq_get, _eapi.Cdce62005_stParam_uSynthFreq_set)
    __swig_setmethods__["uAuxFreq"] = _eapi.Cdce62005_stParam_uAuxFreq_set
    __swig_getmethods__["uAuxFreq"] = _eapi.Cdce62005_stParam_uAuxFreq_get
    if _newclass:uAuxFreq = _swig_property(_eapi.Cdce62005_stParam_uAuxFreq_get, _eapi.Cdce62005_stParam_uAuxFreq_set)
    __swig_setmethods__["usFeedbackDivider"] = _eapi.Cdce62005_stParam_usFeedbackDivider_set
    __swig_getmethods__["usFeedbackDivider"] = _eapi.Cdce62005_stParam_usFeedbackDivider_get
    if _newclass:usFeedbackDivider = _swig_property(_eapi.Cdce62005_stParam_usFeedbackDivider_get, _eapi.Cdce62005_stParam_usFeedbackDivider_set)
    __swig_setmethods__["ucBypassDivider"] = _eapi.Cdce62005_stParam_ucBypassDivider_set
    __swig_getmethods__["ucBypassDivider"] = _eapi.Cdce62005_stParam_ucBypassDivider_get
    if _newclass:ucBypassDivider = _swig_property(_eapi.Cdce62005_stParam_ucBypassDivider_get, _eapi.Cdce62005_stParam_ucBypassDivider_set)
    __swig_setmethods__["usCFeedbackDivider"] = _eapi.Cdce62005_stParam_usCFeedbackDivider_set
    __swig_getmethods__["usCFeedbackDivider"] = _eapi.Cdce62005_stParam_usCFeedbackDivider_get
    if _newclass:usCFeedbackDivider = _swig_property(_eapi.Cdce62005_stParam_usCFeedbackDivider_get, _eapi.Cdce62005_stParam_usCFeedbackDivider_set)
    __swig_setmethods__["usCFeedbackDividerIndex"] = _eapi.Cdce62005_stParam_usCFeedbackDividerIndex_set
    __swig_getmethods__["usCFeedbackDividerIndex"] = _eapi.Cdce62005_stParam_usCFeedbackDividerIndex_get
    if _newclass:usCFeedbackDividerIndex = _swig_property(_eapi.Cdce62005_stParam_usCFeedbackDividerIndex_get, _eapi.Cdce62005_stParam_usCFeedbackDividerIndex_set)
    __swig_setmethods__["usReferenceDivider"] = _eapi.Cdce62005_stParam_usReferenceDivider_set
    __swig_getmethods__["usReferenceDivider"] = _eapi.Cdce62005_stParam_usReferenceDivider_get
    if _newclass:usReferenceDivider = _swig_property(_eapi.Cdce62005_stParam_usReferenceDivider_get, _eapi.Cdce62005_stParam_usReferenceDivider_set)
    __swig_setmethods__["ucPrimaryInputDivider"] = _eapi.Cdce62005_stParam_ucPrimaryInputDivider_set
    __swig_getmethods__["ucPrimaryInputDivider"] = _eapi.Cdce62005_stParam_ucPrimaryInputDivider_get
    if _newclass:ucPrimaryInputDivider = _swig_property(_eapi.Cdce62005_stParam_ucPrimaryInputDivider_get, _eapi.Cdce62005_stParam_ucPrimaryInputDivider_set)
    __swig_setmethods__["ucSecondaryInputDivider"] = _eapi.Cdce62005_stParam_ucSecondaryInputDivider_set
    __swig_getmethods__["ucSecondaryInputDivider"] = _eapi.Cdce62005_stParam_ucSecondaryInputDivider_get
    if _newclass:ucSecondaryInputDivider = _swig_property(_eapi.Cdce62005_stParam_ucSecondaryInputDivider_get, _eapi.Cdce62005_stParam_ucSecondaryInputDivider_set)
    __swig_setmethods__["usInputDivider"] = _eapi.Cdce62005_stParam_usInputDivider_set
    __swig_getmethods__["usInputDivider"] = _eapi.Cdce62005_stParam_usInputDivider_get
    if _newclass:usInputDivider = _swig_property(_eapi.Cdce62005_stParam_usInputDivider_get, _eapi.Cdce62005_stParam_usInputDivider_set)
    __swig_setmethods__["aucOutDivider"] = _eapi.Cdce62005_stParam_aucOutDivider_set
    __swig_getmethods__["aucOutDivider"] = _eapi.Cdce62005_stParam_aucOutDivider_get
    if _newclass:aucOutDivider = _swig_property(_eapi.Cdce62005_stParam_aucOutDivider_get, _eapi.Cdce62005_stParam_aucOutDivider_set)
    __swig_setmethods__["aucOutPhaseAdjNdx"] = _eapi.Cdce62005_stParam_aucOutPhaseAdjNdx_set
    __swig_getmethods__["aucOutPhaseAdjNdx"] = _eapi.Cdce62005_stParam_aucOutPhaseAdjNdx_get
    if _newclass:aucOutPhaseAdjNdx = _swig_property(_eapi.Cdce62005_stParam_aucOutPhaseAdjNdx_get, _eapi.Cdce62005_stParam_aucOutPhaseAdjNdx_set)
    __swig_setmethods__["ucPrescaleDivider"] = _eapi.Cdce62005_stParam_ucPrescaleDivider_set
    __swig_getmethods__["ucPrescaleDivider"] = _eapi.Cdce62005_stParam_ucPrescaleDivider_get
    if _newclass:ucPrescaleDivider = _swig_property(_eapi.Cdce62005_stParam_ucPrescaleDivider_get, _eapi.Cdce62005_stParam_ucPrescaleDivider_set)
    __swig_setmethods__["ucVcoBypassAll"] = _eapi.Cdce62005_stParam_ucVcoBypassAll_set
    __swig_getmethods__["ucVcoBypassAll"] = _eapi.Cdce62005_stParam_ucVcoBypassAll_get
    if _newclass:ucVcoBypassAll = _swig_property(_eapi.Cdce62005_stParam_ucVcoBypassAll_get, _eapi.Cdce62005_stParam_ucVcoBypassAll_set)
    __swig_setmethods__["aucVcoBypass"] = _eapi.Cdce62005_stParam_aucVcoBypass_set
    __swig_getmethods__["aucVcoBypass"] = _eapi.Cdce62005_stParam_aucVcoBypass_get
    if _newclass:aucVcoBypass = _swig_property(_eapi.Cdce62005_stParam_aucVcoBypass_get, _eapi.Cdce62005_stParam_aucVcoBypass_set)
    __swig_setmethods__["ucUsableRefDivider"] = _eapi.Cdce62005_stParam_ucUsableRefDivider_set
    __swig_getmethods__["ucUsableRefDivider"] = _eapi.Cdce62005_stParam_ucUsableRefDivider_get
    if _newclass:ucUsableRefDivider = _swig_property(_eapi.Cdce62005_stParam_ucUsableRefDivider_get, _eapi.Cdce62005_stParam_ucUsableRefDivider_set)
    __swig_setmethods__["sLoopFilterIndex"] = _eapi.Cdce62005_stParam_sLoopFilterIndex_set
    __swig_getmethods__["sLoopFilterIndex"] = _eapi.Cdce62005_stParam_sLoopFilterIndex_get
    if _newclass:sLoopFilterIndex = _swig_property(_eapi.Cdce62005_stParam_sLoopFilterIndex_get, _eapi.Cdce62005_stParam_sLoopFilterIndex_set)
    __swig_setmethods__["R2Value"] = _eapi.Cdce62005_stParam_R2Value_set
    __swig_getmethods__["R2Value"] = _eapi.Cdce62005_stParam_R2Value_get
    if _newclass:R2Value = _swig_property(_eapi.Cdce62005_stParam_R2Value_get, _eapi.Cdce62005_stParam_R2Value_set)
    __swig_setmethods__["R3Value"] = _eapi.Cdce62005_stParam_R3Value_set
    __swig_getmethods__["R3Value"] = _eapi.Cdce62005_stParam_R3Value_get
    if _newclass:R3Value = _swig_property(_eapi.Cdce62005_stParam_R3Value_get, _eapi.Cdce62005_stParam_R3Value_set)
    __swig_setmethods__["C1Value"] = _eapi.Cdce62005_stParam_C1Value_set
    __swig_getmethods__["C1Value"] = _eapi.Cdce62005_stParam_C1Value_get
    if _newclass:C1Value = _swig_property(_eapi.Cdce62005_stParam_C1Value_get, _eapi.Cdce62005_stParam_C1Value_set)
    __swig_setmethods__["C2Value"] = _eapi.Cdce62005_stParam_C2Value_set
    __swig_getmethods__["C2Value"] = _eapi.Cdce62005_stParam_C2Value_get
    if _newclass:C2Value = _swig_property(_eapi.Cdce62005_stParam_C2Value_get, _eapi.Cdce62005_stParam_C2Value_set)
    __swig_setmethods__["C3Value"] = _eapi.Cdce62005_stParam_C3Value_set
    __swig_getmethods__["C3Value"] = _eapi.Cdce62005_stParam_C3Value_get
    if _newclass:C3Value = _swig_property(_eapi.Cdce62005_stParam_C3Value_get, _eapi.Cdce62005_stParam_C3Value_set)
    __swig_setmethods__["ChargePump"] = _eapi.Cdce62005_stParam_ChargePump_set
    __swig_getmethods__["ChargePump"] = _eapi.Cdce62005_stParam_ChargePump_get
    if _newclass:ChargePump = _swig_property(_eapi.Cdce62005_stParam_ChargePump_get, _eapi.Cdce62005_stParam_ChargePump_set)
    def __init__(self): 
        this = _eapi.new_Cdce62005_stParam()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_Cdce62005_stParam
    __del__ = lambda self : None;
Cdce62005_stParam_swigregister = _eapi.Cdce62005_stParam_swigregister
Cdce62005_stParam_swigregister(Cdce62005_stParam)

eCdce62005Addr00 = _eapi.eCdce62005Addr00
eCdce62005Addr01 = _eapi.eCdce62005Addr01
eCdce62005Addr02 = _eapi.eCdce62005Addr02
eCdce62005Addr03 = _eapi.eCdce62005Addr03
eCdce62005Addr04 = _eapi.eCdce62005Addr04
eCdce62005Addr05 = _eapi.eCdce62005Addr05
eCdce62005Addr06 = _eapi.eCdce62005Addr06
eCdce62005Addr07 = _eapi.eCdce62005Addr07
eCdce62005Addr08 = _eapi.eCdce62005Addr08
eCdce62005Ok = _eapi.eCdce62005Ok
eCdce62005InvalidAddr01 = _eapi.eCdce62005InvalidAddr01
eCdce62005InvalidAddr02 = _eapi.eCdce62005InvalidAddr02
eCdce62005Ival01 = _eapi.eCdce62005Ival01
eCdce62005Divider01 = _eapi.eCdce62005Divider01
eCdce62005OutputFreqOver = _eapi.eCdce62005OutputFreqOver
eCdce62005PfdImpossible = _eapi.eCdce62005PfdImpossible
eCdce62005NoPrescaler01 = _eapi.eCdce62005NoPrescaler01
eCdce62005InvalidPrescaler = _eapi.eCdce62005InvalidPrescaler
eCdce62005OutputDivImpossible = _eapi.eCdce62005OutputDivImpossible
eCdce62005Overflow01 = _eapi.eCdce62005Overflow01
eCdce62005Ival02 = _eapi.eCdce62005Ival02
eCdce62005Ival03 = _eapi.eCdce62005Ival03
eCdce62005Ival04 = _eapi.eCdce62005Ival04
eCdce62005Ival05 = _eapi.eCdce62005Ival05
eCdce62005Divider02 = _eapi.eCdce62005Divider02
eCdce62005Divider03 = _eapi.eCdce62005Divider03
eCdce62005NoPrescaler02 = _eapi.eCdce62005NoPrescaler02
eCdce62005Overflow02 = _eapi.eCdce62005Overflow02
eCdce62005BadFeedbackIndex = _eapi.eCdce62005BadFeedbackIndex
eCdce62005BadTimerFct = _eapi.eCdce62005BadTimerFct
eCdce62005PllLockError = _eapi.eCdce62005PllLockError
eCdce62005BadPllRefSelect = _eapi.eCdce62005BadPllRefSelect
eCdce62005BadAuxOutState = _eapi.eCdce62005BadAuxOutState
eCdce62005BadAuxOutSelect = _eapi.eCdce62005BadAuxOutSelect
eCdce62005BadInputType = _eapi.eCdce62005BadInputType
eCdce62005BadInputTypeFreq = _eapi.eCdce62005BadInputTypeFreq
eCdce62005BadInputPllFreq01 = _eapi.eCdce62005BadInputPllFreq01
eCdce62005BadInputPllFreq02 = _eapi.eCdce62005BadInputPllFreq02
eCdce62005NoFanoutDivider01 = _eapi.eCdce62005NoFanoutDivider01
eCdce62005NoFanoutDivider02 = _eapi.eCdce62005NoFanoutDivider02
eCdce62005NoFanoutDivider03 = _eapi.eCdce62005NoFanoutDivider03
eCdce62005SmartMuxRefNotSup = _eapi.eCdce62005SmartMuxRefNotSup
eCdce62005BadPfdMinFrequency = _eapi.eCdce62005BadPfdMinFrequency
eCdce62005BadPfdMaxFrequency = _eapi.eCdce62005BadPfdMaxFrequency
eCdce62005BadInputPreDivider = _eapi.eCdce62005BadInputPreDivider
eCdce62005BadPinOutMode01 = _eapi.eCdce62005BadPinOutMode01
eCdce62005NoSynthSolution = _eapi.eCdce62005NoSynthSolution
eCdce62005NoFilterSolution = _eapi.eCdce62005NoFilterSolution
eCdce62005BadPinOutMode02 = _eapi.eCdce62005BadPinOutMode02
eCdce62005BadPinOutMode03 = _eapi.eCdce62005BadPinOutMode03
eCdce62005BadPinOutMode04 = _eapi.eCdce62005BadPinOutMode04
eCdce62005BadPinOutMode05 = _eapi.eCdce62005BadPinOutMode05
eCdce62005BadPinOutMode06 = _eapi.eCdce62005BadPinOutMode06
eCdce62005BadChargePump = _eapi.eCdce62005BadChargePump
eCdce62005BadC1 = _eapi.eCdce62005BadC1
eCdce62005BadC2 = _eapi.eCdce62005BadC2
eCdce62005BadC3 = _eapi.eCdce62005BadC3
eCdce62005BadR2 = _eapi.eCdce62005BadR2
eCdce62005BadR3 = _eapi.eCdce62005BadR3
eCdce62005BadLoopFilterType = _eapi.eCdce62005BadLoopFilterType
eCdce62005BadPriPreDiv = _eapi.eCdce62005BadPriPreDiv
eCdce62005BadSecPreDiv = _eapi.eCdce62005BadSecPreDiv
eCdce62005BadRefDivider = _eapi.eCdce62005BadRefDivider
eCdce62005BadInputRefMode = _eapi.eCdce62005BadInputRefMode
eCdce62005BadInputPinsType = _eapi.eCdce62005BadInputPinsType
eCdce62005BadPriTermCtrl = _eapi.eCdce62005BadPriTermCtrl
eCdce62005BadSecTermCtrl = _eapi.eCdce62005BadSecTermCtrl
eCdce62005BadLvdsFailSafeMode = _eapi.eCdce62005BadLvdsFailSafeMode
eCdce62005BadPriVbbMode = _eapi.eCdce62005BadPriVbbMode
eCdce62005BadSecVbbMode = _eapi.eCdce62005BadSecVbbMode
eCdce62005BadInputTermMode = _eapi.eCdce62005BadInputTermMode
eCdce62005BadVcoFrequency = _eapi.eCdce62005BadVcoFrequency
eCdce62005BadPllLockPinMode = _eapi.eCdce62005BadPllLockPinMode
eCdce62005BadPllLockCountMode = _eapi.eCdce62005BadPllLockCountMode
eCdce62005BadPllLockWidth = _eapi.eCdce62005BadPllLockWidth
eCdce62005BadInputDivider = _eapi.eCdce62005BadInputDivider
eCdce62005BadAuxOutputSelect = _eapi.eCdce62005BadAuxOutputSelect
eCdce62005BadAuxOutputState = _eapi.eCdce62005BadAuxOutputState
eCdce62005BadSyncMode = _eapi.eCdce62005BadSyncMode
eCdce62005BadOutput0Phase = _eapi.eCdce62005BadOutput0Phase
eCdce62005BadOutput1Phase = _eapi.eCdce62005BadOutput1Phase
eCdce62005BadOutput2Phase = _eapi.eCdce62005BadOutput2Phase
eCdce62005BadOutput3Phase = _eapi.eCdce62005BadOutput3Phase
eCdce62005BadOutput4Phase = _eapi.eCdce62005BadOutput4Phase
eCdce62005BadOutput5Phase = _eapi.eCdce62005BadOutput5Phase
eCdce62005BadOutput0Ref = _eapi.eCdce62005BadOutput0Ref
eCdce62005BadOutput1Ref = _eapi.eCdce62005BadOutput1Ref
eCdce62005BadOutput2Ref = _eapi.eCdce62005BadOutput2Ref
eCdce62005BadOutput3Ref = _eapi.eCdce62005BadOutput3Ref
eCdce62005BadOutput4Ref = _eapi.eCdce62005BadOutput4Ref
eCdce62005BadOutput5Ref = _eapi.eCdce62005BadOutput5Ref
eCdce62005BadPLvcmosOut0Mode = _eapi.eCdce62005BadPLvcmosOut0Mode
eCdce62005BadPLvcmosOut1Mode = _eapi.eCdce62005BadPLvcmosOut1Mode
eCdce62005BadPLvcmosOut2Mode = _eapi.eCdce62005BadPLvcmosOut2Mode
eCdce62005BadPLvcmosOut3Mode = _eapi.eCdce62005BadPLvcmosOut3Mode
eCdce62005BadPLvcmosOut4Mode = _eapi.eCdce62005BadPLvcmosOut4Mode
eCdce62005BadPLvcmosOut5Mode = _eapi.eCdce62005BadPLvcmosOut5Mode
eCdce62005BadNLvcmosOut0Mode = _eapi.eCdce62005BadNLvcmosOut0Mode
eCdce62005BadNLvcmosOut1Mode = _eapi.eCdce62005BadNLvcmosOut1Mode
eCdce62005BadNLvcmosOut2Mode = _eapi.eCdce62005BadNLvcmosOut2Mode
eCdce62005BadNLvcmosOut3Mode = _eapi.eCdce62005BadNLvcmosOut3Mode
eCdce62005BadNLvcmosOut4Mode = _eapi.eCdce62005BadNLvcmosOut4Mode
eCdce62005BadNLvcmosOut5Mode = _eapi.eCdce62005BadNLvcmosOut5Mode
eCdce62005BadOutput0PhaseVal = _eapi.eCdce62005BadOutput0PhaseVal
eCdce62005BadOutput1PhaseVal = _eapi.eCdce62005BadOutput1PhaseVal
eCdce62005BadOutput2PhaseVal = _eapi.eCdce62005BadOutput2PhaseVal
eCdce62005BadOutput3PhaseVal = _eapi.eCdce62005BadOutput3PhaseVal
eCdce62005BadOutput4PhaseVal = _eapi.eCdce62005BadOutput4PhaseVal
eCdce62005BadOutput5PhaseVal = _eapi.eCdce62005BadOutput5PhaseVal
AD9148_INVALIDTEMP = _eapi.AD9148_INVALIDTEMP
AD9148_CHANNELS_PER_DAC = _eapi.AD9148_CHANNELS_PER_DAC
AD9148_QUADPHASERANGEMIN = _eapi.AD9148_QUADPHASERANGEMIN
AD9148_QUADPHASERANGEMAX = _eapi.AD9148_QUADPHASERANGEMAX
eAd9148DacPairEnable = _eapi.eAd9148DacPairEnable
eAd9148DacPairDisable = _eapi.eAd9148DacPairDisable
class Ad9148_stCore(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ad9148_stCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ad9148_stCore, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_pCom"] = _eapi.Ad9148_stCore_m_pCom_set
    __swig_getmethods__["m_pCom"] = _eapi.Ad9148_stCore_m_pCom_get
    if _newclass:m_pCom = _swig_property(_eapi.Ad9148_stCore_m_pCom_get, _eapi.Ad9148_stCore_m_pCom_set)
    def __init__(self): 
        this = _eapi.new_Ad9148_stCore()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_Ad9148_stCore
    __del__ = lambda self : None;
Ad9148_stCore_swigregister = _eapi.Ad9148_stCore_swigregister
Ad9148_stCore_swigregister(Ad9148_stCore)

eAd9148SyncFifoRate = _eapi.eAd9148SyncFifoRate
eAd9148SyncDataRate = _eapi.eAd9148SyncDataRate
eAd9148SyncDisable = _eapi.eAd9148SyncDisable
eAd9148SyncEnable = _eapi.eAd9148SyncEnable
eAd9148FineModEnable = _eapi.eAd9148FineModEnable
eAd9148FineModDisable = _eapi.eAd9148FineModDisable
eAd9148Format2Complement = _eapi.eAd9148Format2Complement
eAd9148FormatBinary = _eapi.eAd9148FormatBinary
eAd9148SyncAveraging1 = _eapi.eAd9148SyncAveraging1
eAd9148SyncAveraging2 = _eapi.eAd9148SyncAveraging2
eAd9148SyncAveraging4 = _eapi.eAd9148SyncAveraging4
eAd9148SyncAveraging8 = _eapi.eAd9148SyncAveraging8
eAd9148SyncAveraging16 = _eapi.eAd9148SyncAveraging16
eAd9148SyncAveraging32 = _eapi.eAd9148SyncAveraging32
eAd9148SyncAveraging64 = _eapi.eAd9148SyncAveraging64
eAd9148SyncAveraging128 = _eapi.eAd9148SyncAveraging128
eAd9148FifoOffset0 = _eapi.eAd9148FifoOffset0
eAd9148FifoOffset1 = _eapi.eAd9148FifoOffset1
eAd9148FifoOffset2 = _eapi.eAd9148FifoOffset2
eAd9148FifoOffset3 = _eapi.eAd9148FifoOffset3
eAd9148FifoOffset4 = _eapi.eAd9148FifoOffset4
eAd9148FifoOffset5 = _eapi.eAd9148FifoOffset5
eAd9148FifoOffset6 = _eapi.eAd9148FifoOffset6
eAd9148FifoOffset7 = _eapi.eAd9148FifoOffset7
eAd9148SyncFallingEdge = _eapi.eAd9148SyncFallingEdge
eAd9148SyncRisingEdge = _eapi.eAd9148SyncRisingEdge
eAd9148EventInactive = _eapi.eAd9148EventInactive
eAd9148EventActive = _eapi.eAd9148EventActive
eAd9148OutputEnable = _eapi.eAd9148OutputEnable
eAd9148OutputDisable = _eapi.eAd9148OutputDisable
eAd9148SelectDac1I = _eapi.eAd9148SelectDac1I
eAd9148SelectDac2Q = _eapi.eAd9148SelectDac2Q
eAd9148SelectDac3I = _eapi.eAd9148SelectDac3I
eAd9148SelectDac4Q = _eapi.eAd9148SelectDac4Q
eAd9148SelectIQDac12 = _eapi.eAd9148SelectIQDac12
eAd9148SelectIQDac34 = _eapi.eAd9148SelectIQDac34
eAd9148SelectPortA = _eapi.eAd9148SelectPortA
eAd9148SelectPortB = _eapi.eAd9148SelectPortB
eAd9148SedDisable = _eapi.eAd9148SedDisable
eAd9148SedEnable = _eapi.eAd9148SedEnable
eAd9148SedAutoClearEnable = _eapi.eAd9148SedAutoClearEnable
eAd9148ISincEnable = _eapi.eAd9148ISincEnable
eAd9148ISincDisable = _eapi.eAd9148ISincDisable
eAd9148NcoHighSide = _eapi.eAd9148NcoHighSide
eAd9148NcoLowSide = _eapi.eAd9148NcoLowSide
eAd9148Inter1x = _eapi.eAd9148Inter1x
eAd9148Inter2x = _eapi.eAd9148Inter2x
eAd9148Inter2x_fsdiv4 = _eapi.eAd9148Inter2x_fsdiv4
eAd9148Inter2x_fsdiv2 = _eapi.eAd9148Inter2x_fsdiv2
eAd9148Inter2x_3fsdiv4 = _eapi.eAd9148Inter2x_3fsdiv4
eAd9148Inter4x = _eapi.eAd9148Inter4x
eAd9148Inter4x_fsdiv8 = _eapi.eAd9148Inter4x_fsdiv8
eAd9148Inter4x_fsdiv4 = _eapi.eAd9148Inter4x_fsdiv4
eAd9148Inter4x_3fsdiv8 = _eapi.eAd9148Inter4x_3fsdiv8
eAd9148Inter4x_fsdiv2 = _eapi.eAd9148Inter4x_fsdiv2
eAd9148Inter4x_5fsdiv8 = _eapi.eAd9148Inter4x_5fsdiv8
eAd9148Inter4x_3fsdiv4 = _eapi.eAd9148Inter4x_3fsdiv4
eAd9148Inter4x_7fsdiv8 = _eapi.eAd9148Inter4x_7fsdiv8
eAd9148Inter8x = _eapi.eAd9148Inter8x
eAd9148Inter8x_fsdiv8 = _eapi.eAd9148Inter8x_fsdiv8
eAd9148Inter8x_fsdiv4 = _eapi.eAd9148Inter8x_fsdiv4
eAd9148Inter8x_3fsdiv8 = _eapi.eAd9148Inter8x_3fsdiv8
eAd9148Inter8x_fsdiv2 = _eapi.eAd9148Inter8x_fsdiv2
eAd9148Inter8x_5fsdiv8 = _eapi.eAd9148Inter8x_5fsdiv8
eAd9148Inter8x_3fsdiv4 = _eapi.eAd9148Inter8x_3fsdiv4
eAd9148Inter8x_7fsdiv8 = _eapi.eAd9148Inter8x_7fsdiv8
class Ad9148_stDacEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ad9148_stDacEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ad9148_stDacEvent, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _eapi.new_Ad9148_stDacEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_Ad9148_stDacEvent
    __del__ = lambda self : None;
Ad9148_stDacEvent_swigregister = _eapi.Ad9148_stDacEvent_swigregister
Ad9148_stDacEvent_swigregister(Ad9148_stDacEvent)

class Ad9148_stISincCoefficients(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ad9148_stISincCoefficients, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ad9148_stISincCoefficients, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _eapi.new_Ad9148_stISincCoefficients()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_Ad9148_stISincCoefficients
    __del__ = lambda self : None;
Ad9148_stISincCoefficients_swigregister = _eapi.Ad9148_stISincCoefficients_swigregister
Ad9148_stISincCoefficients_swigregister(Ad9148_stISincCoefficients)

eAd9148Addr00 = _eapi.eAd9148Addr00
eAd9148Addr01 = _eapi.eAd9148Addr01
eAd9148Addr03 = _eapi.eAd9148Addr03
eAd9148Addr04 = _eapi.eAd9148Addr04
eAd9148Addr05 = _eapi.eAd9148Addr05
eAd9148Addr06 = _eapi.eAd9148Addr06
eAd9148Addr07 = _eapi.eAd9148Addr07
eAd9148Addr08 = _eapi.eAd9148Addr08
eAd9148Addr0a = _eapi.eAd9148Addr0a
eAd9148Addr0c = _eapi.eAd9148Addr0c
eAd9148Addr0d = _eapi.eAd9148Addr0d
eAd9148Addr0e = _eapi.eAd9148Addr0e
eAd9148Addr0f = _eapi.eAd9148Addr0f
eAd9148Addr10 = _eapi.eAd9148Addr10
eAd9148Addr11 = _eapi.eAd9148Addr11
eAd9148Addr12 = _eapi.eAd9148Addr12
eAd9148Addr14 = _eapi.eAd9148Addr14
eAd9148Addr15 = _eapi.eAd9148Addr15
eAd9148Addr17 = _eapi.eAd9148Addr17
eAd9148Addr18 = _eapi.eAd9148Addr18
eAd9148Addr19 = _eapi.eAd9148Addr19
eAd9148Addr1a = _eapi.eAd9148Addr1a
eAd9148Addr1c = _eapi.eAd9148Addr1c
eAd9148Addr1d = _eapi.eAd9148Addr1d
eAd9148Addr1e = _eapi.eAd9148Addr1e
eAd9148Addr1f = _eapi.eAd9148Addr1f
eAd9148Addr20 = _eapi.eAd9148Addr20
eAd9148Addr21 = _eapi.eAd9148Addr21
eAd9148Addr22 = _eapi.eAd9148Addr22
eAd9148Addr23 = _eapi.eAd9148Addr23
eAd9148Addr24 = _eapi.eAd9148Addr24
eAd9148Addr25 = _eapi.eAd9148Addr25
eAd9148Addr26 = _eapi.eAd9148Addr26
eAd9148Addr27 = _eapi.eAd9148Addr27
eAd9148Addr28 = _eapi.eAd9148Addr28
eAd9148Addr29 = _eapi.eAd9148Addr29
eAd9148Addr2a = _eapi.eAd9148Addr2a
eAd9148Addr2b = _eapi.eAd9148Addr2b
eAd9148Addr2c = _eapi.eAd9148Addr2c
eAd9148Addr2d = _eapi.eAd9148Addr2d
eAd9148Addr2e = _eapi.eAd9148Addr2e
eAd9148Addr2f = _eapi.eAd9148Addr2f
eAd9148Addr30 = _eapi.eAd9148Addr30
eAd9148Addr31 = _eapi.eAd9148Addr31
eAd9148Addr32 = _eapi.eAd9148Addr32
eAd9148Addr33 = _eapi.eAd9148Addr33
eAd9148Addr34 = _eapi.eAd9148Addr34
eAd9148Addr35 = _eapi.eAd9148Addr35
eAd9148Addr36 = _eapi.eAd9148Addr36
eAd9148Addr37 = _eapi.eAd9148Addr37
eAd9148Addr38 = _eapi.eAd9148Addr38
eAd9148Addr39 = _eapi.eAd9148Addr39
eAd9148Addr3a = _eapi.eAd9148Addr3a
eAd9148Addr3b = _eapi.eAd9148Addr3b
eAd9148Addr3c = _eapi.eAd9148Addr3c
eAd9148Addr3d = _eapi.eAd9148Addr3d
eAd9148Addr3e = _eapi.eAd9148Addr3e
eAd9148Addr3f = _eapi.eAd9148Addr3f
eAd9148Addr40 = _eapi.eAd9148Addr40
eAd9148Addr41 = _eapi.eAd9148Addr41
eAd9148Addr42 = _eapi.eAd9148Addr42
eAd9148Addr43 = _eapi.eAd9148Addr43
eAd9148Addr44 = _eapi.eAd9148Addr44
eAd9148Addr50 = _eapi.eAd9148Addr50
eAd9148Addr51 = _eapi.eAd9148Addr51
eAd9148Addr54 = _eapi.eAd9148Addr54
eAd9148Addr55 = _eapi.eAd9148Addr55
eAd9148Addr56 = _eapi.eAd9148Addr56
eAd9148Addr57 = _eapi.eAd9148Addr57
eAd9148Addr58 = _eapi.eAd9148Addr58
eAd9148Addr59 = _eapi.eAd9148Addr59
eAd9148Addr5a = _eapi.eAd9148Addr5a
eAd9148Addr5c = _eapi.eAd9148Addr5c
eAd9148Addr5d = _eapi.eAd9148Addr5d
eAd9148Addr5e = _eapi.eAd9148Addr5e
eAd9148Addr5f = _eapi.eAd9148Addr5f
eAd9148Addr72 = _eapi.eAd9148Addr72
eAd9148Ok = _eapi.eAd9148Ok
eAd9148InvalidAddr01 = _eapi.eAd9148InvalidAddr01
eAd9148InvalidAddr02 = _eapi.eAd9148InvalidAddr02
eAd9148InvalidDacSelect01 = _eapi.eAd9148InvalidDacSelect01
eAd9148InvalidDacPair01 = _eapi.eAd9148InvalidDacPair01
eAd9148InvalidDacPort01 = _eapi.eAd9148InvalidDacPort01
eAd9148InvalidDacPair03 = _eapi.eAd9148InvalidDacPair03
eAd9148FtwUpdateTimeOut = _eapi.eAd9148FtwUpdateTimeOut
eAd9148InvalidDacPair02 = _eapi.eAd9148InvalidDacPair02
eAd9148IQuadPhaseErr = _eapi.eAd9148IQuadPhaseErr
eAd9148QQuadPhaseErr = _eapi.eAd9148QQuadPhaseErr
eAd9148InvalidDacSelect02 = _eapi.eAd9148InvalidDacSelect02
eAd9148InvalidDacSelect03 = _eapi.eAd9148InvalidDacSelect03
eAd9148InvalidInterMode = _eapi.eAd9148InvalidInterMode
eAd9148InvalidSyncMode = _eapi.eAd9148InvalidSyncMode
eAd9148InvalidSyncCtrl = _eapi.eAd9148InvalidSyncCtrl
eAd9148InvalidSyncAvg = _eapi.eAd9148InvalidSyncAvg
eAd9148InvalidSyncEdge = _eapi.eAd9148InvalidSyncEdge
eAd9148InvalidSyncOffset = _eapi.eAd9148InvalidSyncOffset
eAd9148InvalidOutCtrl = _eapi.eAd9148InvalidOutCtrl
eAd9148InvalidSedCtrl = _eapi.eAd9148InvalidSedCtrl
eAd9148InvalidISincCtrl = _eapi.eAd9148InvalidISincCtrl
eAd9148InvalidSideband = _eapi.eAd9148InvalidSideband
eAd9148InvalidNcoCtrl = _eapi.eAd9148InvalidNcoCtrl
eAd9148InvalidDataFormat = _eapi.eAd9148InvalidDataFormat
eAd9148InvalidDacPort02 = _eapi.eAd9148InvalidDacPort02

def Carrier_Reboot_send(*args):
  return _eapi.Carrier_Reboot_send(*args)
Carrier_Reboot_send = _eapi.Carrier_Reboot_send

def Carrier_Presence_send(*args):
  return _eapi.Carrier_Presence_send(*args)
Carrier_Presence_send = _eapi.Carrier_Presence_send

def Carrier_GetType_send(*args):
  return _eapi.Carrier_GetType_send(*args)
Carrier_GetType_send = _eapi.Carrier_GetType_send

def Carrier_GetModuleBaseAddr_send(*args):
  return _eapi.Carrier_GetModuleBaseAddr_send(*args)
Carrier_GetModuleBaseAddr_send = _eapi.Carrier_GetModuleBaseAddr_send

def Carrier_LedSetValue_send(*args):
  return _eapi.Carrier_LedSetValue_send(*args)
Carrier_LedSetValue_send = _eapi.Carrier_LedSetValue_send

def Carrier_LedGetValue_send(*args):
  return _eapi.Carrier_LedGetValue_send(*args)
Carrier_LedGetValue_send = _eapi.Carrier_LedGetValue_send

def Carrier_TClkSetState_send(*args):
  return _eapi.Carrier_TClkSetState_send(*args)
Carrier_TClkSetState_send = _eapi.Carrier_TClkSetState_send

def Carrier_TClkGetState_send(*args):
  return _eapi.Carrier_TClkGetState_send(*args)
Carrier_TClkGetState_send = _eapi.Carrier_TClkGetState_send

def Carrier_TClkSetTxSource_send(*args):
  return _eapi.Carrier_TClkSetTxSource_send(*args)
Carrier_TClkSetTxSource_send = _eapi.Carrier_TClkSetTxSource_send

def Carrier_TClkGetTxSource_send(*args):
  return _eapi.Carrier_TClkGetTxSource_send(*args)
Carrier_TClkGetTxSource_send = _eapi.Carrier_TClkGetTxSource_send

def Carrier_FmcBidirClkSetConnection_send(*args):
  return _eapi.Carrier_FmcBidirClkSetConnection_send(*args)
Carrier_FmcBidirClkSetConnection_send = _eapi.Carrier_FmcBidirClkSetConnection_send

def Carrier_FmcBidirClkGetConnection_send(*args):
  return _eapi.Carrier_FmcBidirClkGetConnection_send(*args)
Carrier_FmcBidirClkGetConnection_send = _eapi.Carrier_FmcBidirClkGetConnection_send

def Carrier_SetOscState_send(*args):
  return _eapi.Carrier_SetOscState_send(*args)
Carrier_SetOscState_send = _eapi.Carrier_SetOscState_send

def Carrier_GetOscState_send(*args):
  return _eapi.Carrier_GetOscState_send(*args)
Carrier_GetOscState_send = _eapi.Carrier_GetOscState_send

def Carrier_FClkASetConnection_send(*args):
  return _eapi.Carrier_FClkASetConnection_send(*args)
Carrier_FClkASetConnection_send = _eapi.Carrier_FClkASetConnection_send

def Carrier_FClkAGetConnection_send(*args):
  return _eapi.Carrier_FClkAGetConnection_send(*args)
Carrier_FClkAGetConnection_send = _eapi.Carrier_FClkAGetConnection_send

def Carrier_I2cRead_send(*args):
  return _eapi.Carrier_I2cRead_send(*args)
Carrier_I2cRead_send = _eapi.Carrier_I2cRead_send

def Carrier_I2cWrite_send(*args):
  return _eapi.Carrier_I2cWrite_send(*args)
Carrier_I2cWrite_send = _eapi.Carrier_I2cWrite_send

def Carrier_I2cReadNoWrData_send(*args):
  return _eapi.Carrier_I2cReadNoWrData_send(*args)
Carrier_I2cReadNoWrData_send = _eapi.Carrier_I2cReadNoWrData_send
CARRIER_REG_BASE_ADDR = _eapi.CARRIER_REG_BASE_ADDR
CARRIER_REG_MAX_NUM = _eapi.CARRIER_REG_MAX_NUM
CARRIER_REG_SIZE = _eapi.CARRIER_REG_SIZE
Carrier_ePerseus601X = _eapi.Carrier_ePerseus601X
Carrier_ePerseus611X = _eapi.Carrier_ePerseus611X
Carrier_eML605 = _eapi.Carrier_eML605
Carrier_eVC707 = _eapi.Carrier_eVC707
Carrier_eZedboard = _eapi.Carrier_eZedboard
Carrier_eZC706 = _eapi.Carrier_eZC706
Carrier_eUnknown = _eapi.Carrier_eUnknown
class I2C_Options_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, I2C_Options_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, I2C_Options_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nbByteAddr"] = _eapi.I2C_Options_t_nbByteAddr_set
    __swig_getmethods__["nbByteAddr"] = _eapi.I2C_Options_t_nbByteAddr_get
    if _newclass:nbByteAddr = _swig_property(_eapi.I2C_Options_t_nbByteAddr_get, _eapi.I2C_Options_t_nbByteAddr_set)
    __swig_setmethods__["stopCondition"] = _eapi.I2C_Options_t_stopCondition_set
    __swig_getmethods__["stopCondition"] = _eapi.I2C_Options_t_stopCondition_get
    if _newclass:stopCondition = _swig_property(_eapi.I2C_Options_t_stopCondition_get, _eapi.I2C_Options_t_stopCondition_set)
    def __init__(self): 
        this = _eapi.new_I2C_Options_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_I2C_Options_t
    __del__ = lambda self : None;
I2C_Options_t_swigregister = _eapi.I2C_Options_t_swigregister
I2C_Options_t_swigregister(I2C_Options_t)

I2C_I2SCAN_MAX_DEV = _eapi.I2C_I2SCAN_MAX_DEV
class I2C_stI2cScan(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, I2C_stI2cScan, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, I2C_stI2cScan, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_ucDevDetect"] = _eapi.I2C_stI2cScan_m_ucDevDetect_set
    __swig_getmethods__["m_ucDevDetect"] = _eapi.I2C_stI2cScan_m_ucDevDetect_get
    if _newclass:m_ucDevDetect = _swig_property(_eapi.I2C_stI2cScan_m_ucDevDetect_get, _eapi.I2C_stI2cScan_m_ucDevDetect_set)
    def __init__(self): 
        this = _eapi.new_I2C_stI2cScan()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_I2C_stI2cScan
    __del__ = lambda self : None;
I2C_stI2cScan_swigregister = _eapi.I2C_stI2cScan_swigregister
I2C_stI2cScan_swigregister(I2C_stI2cScan)

Carrier_eModuleRTDExGigE = _eapi.Carrier_eModuleRTDExGigE
Carrier_eModuleRecPlay = _eapi.Carrier_eModuleRecPlay
Carrier_eModuleI2C = _eapi.Carrier_eModuleI2C
Carrier_eModuleDdr3I2C = _eapi.Carrier_eModuleDdr3I2C
Carrier_eModuleFMC = _eapi.Carrier_eModuleFMC
Carrier_eModuleCarrier = _eapi.Carrier_eModuleCarrier
Carrier_eModulePpsSync = _eapi.Carrier_eModulePpsSync
Carrier_eModuleLVDS = _eapi.Carrier_eModuleLVDS
Carrier_eModuleAurora = _eapi.Carrier_eModuleAurora
Carrier_eModuleRTDExSync = _eapi.Carrier_eModuleRTDExSync
Carrier_eModuleTimestamp = _eapi.Carrier_eModuleTimestamp
Carrier_eModuleDPRAM = _eapi.Carrier_eModuleDPRAM
Carrier_eModuleSysMon = _eapi.Carrier_eModuleSysMon
Carrier_eMemSpaceUser = _eapi.Carrier_eMemSpaceUser
Carrier_eMemSpaceFMC = _eapi.Carrier_eMemSpaceFMC
CARRIER_MODULE_UNDETECTED = _eapi.CARRIER_MODULE_UNDETECTED
CARRIER_MODULE_UNIDENTIFIED = _eapi.CARRIER_MODULE_UNIDENTIFIED
CARRIER_WRONGFPGA_CORE = _eapi.CARRIER_WRONGFPGA_CORE
CARRIER_UNMATCH_MODULES_SLOT = _eapi.CARRIER_UNMATCH_MODULES_SLOT
CARRIER_UNMATCH_VADJ = _eapi.CARRIER_UNMATCH_VADJ
CARRIER_UNSUPPORTED_VADJ = _eapi.CARRIER_UNSUPPORTED_VADJ
CARRIER_VALID = _eapi.CARRIER_VALID
CARRIER_LAST = _eapi.CARRIER_LAST
Carrier_eFmcConnector0 = _eapi.Carrier_eFmcConnector0
Carrier_eFmcConnector1 = _eapi.Carrier_eFmcConnector1
Carrier_eFmcConnectorLast = _eapi.Carrier_eFmcConnectorLast
Carrier_eFmcSlot0 = _eapi.Carrier_eFmcSlot0
Carrier_eFmcSlotLast = _eapi.Carrier_eFmcSlotLast
Carrier_eFmcBoard0 = _eapi.Carrier_eFmcBoard0
Carrier_eFmcBoard1 = _eapi.Carrier_eFmcBoard1
Carrier_eFmcBoardLast = _eapi.Carrier_eFmcBoardLast
VADJ_FIRST = _eapi.VADJ_FIRST
VADJ_1_192V = _eapi.VADJ_1_192V
VADJ_1_490V = _eapi.VADJ_1_490V
VADJ_1_803V = _eapi.VADJ_1_803V
VADJ_2_503V = _eapi.VADJ_2_503V
VADJ_3_300V = _eapi.VADJ_3_300V
VADJ_DISABLE = _eapi.VADJ_DISABLE
VADJ_UNKNOWN = _eapi.VADJ_UNKNOWN
VADJ_1_192V_LEVEL = _eapi.VADJ_1_192V_LEVEL
VADJ_1_490V_LEVEL = _eapi.VADJ_1_490V_LEVEL
VADJ_1_803V_LEVEL = _eapi.VADJ_1_803V_LEVEL
VADJ_2_503V_LEVEL = _eapi.VADJ_2_503V_LEVEL
VADJ_3_300V_LEVEL = _eapi.VADJ_3_300V_LEVEL
VADJ_DISABLE_LEVEL = _eapi.VADJ_DISABLE_LEVEL
VADJ_UNKNOWN_LEVEL = _eapi.VADJ_UNKNOWN_LEVEL
Carrier_eTClkA = _eapi.Carrier_eTClkA
Carrier_eTClkB = _eapi.Carrier_eTClkB
Carrier_eTClkC = _eapi.Carrier_eTClkC
Carrier_eTClkD = _eapi.Carrier_eTClkD
Carrier_eTClkTx = _eapi.Carrier_eTClkTx
Carrier_eTClkRx = _eapi.Carrier_eTClkRx
Carrier_eClkDisable = _eapi.Carrier_eClkDisable
Carrier_eClkEnable = _eapi.Carrier_eClkEnable
Carrier_eClkUnknown = _eapi.Carrier_eClkUnknown
Carrier_eOscMgtRefClk100M = _eapi.Carrier_eOscMgtRefClk100M
Carrier_eOscMgtRefClk125M = _eapi.Carrier_eOscMgtRefClk125M
Carrier_eOscMgtRefClk156M25 = _eapi.Carrier_eOscMgtRefClk156M25
Carrier_eTClkFromFpga = _eapi.Carrier_eTClkFromFpga
Carrier_eTClkFromFmc = _eapi.Carrier_eTClkFromFmc
Carrier_eFmc1BidirClk2 = _eapi.Carrier_eFmc1BidirClk2
Carrier_eFmc1BidirClk3 = _eapi.Carrier_eFmc1BidirClk3
Carrier_eFmc2BidirClk2 = _eapi.Carrier_eFmc2BidirClk2
Carrier_eFmc2BidirClk3 = _eapi.Carrier_eFmc2BidirClk3
Carrier_eFmcBidirClkWithFPGA = _eapi.Carrier_eFmcBidirClkWithFPGA
Carrier_eFmcBidirClkFromTClk = _eapi.Carrier_eFmcBidirClkFromTClk
Carrier_eFClkAToMgtRefClk = _eapi.Carrier_eFClkAToMgtRefClk
Carrier_eFClkAFrom100MOsc = _eapi.Carrier_eFClkAFrom100MOsc
Carrier_eFClkADisable = _eapi.Carrier_eFClkADisable
CARRIER_NOT_DETECTED = _eapi.CARRIER_NOT_DETECTED
CARRIER_EXACT_DETECTED = _eapi.CARRIER_EXACT_DETECTED
CARRIER_COMP_DETECTED = _eapi.CARRIER_COMP_DETECTED
CARRIER_INFO_STATE = _eapi.CARRIER_INFO_STATE
CARRIER_INFO_BOARDTYPE = _eapi.CARRIER_INFO_BOARDTYPE
CARRIER_INFO_FPGACORE = _eapi.CARRIER_INFO_FPGACORE
CARRIER_INFO_CARRIERVADJ = _eapi.CARRIER_INFO_CARRIERVADJ
CARRIER_INFO_IDSTRING = _eapi.CARRIER_INFO_IDSTRING
CARRIER_INFO_PARTNUM = _eapi.CARRIER_INFO_PARTNUM
CARRIER_INFO_SERIALNUM = _eapi.CARRIER_INFO_SERIALNUM
CARRIER_INFO_HARDREV = _eapi.CARRIER_INFO_HARDREV
CARRIER_INFO_SOFTREV = _eapi.CARRIER_INFO_SOFTREV
CARRIER_INFO_VADJVAL = _eapi.CARRIER_INFO_VADJVAL
CARRIER_INFO_MANUF = _eapi.CARRIER_INFO_MANUF
CARRIER_INFO_FPGACORENAME = _eapi.CARRIER_INFO_FPGACORENAME
CARRIER_PRINTOUT_NONE = _eapi.CARRIER_PRINTOUT_NONE
CARRIER_PRINTOUT_SUMMARY = _eapi.CARRIER_PRINTOUT_SUMMARY
CARRIER_PRINTOUT_MINIMUM = _eapi.CARRIER_PRINTOUT_MINIMUM
CARRIER_PRINTOUT_DEEP = _eapi.CARRIER_PRINTOUT_DEEP
CARRIER_OK = _eapi.CARRIER_OK
CARRIER_NOT_OPEN = _eapi.CARRIER_NOT_OPEN
CARRIER_INVALID_ASSGFCT = _eapi.CARRIER_INVALID_ASSGFCT
CARRIER_INVALID_VADJFCT = _eapi.CARRIER_INVALID_VADJFCT
CARRIER_INVALID_TIMERFCT = _eapi.CARRIER_INVALID_TIMERFCT
CARRIER_BOARDTYPE_NOTEXIST = _eapi.CARRIER_BOARDTYPE_NOTEXIST
CARRIER_NODISCOVER = _eapi.CARRIER_NODISCOVER
CARRIER_VADJ_NOVALIDMODULE = _eapi.CARRIER_VADJ_NOVALIDMODULE
CARRIER_INVALID_CONNECTOR = _eapi.CARRIER_INVALID_CONNECTOR
CARRIER_INVALID_BOARD = _eapi.CARRIER_INVALID_BOARD
CARRIER_INVALID_BOARDTYPELST = _eapi.CARRIER_INVALID_BOARDTYPELST
CARRIER_INVALID_STRING = _eapi.CARRIER_INVALID_STRING
CARRIER_BADINFOTYPE = _eapi.CARRIER_BADINFOTYPE
CARRIER_VADJ_NEIGHBORBAD = _eapi.CARRIER_VADJ_NEIGHBORBAD
CARRIER_INVALID_SIGNALFCT = _eapi.CARRIER_INVALID_SIGNALFCT
CARRIER_INVALID_INTSTRUCT = _eapi.CARRIER_INVALID_INTSTRUCT
CARRIER_INVALID_BOTINTSTRUCT = _eapi.CARRIER_INVALID_BOTINTSTRUCT
CARRIER_INVALID_ROUTEDPIN = _eapi.CARRIER_INVALID_ROUTEDPIN
CARRIER_INVALID_I2C_ZONE = _eapi.CARRIER_INVALID_I2C_ZONE
CARRIER_INVALID_USLEEPFCT = _eapi.CARRIER_INVALID_USLEEPFCT
CARRIER_INVALID_FCT = _eapi.CARRIER_INVALID_FCT
CARRIER_I2C_BUS_TIMEOUT = _eapi.CARRIER_I2C_BUS_TIMEOUT
CARRIER_I2C_TIMEOUT = _eapi.CARRIER_I2C_TIMEOUT
CARRIER_INVALID_CLOCKCONFIG = _eapi.CARRIER_INVALID_CLOCKCONFIG
CARRIER_INVALID_100MOSCSTATE = _eapi.CARRIER_INVALID_100MOSCSTATE
CARRIER_INVALID_MODULE = _eapi.CARRIER_INVALID_MODULE
CARRIER_INVALID_MODULE_INDEX = _eapi.CARRIER_INVALID_MODULE_INDEX
CARRIER_INVALID_INDEX = _eapi.CARRIER_INVALID_INDEX
CARRIER_INVALID_VADJSETTING = _eapi.CARRIER_INVALID_VADJSETTING
CARRIER_ALLOC_FAILED = _eapi.CARRIER_ALLOC_FAILED
CARRIER_INVALID_VADJREQCONNECTOR = _eapi.CARRIER_INVALID_VADJREQCONNECTOR
CARRIER_INVALID_SIGNALPTR = _eapi.CARRIER_INVALID_SIGNALPTR
CARRIER_INVALID_PTR = _eapi.CARRIER_INVALID_PTR
CARRIER_INVALID_I2C_OPTION = _eapi.CARRIER_INVALID_I2C_OPTION
CARRIER_I2C_FAILED = _eapi.CARRIER_I2C_FAILED
CARRIER_INVALID = _eapi.CARRIER_INVALID
CARRIER_INVALID_MEM_SPACE = _eapi.CARRIER_INVALID_MEM_SPACE
CARRIER_INVALID_I2C_ADDRESS = _eapi.CARRIER_INVALID_I2C_ADDRESS
EAPI_FMCVITA_MAXSTRING = _eapi.EAPI_FMCVITA_MAXSTRING

def FMCEEprom_eeprom_read_send(*args):
  return _eapi.FMCEEprom_eeprom_read_send(*args)
FMCEEprom_eeprom_read_send = _eapi.FMCEEprom_eeprom_read_send

def FMCEEprom_eeprom_write_send(*args):
  return _eapi.FMCEEprom_eeprom_write_send(*args)
FMCEEprom_eeprom_write_send = _eapi.FMCEEprom_eeprom_write_send

def FMCEEprom_eeprom_get_idstring_send(*args):
  return _eapi.FMCEEprom_eeprom_get_idstring_send(*args)
FMCEEprom_eeprom_get_idstring_send = _eapi.FMCEEprom_eeprom_get_idstring_send

def FMCEEprom_eeprom_get_board_state_send(*args):
  return _eapi.FMCEEprom_eeprom_get_board_state_send(*args)
FMCEEprom_eeprom_get_board_state_send = _eapi.FMCEEprom_eeprom_get_board_state_send

def FMCEEprom_eeprom_get_board_type_send(*args):
  return _eapi.FMCEEprom_eeprom_get_board_type_send(*args)
FMCEEprom_eeprom_get_board_type_send = _eapi.FMCEEprom_eeprom_get_board_type_send

def FMCEEprom_eeprom_get_core_send(*args):
  return _eapi.FMCEEprom_eeprom_get_core_send(*args)
FMCEEprom_eeprom_get_core_send = _eapi.FMCEEprom_eeprom_get_core_send

def FMCEEprom_eeprom_get_carriervadj_send(*args):
  return _eapi.FMCEEprom_eeprom_get_carriervadj_send(*args)
FMCEEprom_eeprom_get_carriervadj_send = _eapi.FMCEEprom_eeprom_get_carriervadj_send

def FMCEEprom_eeprom_get_partnum_send(*args):
  return _eapi.FMCEEprom_eeprom_get_partnum_send(*args)
FMCEEprom_eeprom_get_partnum_send = _eapi.FMCEEprom_eeprom_get_partnum_send

def FMCEEprom_eeprom_get_serialnum_send(*args):
  return _eapi.FMCEEprom_eeprom_get_serialnum_send(*args)
FMCEEprom_eeprom_get_serialnum_send = _eapi.FMCEEprom_eeprom_get_serialnum_send

def FMCEEprom_eeprom_get_hardrev_send(*args):
  return _eapi.FMCEEprom_eeprom_get_hardrev_send(*args)
FMCEEprom_eeprom_get_hardrev_send = _eapi.FMCEEprom_eeprom_get_hardrev_send

def FMCEEprom_eeprom_get_firmrev_send(*args):
  return _eapi.FMCEEprom_eeprom_get_firmrev_send(*args)
FMCEEprom_eeprom_get_firmrev_send = _eapi.FMCEEprom_eeprom_get_firmrev_send

def FMCEEprom_eeprom_get_modvadj_send(*args):
  return _eapi.FMCEEprom_eeprom_get_modvadj_send(*args)
FMCEEprom_eeprom_get_modvadj_send = _eapi.FMCEEprom_eeprom_get_modvadj_send

def FMCEEprom_eeprom_get_corename_send(*args):
  return _eapi.FMCEEprom_eeprom_get_corename_send(*args)
FMCEEprom_eeprom_get_corename_send = _eapi.FMCEEprom_eeprom_get_corename_send

def FMCEEprom_eeprom_get_manuf_send(*args):
  return _eapi.FMCEEprom_eeprom_get_manuf_send(*args)
FMCEEprom_eeprom_get_manuf_send = _eapi.FMCEEprom_eeprom_get_manuf_send

def FMCEEprom_eeprom_wipe_send(*args):
  return _eapi.FMCEEprom_eeprom_wipe_send(*args)
FMCEEprom_eeprom_wipe_send = _eapi.FMCEEprom_eeprom_wipe_send

def PPSSync_Presence_send(*args):
  return _eapi.PPSSync_Presence_send(*args)
PPSSync_Presence_send = _eapi.PPSSync_Presence_send

def PPSSync_Configure_send(*args):
  return _eapi.PPSSync_Configure_send(*args)
PPSSync_Configure_send = _eapi.PPSSync_Configure_send

def PPSSync_DacInit_send(*args):
  return _eapi.PPSSync_DacInit_send(*args)
PPSSync_DacInit_send = _eapi.PPSSync_DacInit_send

def PPSSync_Start_send(*args):
  return _eapi.PPSSync_Start_send(*args)
PPSSync_Start_send = _eapi.PPSSync_Start_send

def PPSSync_Stop_send(*args):
  return _eapi.PPSSync_Stop_send(*args)
PPSSync_Stop_send = _eapi.PPSSync_Stop_send

def PPSSync_ReadRefDacVal_send(*args):
  return _eapi.PPSSync_ReadRefDacVal_send(*args)
PPSSync_ReadRefDacVal_send = _eapi.PPSSync_ReadRefDacVal_send

def PPSSync_SaveRefDacVal_send(*args):
  return _eapi.PPSSync_SaveRefDacVal_send(*args)
PPSSync_SaveRefDacVal_send = _eapi.PPSSync_SaveRefDacVal_send

def PPSSync_ReadPIProfile_send(*args):
  return _eapi.PPSSync_ReadPIProfile_send(*args)
PPSSync_ReadPIProfile_send = _eapi.PPSSync_ReadPIProfile_send

def PPSSync_SavePIProfile_send(*args):
  return _eapi.PPSSync_SavePIProfile_send(*args)
PPSSync_SavePIProfile_send = _eapi.PPSSync_SavePIProfile_send

def PPSSync_GetInfo_send(*args):
  return _eapi.PPSSync_GetInfo_send(*args)
PPSSync_GetInfo_send = _eapi.PPSSync_GetInfo_send
FMC_RADIO_SDR_CORE = _eapi.FMC_RADIO_SDR_CORE
FMC_RADIO_LTE_COREID = _eapi.FMC_RADIO_LTE_COREID
FMC_RADIO_SPA_COREID = _eapi.FMC_RADIO_SPA_COREID
FMCRADIO_CPLD_PLLSYNC = _eapi.FMCRADIO_CPLD_PLLSYNC
FMCRADIO_CPLD_PLL_EN = _eapi.FMCRADIO_CPLD_PLL_EN
FMCRADIO_CPLD_PLLREFSEL = _eapi.FMCRADIO_CPLD_PLLREFSEL
FMCRADIO_CPLD_RXHIBANDSEL = _eapi.FMCRADIO_CPLD_RXHIBANDSEL
FMCRADIO_CPLD_TXLOWBANDSEL = _eapi.FMCRADIO_CPLD_TXLOWBANDSEL
FMCRADIO_CPLD_FILTERBANLSEL = _eapi.FMCRADIO_CPLD_FILTERBANLSEL
FMC_RADIO_SDR_LOW_BAND = _eapi.FMC_RADIO_SDR_LOW_BAND
FMC_RADIO_SDR_HIGH_BAND = _eapi.FMC_RADIO_SDR_HIGH_BAND
FMC_RADIO_LTE_LOW_BAND = _eapi.FMC_RADIO_LTE_LOW_BAND
FMC_RADIO_LTE_HIGH_BAND = _eapi.FMC_RADIO_LTE_HIGH_BAND
FMC_RADIO_LTE_WIDE_BAND = _eapi.FMC_RADIO_LTE_WIDE_BAND
FMC_RADIO_DIR_RX = _eapi.FMC_RADIO_DIR_RX
FMC_RADIO_DIR_TX = _eapi.FMC_RADIO_DIR_TX
FMC_RADIO_DIR_RXTX = _eapi.FMC_RADIO_DIR_RXTX
FMC_RADIO_DATA_USER = _eapi.FMC_RADIO_DATA_USER
FMC_RADIO_DATA_USER_CALIBRATED = _eapi.FMC_RADIO_DATA_USER_CALIBRATED
FMC_RADIO_DATA_DDS = _eapi.FMC_RADIO_DATA_DDS
FMC_RADIO_DATA_DDS_HALF = _eapi.FMC_RADIO_DATA_DDS_HALF
FMC_RADIO_DATA_NULL = _eapi.FMC_RADIO_DATA_NULL
FMC_RADIO_DATA_DDS_CALIBRATED = _eapi.FMC_RADIO_DATA_DDS_CALIBRATED
FMC_RADIO_LIME_TX_EN = _eapi.FMC_RADIO_LIME_TX_EN
FMC_RADIO_LIME_RX_EN = _eapi.FMC_RADIO_LIME_RX_EN
FMC_RADIO_LIME_ENABLE = _eapi.FMC_RADIO_LIME_ENABLE
FMC_RADIO_REF_CLK = _eapi.FMC_RADIO_REF_CLK
FMC_RADIO_RF = _eapi.FMC_RADIO_RF
FMC_RADIO_RX_GAIN = _eapi.FMC_RADIO_RX_GAIN
FMC_RADIO_TX_GAIN = _eapi.FMC_RADIO_TX_GAIN
FMC_RADIO_PLL_CPLD = _eapi.FMC_RADIO_PLL_CPLD
FMC_RADIO_CLK_MUX_LOAD = _eapi.FMC_RADIO_CLK_MUX_LOAD
FMC_RADIO_CLK_MUX_CONFIG = _eapi.FMC_RADIO_CLK_MUX_CONFIG
FMC_RADIO_PLL_LOCK = _eapi.FMC_RADIO_PLL_LOCK
FMC_RADIO_ADC_I_OVR = _eapi.FMC_RADIO_ADC_I_OVR
FMC_RADIO_ADC_Q_OVR = _eapi.FMC_RADIO_ADC_Q_OVR
FMC_RADIO_DAC_I_OVR = _eapi.FMC_RADIO_DAC_I_OVR
FMC_RADIO_DAC_Q_OVR = _eapi.FMC_RADIO_DAC_Q_OVR
FMC_RADIO_ALL_OVR = _eapi.FMC_RADIO_ALL_OVR
FMC_RADIO_PPS = _eapi.FMC_RADIO_PPS
FMC_RADIO_OVR_CLEAR = _eapi.FMC_RADIO_OVR_CLEAR
FMC_RADIO_PA_LOW_EN = _eapi.FMC_RADIO_PA_LOW_EN
FMC_RADIO_PA_HIGH_EN = _eapi.FMC_RADIO_PA_HIGH_EN
FMC_RADIO_DESIGN_CLK_EN = _eapi.FMC_RADIO_DESIGN_CLK_EN
FMC_RADIO_CORE_RESET_PULSE = _eapi.FMC_RADIO_CORE_RESET_PULSE
FMC_RADIO_FIFO_RESET = _eapi.FMC_RADIO_FIFO_RESET
FMC_RADIO_CLK_MUX_ALL_BITS = _eapi.FMC_RADIO_CLK_MUX_ALL_BITS
FMCRADIOREVSDR_A = _eapi.FMCRADIOREVSDR_A
FMCRADIOREVSDR_B = _eapi.FMCRADIOREVSDR_B
FMCRADIOREVSDR_C = _eapi.FMCRADIOREVSDR_C
FMCRADIOREVSDR_D = _eapi.FMCRADIOREVSDR_D
FMCRADIOREVLTE_A = _eapi.FMCRADIOREVLTE_A
FMCRADIOREVSPA_A = _eapi.FMCRADIOREVSPA_A
FMCRADIO_RF = _eapi.FMCRADIO_RF
FMCRADIO_TXGAIN = _eapi.FMCRADIO_TXGAIN
FMCRADIO_RXGAIN = _eapi.FMCRADIO_RXGAIN
FMCRADIO_PLL = _eapi.FMCRADIO_PLL
FMCRADIO_TCVCXODAC = _eapi.FMCRADIO_TCVCXODAC
FMCRADIO_CPLD = _eapi.FMCRADIO_CPLD
FMCRADIO_OVR = _eapi.FMCRADIO_OVR
FMCRADIO_DATARATE_REF_30_72MHZ_5DOT76MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_5DOT76MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_7DOT68MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_7DOT68MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_8DOT64MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_8DOT64MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_9DOT60MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_9DOT60MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_10DOT24MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_10DOT24MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_11DOT52MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_11DOT52MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_12DOT80MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_12DOT80MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_14DOT40MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_14DOT40MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_15DOT36MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_15DOT36MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_17DOT28MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_17DOT28MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_19DOT20MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_19DOT20MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_20DOT48MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_20DOT48MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_23DOT04MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_23DOT04MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_25DOT60MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_25DOT60MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_28DOT80MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_28DOT80MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_30DOT72MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_30DOT72MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_34DOT56MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_34DOT56MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_38DOT40MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_38DOT40MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_40DOT96MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_40DOT96MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_46DOT08MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_46DOT08MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_51DOT20MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_51DOT20MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_57DOT60MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_57DOT60MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_61DOT44MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_61DOT44MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_69DOT12MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_69DOT12MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_76DOT80MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_76DOT80MHZ
FMCRADIO_DATARATE_REF_30_72MHZ_81DOT92MHZ = _eapi.FMCRADIO_DATARATE_REF_30_72MHZ_81DOT92MHZ
FMCRADIO_DATARATE_4DOT5MHZ = _eapi.FMCRADIO_DATARATE_4DOT5MHZ
FMCRADIO_DATARATE_6MHZ = _eapi.FMCRADIO_DATARATE_6MHZ
FMCRADIO_DATARATE_7DOT2MHZ = _eapi.FMCRADIO_DATARATE_7DOT2MHZ
FMCRADIO_DATARATE_7DOT5MHZ = _eapi.FMCRADIO_DATARATE_7DOT5MHZ
FMCRADIO_DATARATE_8MHZ = _eapi.FMCRADIO_DATARATE_8MHZ
FMCRADIO_DATARATE_9MHZ = _eapi.FMCRADIO_DATARATE_9MHZ
FMCRADIO_DATARATE_9DOT6MHZ = _eapi.FMCRADIO_DATARATE_9DOT6MHZ
FMCRADIO_DATARATE_10MHZ = _eapi.FMCRADIO_DATARATE_10MHZ
FMCRADIO_DATARATE_10DOT8MHZ = _eapi.FMCRADIO_DATARATE_10DOT8MHZ
FMCRADIO_DATARATE_12MHZ = _eapi.FMCRADIO_DATARATE_12MHZ
FMCRADIO_DATARATE_12DOT5MHZ = _eapi.FMCRADIO_DATARATE_12DOT5MHZ
FMCRADIO_DATARATE_13DOT5MHZ = _eapi.FMCRADIO_DATARATE_13DOT5MHZ
FMCRADIO_DATARATE_14DOT4MHZ = _eapi.FMCRADIO_DATARATE_14DOT4MHZ
FMCRADIO_DATARATE_15MHZ = _eapi.FMCRADIO_DATARATE_15MHZ
FMCRADIO_DATARATE_16MHZ = _eapi.FMCRADIO_DATARATE_16MHZ
FMCRADIO_DATARATE_18MHZ = _eapi.FMCRADIO_DATARATE_18MHZ
FMCRADIO_DATARATE_19DOT2MHZ = _eapi.FMCRADIO_DATARATE_19DOT2MHZ
FMCRADIO_DATARATE_20MHZ = _eapi.FMCRADIO_DATARATE_20MHZ
FMCRADIO_DATARATE_21DOT6MHZ = _eapi.FMCRADIO_DATARATE_21DOT6MHZ
FMCRADIO_DATARATE_22DOT5MHZ = _eapi.FMCRADIO_DATARATE_22DOT5MHZ
FMCRADIO_DATARATE_24MHZ = _eapi.FMCRADIO_DATARATE_24MHZ
FMCRADIO_DATARATE_25MHZ = _eapi.FMCRADIO_DATARATE_25MHZ
FMCRADIO_DATARATE_27MHZ = _eapi.FMCRADIO_DATARATE_27MHZ
FMCRADIO_DATARATE_30MHZ = _eapi.FMCRADIO_DATARATE_30MHZ
FMCRADIO_DATARATE_32MHZ = _eapi.FMCRADIO_DATARATE_32MHZ
FMCRADIO_DATARATE_36MHZ = _eapi.FMCRADIO_DATARATE_36MHZ
FMCRADIO_DATARATE_37DOT5MHZ = _eapi.FMCRADIO_DATARATE_37DOT5MHZ
FMCRADIO_DATARATE_40MHZ = _eapi.FMCRADIO_DATARATE_40MHZ
FMCRADIO_DATARATE_45MHZ = _eapi.FMCRADIO_DATARATE_45MHZ
FMCRADIO_DATARATE_48MHZ = _eapi.FMCRADIO_DATARATE_48MHZ
FMCRADIO_DATARATE_50MHZ = _eapi.FMCRADIO_DATARATE_50MHZ
FMCRADIO_DATARATE_54MHZ = _eapi.FMCRADIO_DATARATE_54MHZ
FMCRADIO_DATARATE_60MHZ = _eapi.FMCRADIO_DATARATE_60MHZ
FMCRADIO_DATARATE_67DOT5MHZ = _eapi.FMCRADIO_DATARATE_67DOT5MHZ
FMCRADIO_DATARATE_72MHZ = _eapi.FMCRADIO_DATARATE_72MHZ
FMCRADIO_DATARATE_75MHZ = _eapi.FMCRADIO_DATARATE_75MHZ
FMCRADIO_DATARATE_80MHZ = _eapi.FMCRADIO_DATARATE_80MHZ
FMCRADIO_CLOCKIN_PLLCLKOUT = _eapi.FMCRADIO_CLOCKIN_PLLCLKOUT
FMCRADIO_CLOCKIN_EXTCLK = _eapi.FMCRADIO_CLOCKIN_EXTCLK
FMCRADIO_CLOCKIN_FMCCLK2 = _eapi.FMCRADIO_CLOCKIN_FMCCLK2
FMCRADIO_CLOCKIN_FMCCLK3 = _eapi.FMCRADIO_CLOCKIN_FMCCLK3
FMCRADIO_CLOCKOUT_PLLIN2 = _eapi.FMCRADIO_CLOCKOUT_PLLIN2
FMCRADIO_CLOCKOUT_NC = _eapi.FMCRADIO_CLOCKOUT_NC
FMCRADIO_CLOCKOUT_FMCCLK0 = _eapi.FMCRADIO_CLOCKOUT_FMCCLK0
FMCRADIO_CLOCKOUT_FMCCLK1 = _eapi.FMCRADIO_CLOCKOUT_FMCCLK1
FMCRADIOLTE_WIDESWITCH_RF_GROUND = _eapi.FMCRADIOLTE_WIDESWITCH_RF_GROUND
FMCRADIOLTE_WIDESWITCH_WIDE_INPUT = _eapi.FMCRADIOLTE_WIDESWITCH_WIDE_INPUT
FMCRADIOLTE_WIDESWITCH_HIGH_INPUT = _eapi.FMCRADIOLTE_WIDESWITCH_HIGH_INPUT
FMCRADIOLTE_WIDESWITCH_LOW_INPUT = _eapi.FMCRADIOLTE_WIDESWITCH_LOW_INPUT
FMCRADIOSDR_REVC_FILTER_2140MHZ = _eapi.FMCRADIOSDR_REVC_FILTER_2140MHZ
FMCRADIOSDR_REVC_FILTER_1950MHZ = _eapi.FMCRADIOSDR_REVC_FILTER_1950MHZ
FMCRADIOSDR_REVC_FILTER_BYPASS = _eapi.FMCRADIOSDR_REVC_FILTER_BYPASS
FMCRADIOSDR_REVC_FILTER_1960MHZ = _eapi.FMCRADIOSDR_REVC_FILTER_1960MHZ
FMCRADIOSDR_REVC_FILTER_1880MHZ = _eapi.FMCRADIOSDR_REVC_FILTER_1880MHZ
FMCRADIOSDR_REVC_FILTER_2495MHZ = _eapi.FMCRADIOSDR_REVC_FILTER_2495MHZ
FMCRADIOSDR_REVC_FILTER_1748MHZ = _eapi.FMCRADIOSDR_REVC_FILTER_1748MHZ
FMCRADIOSDR_REVC_FILTER_1843MHZ = _eapi.FMCRADIOSDR_REVC_FILTER_1843MHZ
FMCRADIOSDR_REVC_FILTER_882MHZ = _eapi.FMCRADIOSDR_REVC_FILTER_882MHZ
FMCRADIOSDR_REVC_FILTER_837MHZ = _eapi.FMCRADIOSDR_REVC_FILTER_837MHZ
FMCRADIOSDR_REVC_FILTER_943MHZ = _eapi.FMCRADIOSDR_REVC_FILTER_943MHZ
FMCRADIOSDR_REVC_FILTER_898MHZ = _eapi.FMCRADIOSDR_REVC_FILTER_898MHZ
FMCRADIOSDR_REVC_FILTER_915MHZ = _eapi.FMCRADIOSDR_REVC_FILTER_915MHZ
FMCRADIOSDR_REVC_FILTER_782MHZ = _eapi.FMCRADIOSDR_REVC_FILTER_782MHZ
FMCRADIOSDR_REVC_FILTER_751MHZ = _eapi.FMCRADIOSDR_REVC_FILTER_751MHZ
FMCRADIOSDR_REVB_FILTER_2140MHZ = _eapi.FMCRADIOSDR_REVB_FILTER_2140MHZ
FMCRADIOSDR_REVB_FILTER_1950MHZ = _eapi.FMCRADIOSDR_REVB_FILTER_1950MHZ
FMCRADIOSDR_REVB_FILTER_TESTPOINT = _eapi.FMCRADIOSDR_REVB_FILTER_TESTPOINT
FMCRADIOSDR_REVB_FILTER_1960MHZ = _eapi.FMCRADIOSDR_REVB_FILTER_1960MHZ
FMCRADIOSDR_REVB_FILTER_1880MHZ = _eapi.FMCRADIOSDR_REVB_FILTER_1880MHZ
FMCRADIOSDR_REVB_FILTER_NONE = _eapi.FMCRADIOSDR_REVB_FILTER_NONE
FMCRADIOSDR_REVB_FILTER_2495MHZ = _eapi.FMCRADIOSDR_REVB_FILTER_2495MHZ
FMCRADIOSDR_REVB_FILTER_3600MHZ = _eapi.FMCRADIOSDR_REVB_FILTER_3600MHZ
FMCRADIOSDR_REVB_FILTER_882MHZ = _eapi.FMCRADIOSDR_REVB_FILTER_882MHZ
FMCRADIOSDR_REVB_FILTER_837MHZ = _eapi.FMCRADIOSDR_REVB_FILTER_837MHZ
FMCRADIOSDR_REVB_FILTER_943MHZ = _eapi.FMCRADIOSDR_REVB_FILTER_943MHZ
FMCRADIOSDR_REVB_FILTER_898MHZ = _eapi.FMCRADIOSDR_REVB_FILTER_898MHZ
FMCRADIO_CTRL_REF_CLOCK = _eapi.FMCRADIO_CTRL_REF_CLOCK
FMCRADIO_CTRL_RF = _eapi.FMCRADIO_CTRL_RF
FMCRADIO_CTRL_RX_GAIN = _eapi.FMCRADIO_CTRL_RX_GAIN
FMCRADIO_CTRL_TX_GAIN = _eapi.FMCRADIO_CTRL_TX_GAIN
FMCRADIO_CTRL_PLL_CPLD = _eapi.FMCRADIO_CTRL_PLL_CPLD
FMCRADIO_HOST = _eapi.FMCRADIO_HOST
FMCRADIO_FPGA = _eapi.FMCRADIO_FPGA
FMCRADIO_CLK_SRC_INTERNAL = _eapi.FMCRADIO_CLK_SRC_INTERNAL
FMCRADIO_CLK_SRC_EXTERNAL = _eapi.FMCRADIO_CLK_SRC_EXTERNAL
CDCE62005_VCO_MAX_OUTPUT_DIVIDER = _eapi.CDCE62005_VCO_MAX_OUTPUT_DIVIDER
PLL_LOCK_DIGITAL = _eapi.PLL_LOCK_DIGITAL
PLL_LOCK_ANALOG = _eapi.PLL_LOCK_ANALOG
CDCE62005_PLL_UNLOCKED = _eapi.CDCE62005_PLL_UNLOCKED
CDCE62005_PLL_LOCKED = _eapi.CDCE62005_PLL_LOCKED
class cdce62005_param(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cdce62005_param, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cdce62005_param, name)
    __repr__ = _swig_repr
    __swig_setmethods__["out_freq"] = _eapi.cdce62005_param_out_freq_set
    __swig_getmethods__["out_freq"] = _eapi.cdce62005_param_out_freq_get
    if _newclass:out_freq = _swig_property(_eapi.cdce62005_param_out_freq_get, _eapi.cdce62005_param_out_freq_set)
    __swig_setmethods__["pfd_freq"] = _eapi.cdce62005_param_pfd_freq_set
    __swig_getmethods__["pfd_freq"] = _eapi.cdce62005_param_pfd_freq_get
    if _newclass:pfd_freq = _swig_property(_eapi.cdce62005_param_pfd_freq_get, _eapi.cdce62005_param_pfd_freq_set)
    __swig_setmethods__["pfd_freq_max"] = _eapi.cdce62005_param_pfd_freq_max_set
    __swig_getmethods__["pfd_freq_max"] = _eapi.cdce62005_param_pfd_freq_max_get
    if _newclass:pfd_freq_max = _swig_property(_eapi.cdce62005_param_pfd_freq_max_get, _eapi.cdce62005_param_pfd_freq_max_set)
    __swig_setmethods__["pfd_freq_min"] = _eapi.cdce62005_param_pfd_freq_min_set
    __swig_getmethods__["pfd_freq_min"] = _eapi.cdce62005_param_pfd_freq_min_get
    if _newclass:pfd_freq_min = _swig_property(_eapi.cdce62005_param_pfd_freq_min_get, _eapi.cdce62005_param_pfd_freq_min_set)
    __swig_setmethods__["vco_freq"] = _eapi.cdce62005_param_vco_freq_set
    __swig_getmethods__["vco_freq"] = _eapi.cdce62005_param_vco_freq_get
    if _newclass:vco_freq = _swig_property(_eapi.cdce62005_param_vco_freq_get, _eapi.cdce62005_param_vco_freq_set)
    __swig_setmethods__["ref_freq"] = _eapi.cdce62005_param_ref_freq_set
    __swig_getmethods__["ref_freq"] = _eapi.cdce62005_param_ref_freq_get
    if _newclass:ref_freq = _swig_property(_eapi.cdce62005_param_ref_freq_get, _eapi.cdce62005_param_ref_freq_set)
    __swig_setmethods__["synth_freq"] = _eapi.cdce62005_param_synth_freq_set
    __swig_getmethods__["synth_freq"] = _eapi.cdce62005_param_synth_freq_get
    if _newclass:synth_freq = _swig_property(_eapi.cdce62005_param_synth_freq_get, _eapi.cdce62005_param_synth_freq_set)
    __swig_setmethods__["feedback_divider"] = _eapi.cdce62005_param_feedback_divider_set
    __swig_getmethods__["feedback_divider"] = _eapi.cdce62005_param_feedback_divider_get
    if _newclass:feedback_divider = _swig_property(_eapi.cdce62005_param_feedback_divider_get, _eapi.cdce62005_param_feedback_divider_set)
    __swig_setmethods__["input_divider"] = _eapi.cdce62005_param_input_divider_set
    __swig_getmethods__["input_divider"] = _eapi.cdce62005_param_input_divider_get
    if _newclass:input_divider = _swig_property(_eapi.cdce62005_param_input_divider_get, _eapi.cdce62005_param_input_divider_set)
    __swig_setmethods__["out_divider"] = _eapi.cdce62005_param_out_divider_set
    __swig_getmethods__["out_divider"] = _eapi.cdce62005_param_out_divider_get
    if _newclass:out_divider = _swig_property(_eapi.cdce62005_param_out_divider_get, _eapi.cdce62005_param_out_divider_set)
    __swig_setmethods__["prescale_divider"] = _eapi.cdce62005_param_prescale_divider_set
    __swig_getmethods__["prescale_divider"] = _eapi.cdce62005_param_prescale_divider_get
    if _newclass:prescale_divider = _swig_property(_eapi.cdce62005_param_prescale_divider_get, _eapi.cdce62005_param_prescale_divider_set)
    __swig_setmethods__["secondary_clock"] = _eapi.cdce62005_param_secondary_clock_set
    __swig_getmethods__["secondary_clock"] = _eapi.cdce62005_param_secondary_clock_get
    if _newclass:secondary_clock = _swig_property(_eapi.cdce62005_param_secondary_clock_get, _eapi.cdce62005_param_secondary_clock_set)
    __swig_setmethods__["vco_bypass_all"] = _eapi.cdce62005_param_vco_bypass_all_set
    __swig_getmethods__["vco_bypass_all"] = _eapi.cdce62005_param_vco_bypass_all_get
    if _newclass:vco_bypass_all = _swig_property(_eapi.cdce62005_param_vco_bypass_all_get, _eapi.cdce62005_param_vco_bypass_all_set)
    __swig_setmethods__["vco_bypass"] = _eapi.cdce62005_param_vco_bypass_set
    __swig_getmethods__["vco_bypass"] = _eapi.cdce62005_param_vco_bypass_get
    if _newclass:vco_bypass = _swig_property(_eapi.cdce62005_param_vco_bypass_get, _eapi.cdce62005_param_vco_bypass_set)
    def __init__(self): 
        this = _eapi.new_cdce62005_param()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_cdce62005_param
    __del__ = lambda self : None;
cdce62005_param_swigregister = _eapi.cdce62005_param_swigregister
cdce62005_param_swigregister(cdce62005_param)

LMS6002_PLL_OFF_DIV1 = _eapi.LMS6002_PLL_OFF_DIV1
LMS6002_PLL_OFF_DIV2 = _eapi.LMS6002_PLL_OFF_DIV2
LMS6002_PLL_OFF_DIV3 = _eapi.LMS6002_PLL_OFF_DIV3
LMS6002_PLL_OFF_DIV4 = _eapi.LMS6002_PLL_OFF_DIV4
LMS6002_PLL_OFF_FREQSEL = _eapi.LMS6002_PLL_OFF_FREQSEL
LMS6002_PLL_OFF_VCOCAP = _eapi.LMS6002_PLL_OFF_VCOCAP
LMS6002_PLL_OFF_VTUNE = _eapi.LMS6002_PLL_OFF_VTUNE
LMS6002_PLL_OFF_COMPARATOR = _eapi.LMS6002_PLL_OFF_COMPARATOR
class lms6002_pll_param(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lms6002_pll_param, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lms6002_pll_param, name)
    __repr__ = _swig_repr
    __swig_setmethods__["out_freq"] = _eapi.lms6002_pll_param_out_freq_set
    __swig_getmethods__["out_freq"] = _eapi.lms6002_pll_param_out_freq_get
    if _newclass:out_freq = _swig_property(_eapi.lms6002_pll_param_out_freq_get, _eapi.lms6002_pll_param_out_freq_set)
    __swig_setmethods__["ref_freq"] = _eapi.lms6002_pll_param_ref_freq_set
    __swig_getmethods__["ref_freq"] = _eapi.lms6002_pll_param_ref_freq_get
    if _newclass:ref_freq = _swig_property(_eapi.lms6002_pll_param_ref_freq_get, _eapi.lms6002_pll_param_ref_freq_set)
    __swig_setmethods__["n_divider"] = _eapi.lms6002_pll_param_n_divider_set
    __swig_getmethods__["n_divider"] = _eapi.lms6002_pll_param_n_divider_get
    if _newclass:n_divider = _swig_property(_eapi.lms6002_pll_param_n_divider_get, _eapi.lms6002_pll_param_n_divider_set)
    def __init__(self): 
        this = _eapi.new_lms6002_pll_param()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_lms6002_pll_param
    __del__ = lambda self : None;
lms6002_pll_param_swigregister = _eapi.lms6002_pll_param_swigregister
lms6002_pll_param_swigregister(lms6002_pll_param)

class lms6002_pll_core(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lms6002_pll_core, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lms6002_pll_core, name)
    __repr__ = _swig_repr
    __swig_setmethods__["base_addr"] = _eapi.lms6002_pll_core_base_addr_set
    __swig_getmethods__["base_addr"] = _eapi.lms6002_pll_core_base_addr_get
    if _newclass:base_addr = _swig_property(_eapi.lms6002_pll_core_base_addr_get, _eapi.lms6002_pll_core_base_addr_set)
    def __init__(self): 
        this = _eapi.new_lms6002_pll_core()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_lms6002_pll_core
    __del__ = lambda self : None;
lms6002_pll_core_swigregister = _eapi.lms6002_pll_core_swigregister
lms6002_pll_core_swigregister(lms6002_pll_core)

class lms6002_core(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lms6002_core, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lms6002_core, name)
    __repr__ = _swig_repr
    __swig_setmethods__["spi"] = _eapi.lms6002_core_spi_set
    __swig_getmethods__["spi"] = _eapi.lms6002_core_spi_get
    if _newclass:spi = _swig_property(_eapi.lms6002_core_spi_get, _eapi.lms6002_core_spi_set)
    __swig_setmethods__["tx_core"] = _eapi.lms6002_core_tx_core_set
    __swig_getmethods__["tx_core"] = _eapi.lms6002_core_tx_core_get
    if _newclass:tx_core = _swig_property(_eapi.lms6002_core_tx_core_get, _eapi.lms6002_core_tx_core_set)
    __swig_setmethods__["rx_core"] = _eapi.lms6002_core_rx_core_set
    __swig_getmethods__["rx_core"] = _eapi.lms6002_core_rx_core_get
    if _newclass:rx_core = _swig_property(_eapi.lms6002_core_rx_core_get, _eapi.lms6002_core_rx_core_set)
    __swig_setmethods__["saved_gain"] = _eapi.lms6002_core_saved_gain_set
    __swig_getmethods__["saved_gain"] = _eapi.lms6002_core_saved_gain_get
    if _newclass:saved_gain = _swig_property(_eapi.lms6002_core_saved_gain_get, _eapi.lms6002_core_saved_gain_set)
    __swig_setmethods__["saved_pa"] = _eapi.lms6002_core_saved_pa_set
    __swig_getmethods__["saved_pa"] = _eapi.lms6002_core_saved_pa_get
    if _newclass:saved_pa = _swig_property(_eapi.lms6002_core_saved_pa_get, _eapi.lms6002_core_saved_pa_set)
    def __init__(self): 
        this = _eapi.new_lms6002_core()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_lms6002_core
    __del__ = lambda self : None;
lms6002_core_swigregister = _eapi.lms6002_core_swigregister
lms6002_core_swigregister(lms6002_core)

class lms6002_lo_leakage_calib(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lms6002_lo_leakage_calib, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lms6002_lo_leakage_calib, name)
    __repr__ = _swig_repr
    __swig_setmethods__["i_adjust"] = _eapi.lms6002_lo_leakage_calib_i_adjust_set
    __swig_getmethods__["i_adjust"] = _eapi.lms6002_lo_leakage_calib_i_adjust_get
    if _newclass:i_adjust = _swig_property(_eapi.lms6002_lo_leakage_calib_i_adjust_get, _eapi.lms6002_lo_leakage_calib_i_adjust_set)
    __swig_setmethods__["q_adjust"] = _eapi.lms6002_lo_leakage_calib_q_adjust_set
    __swig_getmethods__["q_adjust"] = _eapi.lms6002_lo_leakage_calib_q_adjust_get
    if _newclass:q_adjust = _swig_property(_eapi.lms6002_lo_leakage_calib_q_adjust_get, _eapi.lms6002_lo_leakage_calib_q_adjust_set)
    def __init__(self): 
        this = _eapi.new_lms6002_lo_leakage_calib()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_lms6002_lo_leakage_calib
    __del__ = lambda self : None;
lms6002_lo_leakage_calib_swigregister = _eapi.lms6002_lo_leakage_calib_swigregister
lms6002_lo_leakage_calib_swigregister(lms6002_lo_leakage_calib)

class lms6002_ssb_calib(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lms6002_ssb_calib, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lms6002_ssb_calib, name)
    __repr__ = _swig_repr
    __swig_setmethods__["phase_offset"] = _eapi.lms6002_ssb_calib_phase_offset_set
    __swig_getmethods__["phase_offset"] = _eapi.lms6002_ssb_calib_phase_offset_get
    if _newclass:phase_offset = _swig_property(_eapi.lms6002_ssb_calib_phase_offset_get, _eapi.lms6002_ssb_calib_phase_offset_set)
    __swig_setmethods__["gain_offset"] = _eapi.lms6002_ssb_calib_gain_offset_set
    __swig_getmethods__["gain_offset"] = _eapi.lms6002_ssb_calib_gain_offset_get
    if _newclass:gain_offset = _swig_property(_eapi.lms6002_ssb_calib_gain_offset_get, _eapi.lms6002_ssb_calib_gain_offset_set)
    __swig_setmethods__["backoff_offset"] = _eapi.lms6002_ssb_calib_backoff_offset_set
    __swig_getmethods__["backoff_offset"] = _eapi.lms6002_ssb_calib_backoff_offset_get
    if _newclass:backoff_offset = _swig_property(_eapi.lms6002_ssb_calib_backoff_offset_get, _eapi.lms6002_ssb_calib_backoff_offset_set)
    def __init__(self): 
        this = _eapi.new_lms6002_ssb_calib()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_lms6002_ssb_calib
    __del__ = lambda self : None;
lms6002_ssb_calib_swigregister = _eapi.lms6002_ssb_calib_swigregister
lms6002_ssb_calib_swigregister(lms6002_ssb_calib)

class lms6002_rx_dc_calib(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lms6002_rx_dc_calib, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lms6002_rx_dc_calib, name)
    __repr__ = _swig_repr
    __swig_setmethods__["i_comp"] = _eapi.lms6002_rx_dc_calib_i_comp_set
    __swig_getmethods__["i_comp"] = _eapi.lms6002_rx_dc_calib_i_comp_get
    if _newclass:i_comp = _swig_property(_eapi.lms6002_rx_dc_calib_i_comp_get, _eapi.lms6002_rx_dc_calib_i_comp_set)
    __swig_setmethods__["q_comp"] = _eapi.lms6002_rx_dc_calib_q_comp_set
    __swig_getmethods__["q_comp"] = _eapi.lms6002_rx_dc_calib_q_comp_get
    if _newclass:q_comp = _swig_property(_eapi.lms6002_rx_dc_calib_q_comp_get, _eapi.lms6002_rx_dc_calib_q_comp_set)
    def __init__(self): 
        this = _eapi.new_lms6002_rx_dc_calib()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_lms6002_rx_dc_calib
    __del__ = lambda self : None;
lms6002_rx_dc_calib_swigregister = _eapi.lms6002_rx_dc_calib_swigregister
lms6002_rx_dc_calib_swigregister(lms6002_rx_dc_calib)

LMS6002_PLL_TX = _eapi.LMS6002_PLL_TX
LMS6002_PLL_RX = _eapi.LMS6002_PLL_RX
LMS6002_TX = _eapi.LMS6002_TX
LMS6002_RX = _eapi.LMS6002_RX
LMS6002_TXRX = _eapi.LMS6002_TXRX
LMS6002_LOWBAND = _eapi.LMS6002_LOWBAND
LMS6002_HIGHBAND = _eapi.LMS6002_HIGHBAND
LMS6002_DISABLE = _eapi.LMS6002_DISABLE
LMS6002_ENABLE = _eapi.LMS6002_ENABLE
LMS6002_LNA_MAXGAIN = _eapi.LMS6002_LNA_MAXGAIN
LMS6002_LNA_MIDGAIN = _eapi.LMS6002_LNA_MIDGAIN
LMS6002_LNA_BYPASS = _eapi.LMS6002_LNA_BYPASS
LMS_VGA1_GAIN30DB = _eapi.LMS_VGA1_GAIN30DB
LMS_VGA1_GAIN19DB = _eapi.LMS_VGA1_GAIN19DB
LMS_VGA1_GAIN5DB = _eapi.LMS_VGA1_GAIN5DB
LMS6002_LPF_14MHZ = _eapi.LMS6002_LPF_14MHZ
LMS6002_LPF_10MHZ = _eapi.LMS6002_LPF_10MHZ
LMS6002_LPF_7MHZ = _eapi.LMS6002_LPF_7MHZ
LMS6002_LPF_6MHZ = _eapi.LMS6002_LPF_6MHZ
LMS6002_LPF_5MHZ = _eapi.LMS6002_LPF_5MHZ
LMS6002_LPF_4DOT375MHZ = _eapi.LMS6002_LPF_4DOT375MHZ
LMS6002_LPF_3DOT5MHZ = _eapi.LMS6002_LPF_3DOT5MHZ
LMS6002_LPF_3MHZ = _eapi.LMS6002_LPF_3MHZ
LMS6002_LPF_2DOT75MHZ = _eapi.LMS6002_LPF_2DOT75MHZ
LMS6002_LPF_2DOT5MHZ = _eapi.LMS6002_LPF_2DOT5MHZ
LMS6002_LPF_1DOT92MHZ = _eapi.LMS6002_LPF_1DOT92MHZ
LMS6002_LPF_1DOT5MHZ = _eapi.LMS6002_LPF_1DOT5MHZ
LMS6002_LPF_1DOT375MHZ = _eapi.LMS6002_LPF_1DOT375MHZ
LMS6002_LPF_1DOT25MHZ = _eapi.LMS6002_LPF_1DOT25MHZ
LMS6002_LPF_0DOT875MHZ = _eapi.LMS6002_LPF_0DOT875MHZ
LMS6002_LPF_0DOT75MHZ = _eapi.LMS6002_LPF_0DOT75MHZ
LMS6002_LPF_BYPASS = _eapi.LMS6002_LPF_BYPASS
LMS6002_LOOPBACK_DISABLED = _eapi.LMS6002_LOOPBACK_DISABLED
LMS6002_LOOPBACK_LNA1 = _eapi.LMS6002_LOOPBACK_LNA1
LMS6002_LOOPBACK_LNA2 = _eapi.LMS6002_LOOPBACK_LNA2
LMS6002_LOOPBACK_LNA3 = _eapi.LMS6002_LOOPBACK_LNA3
LMS6002_CHANNEL_I = _eapi.LMS6002_CHANNEL_I
LMS6002_CHANNEL_Q = _eapi.LMS6002_CHANNEL_Q
LMS6002_PADS_CONNECTED = _eapi.LMS6002_PADS_CONNECTED
LMS6002_LNA_INTERNAL_OUTPUT = _eapi.LMS6002_LNA_INTERNAL_OUTPUT

def fmc_radio_pll_calculate(*args):
  return _eapi.fmc_radio_pll_calculate(*args)
fmc_radio_pll_calculate = _eapi.fmc_radio_pll_calculate

def fmc_radio_pll_calculate_withpfd(*args):
  return _eapi.fmc_radio_pll_calculate_withpfd(*args)
fmc_radio_pll_calculate_withpfd = _eapi.fmc_radio_pll_calculate_withpfd

def fmc_radio_lime_calculate(*args):
  return _eapi.fmc_radio_lime_calculate(*args)
fmc_radio_lime_calculate = _eapi.fmc_radio_lime_calculate

def fmc_radio_presence(*args):
  return _eapi.fmc_radio_presence(*args)
fmc_radio_presence = _eapi.fmc_radio_presence

def fmc_radio_sdr_reset_send(*args):
  return _eapi.fmc_radio_sdr_reset_send(*args)
fmc_radio_sdr_reset_send = _eapi.fmc_radio_sdr_reset_send

def fmc_radio_powerup_send(*args):
  return _eapi.fmc_radio_powerup_send(*args)
fmc_radio_powerup_send = _eapi.fmc_radio_powerup_send

def fmc_radio_select_send(*args):
  return _eapi.fmc_radio_select_send(*args)
fmc_radio_select_send = _eapi.fmc_radio_select_send

def fmc_radio_setrevision_send(*args):
  return _eapi.fmc_radio_setrevision_send(*args)
fmc_radio_setrevision_send = _eapi.fmc_radio_setrevision_send

def fmc_radio_spi_write_send(*args):
  return _eapi.fmc_radio_spi_write_send(*args)
fmc_radio_spi_write_send = _eapi.fmc_radio_spi_write_send

def fmc_radio_spi_read_send(*args):
  return _eapi.fmc_radio_spi_read_send(*args)
fmc_radio_spi_read_send = _eapi.fmc_radio_spi_read_send

def fmc_radio_pll_setparam_send(*args):
  return _eapi.fmc_radio_pll_setparam_send(*args)
fmc_radio_pll_setparam_send = _eapi.fmc_radio_pll_setparam_send

def fmc_radio_pll_lockstatus_send(*args):
  return _eapi.fmc_radio_pll_lockstatus_send(*args)
fmc_radio_pll_lockstatus_send = _eapi.fmc_radio_pll_lockstatus_send

def fmc_radio_pll_waitforlock_send(*args):
  return _eapi.fmc_radio_pll_waitforlock_send(*args)
fmc_radio_pll_waitforlock_send = _eapi.fmc_radio_pll_waitforlock_send

def fmc_radio_clockmux_set_send(*args):
  return _eapi.fmc_radio_clockmux_set_send(*args)
fmc_radio_clockmux_set_send = _eapi.fmc_radio_clockmux_set_send

def fmc_radio_lime_setpllparam_send(*args):
  return _eapi.fmc_radio_lime_setpllparam_send(*args)
fmc_radio_lime_setpllparam_send = _eapi.fmc_radio_lime_setpllparam_send

def fmc_radio_lime_calibratePLL_send(*args):
  return _eapi.fmc_radio_lime_calibratePLL_send(*args)
fmc_radio_lime_calibratePLL_send = _eapi.fmc_radio_lime_calibratePLL_send

def fmc_radio_lime_reset_send(*args):
  return _eapi.fmc_radio_lime_reset_send(*args)
fmc_radio_lime_reset_send = _eapi.fmc_radio_lime_reset_send

def fmc_radio_sdr_band_send(*args):
  return _eapi.fmc_radio_sdr_band_send(*args)
fmc_radio_sdr_band_send = _eapi.fmc_radio_sdr_band_send

def fmc_radio_sdr_rx_gain_send(*args):
  return _eapi.fmc_radio_sdr_rx_gain_send(*args)
fmc_radio_sdr_rx_gain_send = _eapi.fmc_radio_sdr_rx_gain_send

def fmc_radio_rxvga_calibrate_send(*args):
  return _eapi.fmc_radio_rxvga_calibrate_send(*args)
fmc_radio_rxvga_calibrate_send = _eapi.fmc_radio_rxvga_calibrate_send

def fmc_radio_tx_gain_send(*args):
  return _eapi.fmc_radio_tx_gain_send(*args)
fmc_radio_tx_gain_send = _eapi.fmc_radio_tx_gain_send

def fmc_radio_sdr_setrxfilter_send(*args):
  return _eapi.fmc_radio_sdr_setrxfilter_send(*args)
fmc_radio_sdr_setrxfilter_send = _eapi.fmc_radio_sdr_setrxfilter_send

def fmc_radio_lpf_set_send(*args):
  return _eapi.fmc_radio_lpf_set_send(*args)
fmc_radio_lpf_set_send = _eapi.fmc_radio_lpf_set_send

def fmc_radio_lpf_calibrate_send(*args):
  return _eapi.fmc_radio_lpf_calibrate_send(*args)
fmc_radio_lpf_calibrate_send = _eapi.fmc_radio_lpf_calibrate_send

def fmc_radio_path_enable_send(*args):
  return _eapi.fmc_radio_path_enable_send(*args)
fmc_radio_path_enable_send = _eapi.fmc_radio_path_enable_send

def fmc_radio_path_disable_send(*args):
  return _eapi.fmc_radio_path_disable_send(*args)
fmc_radio_path_disable_send = _eapi.fmc_radio_path_disable_send

def fmc_radio_rx_connect_send(*args):
  return _eapi.fmc_radio_rx_connect_send(*args)
fmc_radio_rx_connect_send = _eapi.fmc_radio_rx_connect_send

def fmc_radio_rx_disconnect_send(*args):
  return _eapi.fmc_radio_rx_disconnect_send(*args)
fmc_radio_rx_disconnect_send = _eapi.fmc_radio_rx_disconnect_send

def fmc_radio_loopback_send(*args):
  return _eapi.fmc_radio_loopback_send(*args)
fmc_radio_loopback_send = _eapi.fmc_radio_loopback_send

def fmc_radio_lo_leakage_calibration_send(*args):
  return _eapi.fmc_radio_lo_leakage_calibration_send(*args)
fmc_radio_lo_leakage_calibration_send = _eapi.fmc_radio_lo_leakage_calibration_send

def fmc_radio_lo_leakage_calibration_set_send(*args):
  return _eapi.fmc_radio_lo_leakage_calibration_set_send(*args)
fmc_radio_lo_leakage_calibration_set_send = _eapi.fmc_radio_lo_leakage_calibration_set_send

def fmc_radio_ssb_calibration_send(*args):
  return _eapi.fmc_radio_ssb_calibration_send(*args)
fmc_radio_ssb_calibration_send = _eapi.fmc_radio_ssb_calibration_send

def fmc_radio_ssb_calibration_set_send(*args):
  return _eapi.fmc_radio_ssb_calibration_set_send(*args)
fmc_radio_ssb_calibration_set_send = _eapi.fmc_radio_ssb_calibration_set_send

def fmc_radio_rx_dc_offset_calibration_send(*args):
  return _eapi.fmc_radio_rx_dc_offset_calibration_send(*args)
fmc_radio_rx_dc_offset_calibration_send = _eapi.fmc_radio_rx_dc_offset_calibration_send

def fmc_radio_rx_dc_offset_calibration_set_send(*args):
  return _eapi.fmc_radio_rx_dc_offset_calibration_set_send(*args)
fmc_radio_rx_dc_offset_calibration_set_send = _eapi.fmc_radio_rx_dc_offset_calibration_set_send

def fmc_radio_spi_control_set_send(*args):
  return _eapi.fmc_radio_spi_control_set_send(*args)
fmc_radio_spi_control_set_send = _eapi.fmc_radio_spi_control_set_send

def fmc_radio_set_sampling_frequency(*args):
  return _eapi.fmc_radio_set_sampling_frequency(*args)
fmc_radio_set_sampling_frequency = _eapi.fmc_radio_set_sampling_frequency

def fmc_radio_set_local_oscillator(*args):
  return _eapi.fmc_radio_set_local_oscillator(*args)
fmc_radio_set_local_oscillator = _eapi.fmc_radio_set_local_oscillator
eBasSeveritySuccess = _eapi.eBasSeveritySuccess
eBasSeverityInformational = _eapi.eBasSeverityInformational
eBasSeverityWarning = _eapi.eBasSeverityWarning
eBasSeverityError = _eapi.eBasSeverityError
MODULE_NULL = _eapi.MODULE_NULL
MODULE_I2C = _eapi.MODULE_I2C
MODULE_I2C_EEPROM = _eapi.MODULE_I2C_EEPROM
MODULE_AD9510 = _eapi.MODULE_AD9510
MODULE_AD9511 = _eapi.MODULE_AD9511
MODULE_AD9517 = _eapi.MODULE_AD9517
MODULE_FMCEEPROM = _eapi.MODULE_FMCEEPROM
MODULE_FMCEEPROM_EEPROM = _eapi.MODULE_FMCEEPROM_EEPROM
MODULE_CARRIER = _eapi.MODULE_CARRIER
MODULE_FMCVITA = _eapi.MODULE_FMCVITA
MODULE_SMQUADAPI = _eapi.MODULE_SMQUADAPI
MODULE_RFFE = _eapi.MODULE_RFFE
MODULE_U2C = _eapi.MODULE_U2C
MODULE_ADACSYNC = _eapi.MODULE_ADACSYNC
MODULE_INITLOADER = _eapi.MODULE_INITLOADER
MODULE_TIME = _eapi.MODULE_TIME
MODULE_LINKEDLIST = _eapi.MODULE_LINKEDLIST
MODULE_DMA = _eapi.MODULE_DMA
MODULE_IRQ = _eapi.MODULE_IRQ
MODULE_SYS = _eapi.MODULE_SYS
MODULE_XEVT = _eapi.MODULE_XEVT
MODULE_FBUS = _eapi.MODULE_FBUS
MODULE_RAVE = _eapi.MODULE_RAVE
MODULE_CAMLNK = _eapi.MODULE_CAMLNK
MODULE_DRC = _eapi.MODULE_DRC
MODULE_TTRFT = _eapi.MODULE_TTRFT
MODULE_TWRFT = _eapi.MODULE_TWRFT
MODULE_QUEUE = _eapi.MODULE_QUEUE
MODULE_PINGPONG = _eapi.MODULE_PINGPONG
MODULE_RECPLAYTEST = _eapi.MODULE_RECPLAYTEST
MODULE_CONFIGFILE = _eapi.MODULE_CONFIGFILE
MODULE_ADP_PCIE_DRV = _eapi.MODULE_ADP_PCIE_DRV
MODULE_ADP_PCIE = _eapi.MODULE_ADP_PCIE
MODULE_ADP_CCE = _eapi.MODULE_ADP_CCE
MODULE_ADP_EAPI = _eapi.MODULE_ADP_EAPI
MODULE_OSCONFIG = _eapi.MODULE_OSCONFIG
MODULE_ADAC250 = _eapi.MODULE_ADAC250
MODULE_FMC = _eapi.MODULE_FMC
MODULE_CLOCK = _eapi.MODULE_CLOCK
MODULE_FMCSPI = _eapi.MODULE_FMCSPI
MODULE_FMCRADIO = _eapi.MODULE_FMCRADIO
MODULE_LMS6002 = _eapi.MODULE_LMS6002
MODULE_CDCE62005 = _eapi.MODULE_CDCE62005
MODULE_MI250 = _eapi.MODULE_MI250
MODULE_ADC5000 = _eapi.MODULE_ADC5000
MODULE_COMWRAPPER = _eapi.MODULE_COMWRAPPER
MODULE_RTDEX = _eapi.MODULE_RTDEX
MODULE_RECPLAY = _eapi.MODULE_RECPLAY
MODULE_MI125 = _eapi.MODULE_MI125
MODULE_TIMER = _eapi.MODULE_TIMER
MODULE_FMCLVDS = _eapi.MODULE_FMCLVDS
MODULE_EV10AQ190 = _eapi.MODULE_EV10AQ190
MODULE_LTM9012 = _eapi.MODULE_LTM9012
MODULE_AURORA = _eapi.MODULE_AURORA
MODULE_MI125COMWRAPPER = _eapi.MODULE_MI125COMWRAPPER
MODULE_PPSSYNC = _eapi.MODULE_PPSSYNC
MODULE_LVDS = _eapi.MODULE_LVDS
MODULE_MO1000DEVCOM = _eapi.MODULE_MO1000DEVCOM
MODULE_MO1000EXPANDER = _eapi.MODULE_MO1000EXPANDER
MODULE_AD9148 = _eapi.MODULE_AD9148
MODULE_CDCE62005P = _eapi.MODULE_CDCE62005P
MODULE_MO1000 = _eapi.MODULE_MO1000
MODULE_TIMESTAMP = _eapi.MODULE_TIMESTAMP
MODULE_FMCOMMS3 = _eapi.MODULE_FMCOMMS3
MODULE_RADIO640 = _eapi.MODULE_RADIO640
MODULE_RADIO640DEVCOM = _eapi.MODULE_RADIO640DEVCOM
MODULE_RADIO640SPI = _eapi.MODULE_RADIO640SPI
MODULE_ADT7411 = _eapi.MODULE_ADT7411
MODULE_TM75 = _eapi.MODULE_TM75
MODULE_LM75 = _eapi.MODULE_LM75
MODULE_LM75P = _eapi.MODULE_LM75P
MODULE_INA226 = _eapi.MODULE_INA226
MODULE_AD9361 = _eapi.MODULE_AD9361
MODULE_PCF8574 = _eapi.MODULE_PCF8574
MODULE_PCA9535 = _eapi.MODULE_PCA9535
MODULE_GNURADIO = _eapi.MODULE_GNURADIO
MODULE_RTDEXSYNC = _eapi.MODULE_RTDEXSYNC
MODULE_RTDEXTS = _eapi.MODULE_RTDEXTS
MODULE_NUM = _eapi.MODULE_NUM
OK = _eapi.OK
ERR_GENERIC = _eapi.ERR_GENERIC
ERR_CRITICAL = _eapi.ERR_CRITICAL
ERR_OUTOFMEMORY = _eapi.ERR_OUTOFMEMORY
ERR_PENDING = _eapi.ERR_PENDING
ERR_ABORT = _eapi.ERR_ABORT
ERR_ACCESSDENIED = _eapi.ERR_ACCESSDENIED
ERR_NOTIMPLEMENTED = _eapi.ERR_NOTIMPLEMENTED
ERR_INVARG = _eapi.ERR_INVARG
ERR_INVPTR = _eapi.ERR_INVPTR
ERR_INVHANDLE = _eapi.ERR_INVHANDLE
ERR_TIMEOUT = _eapi.ERR_TIMEOUT
ERR_ALRDYALLOC = _eapi.ERR_ALRDYALLOC
ERR_NOTINIT = _eapi.ERR_NOTINIT
ERR_ALRDYDONE = _eapi.ERR_ALRDYDONE
ERR_NOHWMODULE = _eapi.ERR_NOHWMODULE

def ErrorToString(*args):
  return _eapi.ErrorToString(*args)
ErrorToString = _eapi.ErrorToString
CCEIPPORT = _eapi.CCEIPPORT
CCEDETECTPORT = _eapi.CCEDETECTPORT
CCE_DETECT_ADDR = _eapi.CCE_DETECT_ADDR
CCE_ECHO_REQUEST = _eapi.CCE_ECHO_REQUEST
CCE_ECHO_RESPONSE = _eapi.CCE_ECHO_RESPONSE
ECHO = _eapi.ECHO
ECHO_ECHO = _eapi.ECHO_ECHO
CCECTRL = _eapi.CCECTRL
CCECTRL_EXIT = _eapi.CCECTRL_EXIT
CCECTRL_VERSION = _eapi.CCECTRL_VERSION
CCECTRL_MODE2_INIT = _eapi.CCECTRL_MODE2_INIT
CCECTRL_NORMAL_MODE = _eapi.CCECTRL_NORMAL_MODE
CCECTRL_TURBO_MODE = _eapi.CCECTRL_TURBO_MODE
CCECTRL_GET_MAC = _eapi.CCECTRL_GET_MAC
FPGAFLASH = _eapi.FPGAFLASH
FPGAFLASH_INIT = _eapi.FPGAFLASH_INIT
FPGAFLASH_RECV = _eapi.FPGAFLASH_RECV
FPGAFLASH_RECVWID = _eapi.FPGAFLASH_RECVWID
FPGAFLASH_GET_INDEX = _eapi.FPGAFLASH_GET_INDEX
FPGAFLASH_SET_INDEX = _eapi.FPGAFLASH_SET_INDEX
FPGAFLASH_GET_INFO = _eapi.FPGAFLASH_GET_INFO
FPGAFLASH_UPDATE_RECV = _eapi.FPGAFLASH_UPDATE_RECV
FPGAFLASH_DTB_RECV = _eapi.FPGAFLASH_DTB_RECV
MEMORY = _eapi.MEMORY
MEMORY_INIT = _eapi.MEMORY_INIT
MEMORY_READ = _eapi.MEMORY_READ
MEMORY_WRITE = _eapi.MEMORY_WRITE
MEMORY_READ_WITH_ID = _eapi.MEMORY_READ_WITH_ID
MEMORY_WRITE_WITH_ID = _eapi.MEMORY_WRITE_WITH_ID
MEMORY_READ_CUSTOM_REG_ID = _eapi.MEMORY_READ_CUSTOM_REG_ID
MEMORY_WRITE_CUSTOM_REG_ID = _eapi.MEMORY_WRITE_CUSTOM_REG_ID
MEMORY_SCAN_I2C_DEVICES = _eapi.MEMORY_SCAN_I2C_DEVICES
MEMORY_WRITE_WITH_MASK = _eapi.MEMORY_WRITE_WITH_MASK
ADAC250 = _eapi.ADAC250
ADAC250_PRESENCE = _eapi.ADAC250_PRESENCE
ADAC250_POWERUP = _eapi.ADAC250_POWERUP
ADAC250_READSPI = _eapi.ADAC250_READSPI
ADAC250_WRITESPI = _eapi.ADAC250_WRITESPI
ADAC250_INITPLL = _eapi.ADAC250_INITPLL
ADAC250_CALCULATEPLLPARAMS = _eapi.ADAC250_CALCULATEPLLPARAMS
ADAC250_SETPLLCONFIG = _eapi.ADAC250_SETPLLCONFIG
ADAC250_TRIGPLLREGISTERTRANSFERT = _eapi.ADAC250_TRIGPLLREGISTERTRANSFERT
ADAC250_PLLSYNCOUTPUT = _eapi.ADAC250_PLLSYNCOUTPUT
ADAC250_GETPLLSTATUS = _eapi.ADAC250_GETPLLSTATUS
ADAC250_SETPLLSLEEP = _eapi.ADAC250_SETPLLSLEEP
ADAC250_SETREFCLKTUNING = _eapi.ADAC250_SETREFCLKTUNING
ADAC250_DACINIT = _eapi.ADAC250_DACINIT
ADAC250_DACSETGAIN = _eapi.ADAC250_DACSETGAIN
ADAC250_DACSETOFFSET = _eapi.ADAC250_DACSETOFFSET
ADAC250_SETDACDDSFREQ = _eapi.ADAC250_SETDACDDSFREQ
ADAC250_SETDACDDSDOWNSAMPLER = _eapi.ADAC250_SETDACDDSDOWNSAMPLER
ADAC250_SETDACDATASOURCE = _eapi.ADAC250_SETDACDATASOURCE
ADAC250_DACSYNC = _eapi.ADAC250_DACSYNC
ADAC250_DACCALIBRATE = _eapi.ADAC250_DACCALIBRATE
ADAC250_DACSYNCSOURCE = _eapi.ADAC250_DACSYNCSOURCE
ADAC250_INITADC = _eapi.ADAC250_INITADC
ADAC250_SETADCGAIN = _eapi.ADAC250_SETADCGAIN
ADAC250_SETADCFINEGAIN = _eapi.ADAC250_SETADCFINEGAIN
ADAC250_SETADCPEDESTAL = _eapi.ADAC250_SETADCPEDESTAL
ADAC250_GETADCSTATUS = _eapi.ADAC250_GETADCSTATUS
ADAC250_ADCCALIBRATE = _eapi.ADAC250_ADCCALIBRATE
ADAC250_SETADCDATAFORMAT = _eapi.ADAC250_SETADCDATAFORMAT
ADAC250_SETADCSLEEPMODE = _eapi.ADAC250_SETADCSLEEPMODE
ADAC250_SETADCOFFSETCORRECTIONTIME = _eapi.ADAC250_SETADCOFFSETCORRECTIONTIME
ADAC250_SETADCTRIGGERDELAY = _eapi.ADAC250_SETADCTRIGGERDELAY
ADAC250_SETMUX = _eapi.ADAC250_SETMUX
TTRFT = _eapi.TTRFT
TTRFT_INIT = _eapi.TTRFT_INIT
TTRFT_RESET = _eapi.TTRFT_RESET
TTRFT_SETPLLPARAM = _eapi.TTRFT_SETPLLPARAM
TTRFT_FINDPARAM = _eapi.TTRFT_FINDPARAM
TTRFT_SETMAINPOWER = _eapi.TTRFT_SETMAINPOWER
TTRFT_SETTXRXPOWER = _eapi.TTRFT_SETTXRXPOWER
TTRFT_SETTXPRESCALER = _eapi.TTRFT_SETTXPRESCALER
TTRFT_GETPLLLOCK = _eapi.TTRFT_GETPLLLOCK
TTRFT_SETRXFILTER = _eapi.TTRFT_SETRXFILTER
TTRFT_SETREFCLK = _eapi.TTRFT_SETREFCLK
TTRFT_SETLED = _eapi.TTRFT_SETLED
TTRFT_SETRXFREQ = _eapi.TTRFT_SETRXFREQ
TTRFT_SETTXFREQ = _eapi.TTRFT_SETTXFREQ
TTRFT_SETTXPOWER = _eapi.TTRFT_SETTXPOWER
TTRFT_SETRXPOWER = _eapi.TTRFT_SETRXPOWER
TWRFT = _eapi.TWRFT
TWRFT_INIT = _eapi.TWRFT_INIT
TWRFT_RESET = _eapi.TWRFT_RESET
TWRFT_TXRXMODE = _eapi.TWRFT_TXRXMODE
TWRFT_RXAGCMODE = _eapi.TWRFT_RXAGCMODE
TWRFT_RXLNA = _eapi.TWRFT_RXLNA
TWRFT_TXGAIN = _eapi.TWRFT_TXGAIN
TWRFT_BOARDTEMP = _eapi.TWRFT_BOARDTEMP
TWRFT_TXPOWER = _eapi.TWRFT_TXPOWER
TWRFT_SETPLLPARAM = _eapi.TWRFT_SETPLLPARAM
TWRFT_FINDPLLPARAM = _eapi.TWRFT_FINDPLLPARAM
TWRFT_RXAGCGAINDB = _eapi.TWRFT_RXAGCGAINDB
TWRFT_RXAGCGAIN = _eapi.TWRFT_RXAGCGAIN
TWRFT_GETPLLLOCK = _eapi.TWRFT_GETPLLLOCK
TWRFT_SETREFCLK = _eapi.TWRFT_SETREFCLK
TWRFT_SETLED = _eapi.TWRFT_SETLED
FMCRADIO = _eapi.FMCRADIO
FMCRADIO_INIT = _eapi.FMCRADIO_INIT
FMCRADIO_RESET = _eapi.FMCRADIO_RESET
FMCRADIO_SPIWRITE = _eapi.FMCRADIO_SPIWRITE
FMCRADIO_SPIREAD = _eapi.FMCRADIO_SPIREAD
FMCRADIO_SETBAND = _eapi.FMCRADIO_SETBAND
FMCRADIO_SETRXGAIN = _eapi.FMCRADIO_SETRXGAIN
FMCRADIO_SETTXGAIN = _eapi.FMCRADIO_SETTXGAIN
FMCRADIO_SETTXAUTOGAIN = _eapi.FMCRADIO_SETTXAUTOGAIN
FMCRADIO_POWERUP = _eapi.FMCRADIO_POWERUP
FMCRADIO_SELECT = _eapi.FMCRADIO_SELECT
FMCRADIO_SETREVISION = _eapi.FMCRADIO_SETREVISION
FMCRADIO_PLLCALCULATE = _eapi.FMCRADIO_PLLCALCULATE
FMCRADIO_PLLCALCULATEPFD = _eapi.FMCRADIO_PLLCALCULATEPFD
FMCRADIO_PLLSETPARAM = _eapi.FMCRADIO_PLLSETPARAM
FMCRADIO_PLLLOCKSTATUS = _eapi.FMCRADIO_PLLLOCKSTATUS
FMCRADIO_PLLWAITLOCK = _eapi.FMCRADIO_PLLWAITLOCK
FMCRADIO_CLOCKMUXSET = _eapi.FMCRADIO_CLOCKMUXSET
FMCRADIO_LIMECALCULATE = _eapi.FMCRADIO_LIMECALCULATE
FMCRADIO_LIMESETPLLPARAM = _eapi.FMCRADIO_LIMESETPLLPARAM
FMCRADIO_LIMERESET = _eapi.FMCRADIO_LIMERESET
FMCRADIO_LIMEPLLCALIBRATE = _eapi.FMCRADIO_LIMEPLLCALIBRATE
FMCRADIO_RXFILTER = _eapi.FMCRADIO_RXFILTER
FMCRADIO_LPFSET = _eapi.FMCRADIO_LPFSET
FMCRADIO_LPFCALIBRATE = _eapi.FMCRADIO_LPFCALIBRATE
FMCRADIO_RXVGACALIBRATE = _eapi.FMCRADIO_RXVGACALIBRATE
FMCRADIO_ENABLEPATH = _eapi.FMCRADIO_ENABLEPATH
FMCRADIO_DISABLEPATH = _eapi.FMCRADIO_DISABLEPATH
FMCRADIO_LOOPBACK = _eapi.FMCRADIO_LOOPBACK
FMCRADIO_LO_CALIBRATE = _eapi.FMCRADIO_LO_CALIBRATE
FMCRADIO_LO_CALIBRATE_SET = _eapi.FMCRADIO_LO_CALIBRATE_SET
FMCRADIO_SSB_CALIBRATE = _eapi.FMCRADIO_SSB_CALIBRATE
FMCRADIO_SSB_CALIBRATE_SET = _eapi.FMCRADIO_SSB_CALIBRATE_SET
FMCRADIO_RXFE_DC_CALIBRATE = _eapi.FMCRADIO_RXFE_DC_CALIBRATE
FMCRADIO_RXFE_DC_CALIBRATE_SET = _eapi.FMCRADIO_RXFE_DC_CALIBRATE_SET
FMCRADIO_SPI_CONTROL_SET = _eapi.FMCRADIO_SPI_CONTROL_SET
FMCRADIO_RX_CONNECT_SET = _eapi.FMCRADIO_RX_CONNECT_SET
FMCRADIO_RX_DISCONNECT_SET = _eapi.FMCRADIO_RX_DISCONNECT_SET
FPGACONTROL = _eapi.FPGACONTROL
FPGACONTROL_CONFIGURE_FROM_FLASH = _eapi.FPGACONTROL_CONFIGURE_FROM_FLASH
FPGACONTROL_CONFIGURE_FROM_FILE = _eapi.FPGACONTROL_CONFIGURE_FROM_FILE
FPGACONTROL_VERIFY = _eapi.FPGACONTROL_VERIFY
FPGACONTROL_RESET = _eapi.FPGACONTROL_RESET
PLLCONFIG = _eapi.PLLCONFIG
PLLCONFIG_FLASH_FROM_FILE = _eapi.PLLCONFIG_FLASH_FROM_FILE
PLLCONFIG_CONFIG_FROM_FLASH = _eapi.PLLCONFIG_CONFIG_FROM_FLASH
PLLCONFIG_CONFIG_FROM_FILE = _eapi.PLLCONFIG_CONFIG_FROM_FILE
PLLCONFIG_CONFIG_GET = _eapi.PLLCONFIG_CONFIG_GET
CARRIER = _eapi.CARRIER
CARRIER_PRESENCE = _eapi.CARRIER_PRESENCE
CARRIER_GETTYPE = _eapi.CARRIER_GETTYPE
CARRIER_GETMODULEBASEADDR = _eapi.CARRIER_GETMODULEBASEADDR
CARRIER_LEDSETVALUE = _eapi.CARRIER_LEDSETVALUE
CARRIER_LEDGETVALUE = _eapi.CARRIER_LEDGETVALUE
CARRIER_TCLKSETSTATE = _eapi.CARRIER_TCLKSETSTATE
CARRIER_TCLKGETSTATE = _eapi.CARRIER_TCLKGETSTATE
CARRIER_TCLKSETTXSOURCE = _eapi.CARRIER_TCLKSETTXSOURCE
CARRIER_TCLKGETTXSOURCE = _eapi.CARRIER_TCLKGETTXSOURCE
CARRIER_FMCBIDIRCLKSETCONNECTION = _eapi.CARRIER_FMCBIDIRCLKSETCONNECTION
CARRIER_FMCBIDIRCLKGETCONNECTION = _eapi.CARRIER_FMCBIDIRCLKGETCONNECTION
CARRIER_SETOSCSTATE = _eapi.CARRIER_SETOSCSTATE
CARRIER_GETOSCSTATE = _eapi.CARRIER_GETOSCSTATE
CARRIER_FCLKASETCONNECTION = _eapi.CARRIER_FCLKASETCONNECTION
CARRIER_FCLKAGETCONNECTION = _eapi.CARRIER_FCLKAGETCONNECTION
CARRIER_I2CREAD = _eapi.CARRIER_I2CREAD
CARRIER_I2CWRITE = _eapi.CARRIER_I2CWRITE
CARRIER_I2CREADNOWRDATA = _eapi.CARRIER_I2CREADNOWRDATA
CARRIER_REBOOT = _eapi.CARRIER_REBOOT
ADC5000 = _eapi.ADC5000
ADC5000_PRESENCE = _eapi.ADC5000_PRESENCE
ADC5000_POWERUP = _eapi.ADC5000_POWERUP
ADC5000_RESET = _eapi.ADC5000_RESET
ADC5000_SET_MODE = _eapi.ADC5000_SET_MODE
ADC5000_SET_PLL_PARAM = _eapi.ADC5000_SET_PLL_PARAM
ADC5000_SET_SYNC = _eapi.ADC5000_SET_SYNC
ADC5000_PLL_LOCK = _eapi.ADC5000_PLL_LOCK
ADC5000_SET_TEST_MODE = _eapi.ADC5000_SET_TEST_MODE
ADC5000_CALIBRATE_IODELAY = _eapi.ADC5000_CALIBRATE_IODELAY
ADC5000_GET_ADC_STATUS = _eapi.ADC5000_GET_ADC_STATUS
ADC5000_SET_STANDBY = _eapi.ADC5000_SET_STANDBY
ADC5000_SET_CODING = _eapi.ADC5000_SET_CODING
ADC5000_SET_BANDWIDTH = _eapi.ADC5000_SET_BANDWIDTH
ADC5000_SET_ADJ_TRIGGER_DELAY = _eapi.ADC5000_SET_ADJ_TRIGGER_DELAY
ADC5000_SET_OFFSET = _eapi.ADC5000_SET_OFFSET
ADC5000_SET_GAIN = _eapi.ADC5000_SET_GAIN
ADC5000_SET_PHASE = _eapi.ADC5000_SET_PHASE
MI125 = _eapi.MI125
MI125_INIT = _eapi.MI125_INIT
MI125_POWERUP = _eapi.MI125_POWERUP
MI125_MI125_RESET = _eapi.MI125_MI125_RESET
MI125_MI125_DIGITAL_ADCCALIBRATION = _eapi.MI125_MI125_DIGITAL_ADCCALIBRATION
MI125_MI125_SET_CONFIG = _eapi.MI125_MI125_SET_CONFIG
MI125_MI125_SET_CLKSRC = _eapi.MI125_MI125_SET_CLKSRC
MI125_MI125_CHECKCORE = _eapi.MI125_MI125_CHECKCORE
MI125_MI125_SET_TESTMODE = _eapi.MI125_MI125_SET_TESTMODE
MI125_MI125_GET_TEMPERATURE = _eapi.MI125_MI125_GET_TEMPERATURE
MI125_MI125_GET_CHANNELCALIBSTATUS = _eapi.MI125_MI125_GET_CHANNELCALIBSTATUS
MI125_MI125_GET_VERSIONS = _eapi.MI125_MI125_GET_VERSIONS
MI125_MI125_CHECKADC = _eapi.MI125_MI125_CHECKADC
MI125_MI125_SET_TRIGOUT = _eapi.MI125_MI125_SET_TRIGOUT
MI125_MI125_GET_CLKMASTER = _eapi.MI125_MI125_GET_CLKMASTER
MI125_MI125_CLOCKRESET = _eapi.MI125_MI125_CLOCKRESET
MI125_MI125_SCAN_I2C = _eapi.MI125_MI125_SCAN_I2C
MI125_MI125_TEST_LOCALOSCSW = _eapi.MI125_MI125_TEST_LOCALOSCSW
FMCLVDS = _eapi.FMCLVDS
FMCLVDS_INIT = _eapi.FMCLVDS_INIT
FMCLVDS_POWERUP = _eapi.FMCLVDS_POWERUP
FMCLVDS_PRESENCE = _eapi.FMCLVDS_PRESENCE
FMCLVDS_SELECT = _eapi.FMCLVDS_SELECT
FMCLVDS_SETDIR = _eapi.FMCLVDS_SETDIR
FMCLVDS_SET_CHANNEL_PWDN = _eapi.FMCLVDS_SET_CHANNEL_PWDN
FMCLVDS_SET_CHANNEL_PREEMP = _eapi.FMCLVDS_SET_CHANNEL_PREEMP
MI250 = _eapi.MI250
MI250_INIT = _eapi.MI250_INIT
MI250_POWERUP = _eapi.MI250_POWERUP
MI250_PRESENCE = _eapi.MI250_PRESENCE
MI250_READSPI = _eapi.MI250_READSPI
MI250_WRITESPI = _eapi.MI250_WRITESPI
MI250_PLLCONFIG = _eapi.MI250_PLLCONFIG
MI250_GETPLLSTATUS = _eapi.MI250_GETPLLSTATUS
MI250_SETADCGAIN = _eapi.MI250_SETADCGAIN
MI250_SETADCFINEGAIN = _eapi.MI250_SETADCFINEGAIN
MI250_SETADCPEDESTAL = _eapi.MI250_SETADCPEDESTAL
MI250_ADCRESET = _eapi.MI250_ADCRESET
MI250_ARMADC = _eapi.MI250_ARMADC
MI250_SETDATAFORMAT = _eapi.MI250_SETDATAFORMAT
MI250_SETSLEEPMODE = _eapi.MI250_SETSLEEPMODE
MI250_SETOCT = _eapi.MI250_SETOCT
MI250_SELECT = _eapi.MI250_SELECT
AURORA = _eapi.AURORA
AURORA_GETVERSION = _eapi.AURORA_GETVERSION
AURORA_RESETCORE = _eapi.AURORA_RESETCORE
AURORA_GETCHANNELSTATUS = _eapi.AURORA_GETCHANNELSTATUS
AURORA_RESETRXFIFO = _eapi.AURORA_RESETRXFIFO
AURORA_RESETTXFIFO = _eapi.AURORA_RESETTXFIFO
AURORA_GETRXDATACOUNT = _eapi.AURORA_GETRXDATACOUNT
AURORA_GETTXDATACOUNT = _eapi.AURORA_GETTXDATACOUNT
AURORA_GETRXDATARATE = _eapi.AURORA_GETRXDATARATE
AURORA_GETTXDATARATE = _eapi.AURORA_GETTXDATARATE
AURORA_SETGTXTXPARAM = _eapi.AURORA_SETGTXTXPARAM
AURORA_GETGTXTXPARAM = _eapi.AURORA_GETGTXTXPARAM
AURORA_SETGTXRXPARAM = _eapi.AURORA_SETGTXRXPARAM
AURORA_GETGTXRXPARAM = _eapi.AURORA_GETGTXRXPARAM
AURORA_GETDFEEYEDACMON = _eapi.AURORA_GETDFEEYEDACMON
AURORA_SETCHANNELENABLESTATE = _eapi.AURORA_SETCHANNELENABLESTATE
AURORA_GETCHANNELENABLESTATE = _eapi.AURORA_GETCHANNELENABLESTATE
PPSSYNC = _eapi.PPSSYNC
PPSSYNC_PRESENCE = _eapi.PPSSYNC_PRESENCE
PPSSYNC_CONFIGURE = _eapi.PPSSYNC_CONFIGURE
PPSSYNC_START = _eapi.PPSSYNC_START
PPSSYNC_STOP = _eapi.PPSSYNC_STOP
PPSSYNC_GETINFO = _eapi.PPSSYNC_GETINFO
PPSSYNC_SAVEDAC = _eapi.PPSSYNC_SAVEDAC
PPSSYNC_READDAC = _eapi.PPSSYNC_READDAC
PPSSYNC_SAVEPROFILE = _eapi.PPSSYNC_SAVEPROFILE
PPSSYNC_READPROFILE = _eapi.PPSSYNC_READPROFILE
PPSSYNC_DACINIT = _eapi.PPSSYNC_DACINIT
LVDS_COMMAND = _eapi.LVDS_COMMAND
LVDS_PRESENCE = _eapi.LVDS_PRESENCE
LVDS_GETMODE = _eapi.LVDS_GETMODE
LVDS_SETOUTPUTENABLE = _eapi.LVDS_SETOUTPUTENABLE
LVDS_SETVALUE = _eapi.LVDS_SETVALUE
LVDS_GETVALUE = _eapi.LVDS_GETVALUE
LVDS_RESET = _eapi.LVDS_RESET
LVDS_RESET_FIFO = _eapi.LVDS_RESET_FIFO
SYSMON_COMMAND = _eapi.SYSMON_COMMAND
SYSMON_READ = _eapi.SYSMON_READ
MO1000 = _eapi.MO1000
MO1000_PRESENCE = _eapi.MO1000_PRESENCE
MO1000_POWERUP = _eapi.MO1000_POWERUP
MO1000_RESET = _eapi.MO1000_RESET
MO1000_INIT = _eapi.MO1000_INIT
MO1000_WRITEREG = _eapi.MO1000_WRITEREG
MO1000_READREG = _eapi.MO1000_READREG
MO1000_GETSTATUS = _eapi.MO1000_GETSTATUS
MO1000_GETTEMPERATURE = _eapi.MO1000_GETTEMPERATURE
MO1000_SETCLOCKCONFIG = _eapi.MO1000_SETCLOCKCONFIG
MO1000_DODACCALIBRATION = _eapi.MO1000_DODACCALIBRATION
MO1000_GETCHANNELCALIBSTATUS = _eapi.MO1000_GETCHANNELCALIBSTATUS
MO1000_SETDACOUTCTRL = _eapi.MO1000_SETDACOUTCTRL
MO1000_SETDACPARINTERPOLATION = _eapi.MO1000_SETDACPARINTERPOLATION
MO1000_SETDACPARDCOFFSET = _eapi.MO1000_SETDACPARDCOFFSET
MO1000_SETDACPARGAIN = _eapi.MO1000_SETDACPARGAIN
MO1000_DODACUPDATE = _eapi.MO1000_DODACUPDATE
MO1000_SETDACPARACTCHANNEL = _eapi.MO1000_SETDACPARACTCHANNEL
MO1000_GETCLKMASTER = _eapi.MO1000_GETCLKMASTER
MO1000_SETDACPARISINC = _eapi.MO1000_SETDACPARISINC
MO1000_SETDACPARISINCCTRL = _eapi.MO1000_SETDACPARISINCCTRL
MO1000_SETDACPARFINEMOD = _eapi.MO1000_SETDACPARFINEMOD
MO1000_SETDACPARFINEMODCTRL = _eapi.MO1000_SETDACPARFINEMODCTRL
MO1000_SETDACPARDATAFORMAT = _eapi.MO1000_SETDACPARDATAFORMAT
MO1000_SETDACPARQUADPHASE = _eapi.MO1000_SETDACPARQUADPHASE
MO1000_GETVERSIONS = _eapi.MO1000_GETVERSIONS
MO1000_TESTLOCALOSCSW = _eapi.MO1000_TESTLOCALOSCSW
MO1000_TESTBRIDGERESET = _eapi.MO1000_TESTBRIDGERESET
MO1000_TESTDACRESET = _eapi.MO1000_TESTDACRESET
MO1000_TESTPLLSEL = _eapi.MO1000_TESTPLLSEL
MO1000_TESTPLLPOWDOWN = _eapi.MO1000_TESTPLLPOWDOWN
MO1000_TESTPLLSYNC = _eapi.MO1000_TESTPLLSYNC
MO1000_TESTDACIRQ = _eapi.MO1000_TESTDACIRQ
MO1000_TESTDACCLKS = _eapi.MO1000_TESTDACCLKS
MO1000_TESTDCIFRAME = _eapi.MO1000_TESTDCIFRAME
MO1000_CHECKI2C = _eapi.MO1000_CHECKI2C
MO1000_GETCOREFREQUENCY = _eapi.MO1000_GETCOREFREQUENCY
MO1000_SETTESTMODE = _eapi.MO1000_SETTESTMODE
MO1000_WRITECLOCKCONFIG = _eapi.MO1000_WRITECLOCKCONFIG
MO1000_GETPLLCONFIG = _eapi.MO1000_GETPLLCONFIG
MO1000_SETPLLCONFIG = _eapi.MO1000_SETPLLCONFIG
TIMESTAMP = _eapi.TIMESTAMP
TIMESTAMP_PRESENCE = _eapi.TIMESTAMP_PRESENCE
TIMESTAMP_SETTIME = _eapi.TIMESTAMP_SETTIME
TIMESTAMP_GETTIME = _eapi.TIMESTAMP_GETTIME
TIMESTAMP_RESET = _eapi.TIMESTAMP_RESET
RTDEXSYNC = _eapi.RTDEXSYNC
RTDEXSYNC_PRESENCE = _eapi.RTDEXSYNC_PRESENCE
RTDEXSYNC_CORERESET = _eapi.RTDEXSYNC_CORERESET
RTDEXSYNC_CHANNELRESET = _eapi.RTDEXSYNC_CHANNELRESET
RTDEXSYNC_CHANNELSTART = _eapi.RTDEXSYNC_CHANNELSTART
RTDEXSYNC_CHANNELSTOP = _eapi.RTDEXSYNC_CHANNELSTOP
RTDEXSYNC_CHANNELINFO = _eapi.RTDEXSYNC_CHANNELINFO
FMCOMMS3 = _eapi.FMCOMMS3
FMCOMMS3_PRESENCE = _eapi.FMCOMMS3_PRESENCE
FMCOMMS3_POWERUP = _eapi.FMCOMMS3_POWERUP
FMCOMMS3_INIT = _eapi.FMCOMMS3_INIT
FMCOMMS3_SET_EN_STATE_MACHINE_MODE = _eapi.FMCOMMS3_SET_EN_STATE_MACHINE_MODE
FMCOMMS3_GET_EN_STATE_MACHINE_MODE = _eapi.FMCOMMS3_GET_EN_STATE_MACHINE_MODE
FMCOMMS3_SET_SAMPLING_FREQ = _eapi.FMCOMMS3_SET_SAMPLING_FREQ
FMCOMMS3_GET_SAMPLING_FREQ = _eapi.FMCOMMS3_GET_SAMPLING_FREQ
FMCOMMS3_SET_TX_LO_FREQ = _eapi.FMCOMMS3_SET_TX_LO_FREQ
FMCOMMS3_GET_TX_LO_FREQ = _eapi.FMCOMMS3_GET_TX_LO_FREQ
FMCOMMS3_SET_RX_RF_GAIN = _eapi.FMCOMMS3_SET_RX_RF_GAIN
FMCOMMS3_GET_RX_RF_GAIN = _eapi.FMCOMMS3_GET_RX_RF_GAIN
FMCOMMS3_SET_RX_RF_BANDWIDTH = _eapi.FMCOMMS3_SET_RX_RF_BANDWIDTH
FMCOMMS3_GET_RX_RF_BANDWIDTH = _eapi.FMCOMMS3_GET_RX_RF_BANDWIDTH
FMCOMMS3_SET_RX_LO_FREQ = _eapi.FMCOMMS3_SET_RX_LO_FREQ
FMCOMMS3_GET_RX_LO_FREQ = _eapi.FMCOMMS3_GET_RX_LO_FREQ
FMCOMMS3_GET_RX_RSSI = _eapi.FMCOMMS3_GET_RX_RSSI
FMCOMMS3_SET_RX_GAIN_CONTROL_MODE = _eapi.FMCOMMS3_SET_RX_GAIN_CONTROL_MODE
FMCOMMS3_GET_RX_GAIN_CONTROL_MODE = _eapi.FMCOMMS3_GET_RX_GAIN_CONTROL_MODE
FMCOMMS3_SET_RX_FIR_CONFIG = _eapi.FMCOMMS3_SET_RX_FIR_CONFIG
FMCOMMS3_GET_RX_FIR_CONFIG = _eapi.FMCOMMS3_GET_RX_FIR_CONFIG
FMCOMMS3_SET_RX_FIR_EN_DIS = _eapi.FMCOMMS3_SET_RX_FIR_EN_DIS
FMCOMMS3_GET_RX_FIR_EN_DIS = _eapi.FMCOMMS3_GET_RX_FIR_EN_DIS
FMCOMMS3_SET_RX_RFDC_TRACK_EN_DIS = _eapi.FMCOMMS3_SET_RX_RFDC_TRACK_EN_DIS
FMCOMMS3_GET_RX_RFDC_TRACK_EN_DIS = _eapi.FMCOMMS3_GET_RX_RFDC_TRACK_EN_DIS
FMCOMMS3_SET_RX_BBDC_TRACK_EN_DIS = _eapi.FMCOMMS3_SET_RX_BBDC_TRACK_EN_DIS
FMCOMMS3_GET_RX_BBDC_TRACK_EN_DIS = _eapi.FMCOMMS3_GET_RX_BBDC_TRACK_EN_DIS
FMCOMMS3_SET_RX_QUAD_TRACK_EN_DIS = _eapi.FMCOMMS3_SET_RX_QUAD_TRACK_EN_DIS
FMCOMMS3_GET_RX_QUAD_TRACK_EN_DIS = _eapi.FMCOMMS3_GET_RX_QUAD_TRACK_EN_DIS
FMCOMMS3_SET_TX_ATTENUATION = _eapi.FMCOMMS3_SET_TX_ATTENUATION
FMCOMMS3_GET_TX_ATTENUATION = _eapi.FMCOMMS3_GET_TX_ATTENUATION
FMCOMMS3_SET_TX_RF_BANDWIDTH = _eapi.FMCOMMS3_SET_TX_RF_BANDWIDTH
FMCOMMS3_GET_TX_RF_BANDWIDTH = _eapi.FMCOMMS3_GET_TX_RF_BANDWIDTH
FMCOMMS3_SET_TX_FIR_CONFIG = _eapi.FMCOMMS3_SET_TX_FIR_CONFIG
FMCOMMS3_GET_TX_FIR_CONFIG = _eapi.FMCOMMS3_GET_TX_FIR_CONFIG
FMCOMMS3_SET_TX_FIR_EN_DIS = _eapi.FMCOMMS3_SET_TX_FIR_EN_DIS
FMCOMMS3_GET_TX_FIR_EN_DIS = _eapi.FMCOMMS3_GET_TX_FIR_EN_DIS
FMCOMMS3_SET_TRX_PATH_CLKS = _eapi.FMCOMMS3_SET_TRX_PATH_CLKS
FMCOMMS3_GET_TRX_PATH_CLKS = _eapi.FMCOMMS3_GET_TRX_PATH_CLKS
FMCOMMS3_SET_DAC_DATASEL = _eapi.FMCOMMS3_SET_DAC_DATASEL
FMCOMMS3_GET_DAC_DATASEL = _eapi.FMCOMMS3_GET_DAC_DATASEL
FMCOMMS3_SET_DDS_FREQ = _eapi.FMCOMMS3_SET_DDS_FREQ
FMCOMMS3_GET_DDS_FREQ = _eapi.FMCOMMS3_GET_DDS_FREQ
FMCOMMS3_SET_DDS_PHASE = _eapi.FMCOMMS3_SET_DDS_PHASE
FMCOMMS3_GET_DDS_PHASE = _eapi.FMCOMMS3_GET_DDS_PHASE
FMCOMMS3_SET_DDS_SCALE = _eapi.FMCOMMS3_SET_DDS_SCALE
FMCOMMS3_GET_DDS_SCALE = _eapi.FMCOMMS3_GET_DDS_SCALE
FMCOMMS3_SPI_WRITE = _eapi.FMCOMMS3_SPI_WRITE
FMCOMMS3_SPI_READ = _eapi.FMCOMMS3_SPI_READ
FMCOMMS3_DIGITAL_CALIBRATION = _eapi.FMCOMMS3_DIGITAL_CALIBRATION
FMCOMMS3_SET_SYNC_DELAY = _eapi.FMCOMMS3_SET_SYNC_DELAY
FMCOMMS3_SET_REFCLK_DELAY = _eapi.FMCOMMS3_SET_REFCLK_DELAY
FMCOMMS3_SET_SYNC_BITSLIP = _eapi.FMCOMMS3_SET_SYNC_BITSLIP
FMCOMMS3_SET_SYNC_SRC = _eapi.FMCOMMS3_SET_SYNC_SRC
FMCOMMS3_SOFT_SYNC = _eapi.FMCOMMS3_SOFT_SYNC
FMCOMMS3_MCS = _eapi.FMCOMMS3_MCS
FMCOMMS3_SET_MASTER_CALIB_RESULT = _eapi.FMCOMMS3_SET_MASTER_CALIB_RESULT
FMCOMMS3_SET_EXT_MASTER_CALIB_RESULT = _eapi.FMCOMMS3_SET_EXT_MASTER_CALIB_RESULT
FMCOMMS3_GET_CALIB_RESULT = _eapi.FMCOMMS3_GET_CALIB_RESULT
RADIO640 = _eapi.RADIO640
RADIO640_PRESENCE = _eapi.RADIO640_PRESENCE
RADIO640_POWERUP = _eapi.RADIO640_POWERUP
RADIO640_INIT = _eapi.RADIO640_INIT
RADIO640_SET_EN_STATE_MACHINE_MODE = _eapi.RADIO640_SET_EN_STATE_MACHINE_MODE
RADIO640_GET_EN_STATE_MACHINE_MODE = _eapi.RADIO640_GET_EN_STATE_MACHINE_MODE
RADIO640_SET_SAMPLING_FREQ = _eapi.RADIO640_SET_SAMPLING_FREQ
RADIO640_GET_SAMPLING_FREQ = _eapi.RADIO640_GET_SAMPLING_FREQ
RADIO640_SET_TX_LO_FREQ = _eapi.RADIO640_SET_TX_LO_FREQ
RADIO640_GET_TX_LO_FREQ = _eapi.RADIO640_GET_TX_LO_FREQ
RADIO640_SET_RX_RF_GAIN = _eapi.RADIO640_SET_RX_RF_GAIN
RADIO640_GET_RX_RF_GAIN = _eapi.RADIO640_GET_RX_RF_GAIN
RADIO640_SET_RX_RF_BANDWIDTH = _eapi.RADIO640_SET_RX_RF_BANDWIDTH
RADIO640_GET_RX_RF_BANDWIDTH = _eapi.RADIO640_GET_RX_RF_BANDWIDTH
RADIO640_SET_RX_LO_FREQ = _eapi.RADIO640_SET_RX_LO_FREQ
RADIO640_GET_RX_LO_FREQ = _eapi.RADIO640_GET_RX_LO_FREQ
RADIO640_GET_RX_RSSI = _eapi.RADIO640_GET_RX_RSSI
RADIO640_SET_RX_GAIN_CONTROL_MODE = _eapi.RADIO640_SET_RX_GAIN_CONTROL_MODE
RADIO640_GET_RX_GAIN_CONTROL_MODE = _eapi.RADIO640_GET_RX_GAIN_CONTROL_MODE
RADIO640_SET_RX_FIR_CONFIG = _eapi.RADIO640_SET_RX_FIR_CONFIG
RADIO640_GET_RX_FIR_CONFIG = _eapi.RADIO640_GET_RX_FIR_CONFIG
RADIO640_SET_RX_FIR_EN_DIS = _eapi.RADIO640_SET_RX_FIR_EN_DIS
RADIO640_GET_RX_FIR_EN_DIS = _eapi.RADIO640_GET_RX_FIR_EN_DIS
RADIO640_SET_RX_RFDC_TRACK_EN_DIS = _eapi.RADIO640_SET_RX_RFDC_TRACK_EN_DIS
RADIO640_GET_RX_RFDC_TRACK_EN_DIS = _eapi.RADIO640_GET_RX_RFDC_TRACK_EN_DIS
RADIO640_SET_RX_BBDC_TRACK_EN_DIS = _eapi.RADIO640_SET_RX_BBDC_TRACK_EN_DIS
RADIO640_GET_RX_BBDC_TRACK_EN_DIS = _eapi.RADIO640_GET_RX_BBDC_TRACK_EN_DIS
RADIO640_SET_RX_QUAD_TRACK_EN_DIS = _eapi.RADIO640_SET_RX_QUAD_TRACK_EN_DIS
RADIO640_GET_RX_QUAD_TRACK_EN_DIS = _eapi.RADIO640_GET_RX_QUAD_TRACK_EN_DIS
RADIO640_SET_TX_ATTENUATION = _eapi.RADIO640_SET_TX_ATTENUATION
RADIO640_GET_TX_ATTENUATION = _eapi.RADIO640_GET_TX_ATTENUATION
RADIO640_SET_TX_RF_BANDWIDTH = _eapi.RADIO640_SET_TX_RF_BANDWIDTH
RADIO640_GET_TX_RF_BANDWIDTH = _eapi.RADIO640_GET_TX_RF_BANDWIDTH
RADIO640_SET_TX_FIR_CONFIG = _eapi.RADIO640_SET_TX_FIR_CONFIG
RADIO640_GET_TX_FIR_CONFIG = _eapi.RADIO640_GET_TX_FIR_CONFIG
RADIO640_SET_TX_FIR_EN_DIS = _eapi.RADIO640_SET_TX_FIR_EN_DIS
RADIO640_GET_TX_FIR_EN_DIS = _eapi.RADIO640_GET_TX_FIR_EN_DIS
RADIO640_SET_TRX_PATH_CLKS = _eapi.RADIO640_SET_TRX_PATH_CLKS
RADIO640_GET_TRX_PATH_CLKS = _eapi.RADIO640_GET_TRX_PATH_CLKS
RADIO640_DIGITAL_CALIBRATION = _eapi.RADIO640_DIGITAL_CALIBRATION
RADIO640_SET_SYNC_OUTPUT_DELAY = _eapi.RADIO640_SET_SYNC_OUTPUT_DELAY
RADIO640_SET_REFCLK_DELAY = _eapi.RADIO640_SET_REFCLK_DELAY
RADIO640_SET_SYNC_BITSLIP = _eapi.RADIO640_SET_SYNC_BITSLIP
RADIO640_SET_SYNC_SRC = _eapi.RADIO640_SET_SYNC_SRC
RADIO640_SOFT_SYNC = _eapi.RADIO640_SOFT_SYNC
RADIO640_MCS = _eapi.RADIO640_MCS
RADIO640_SET_MASTER_CALIB_RESULT = _eapi.RADIO640_SET_MASTER_CALIB_RESULT
RADIO640_SET_EXT_MASTER_CALIB_RESULT = _eapi.RADIO640_SET_EXT_MASTER_CALIB_RESULT
RADIO640_GET_CALIB_RESULT = _eapi.RADIO640_GET_CALIB_RESULT
RADIO640_SET_RX_RF_FILTER = _eapi.RADIO640_SET_RX_RF_FILTER
RADIO640_WRITE = _eapi.RADIO640_WRITE
RADIO640_READ = _eapi.RADIO640_READ
RADIO640_DISABLE_DESIGN_CLK = _eapi.RADIO640_DISABLE_DESIGN_CLK
RADIO640_ENABLE_DESIGN_CLK = _eapi.RADIO640_ENABLE_DESIGN_CLK
RADIO640_IS_CLOCK_MASTER = _eapi.RADIO640_IS_CLOCK_MASTER
RADIO640_SET_CLK_SRC = _eapi.RADIO640_SET_CLK_SRC
RADIO640_GET_CLK_SRC = _eapi.RADIO640_GET_CLK_SRC
RADIO640_GET_BOARD_TEMP = _eapi.RADIO640_GET_BOARD_TEMP
RADIO640_GET_TRX_TEMP = _eapi.RADIO640_GET_TRX_TEMP
RADIO640_SET_EN_AGC_PIN_CONFIG = _eapi.RADIO640_SET_EN_AGC_PIN_CONFIG
RADIO640_SET_ENABLE_PIN_CONFIG = _eapi.RADIO640_SET_ENABLE_PIN_CONFIG
RADIO640_SET_TXNRX_PIN_CONFIG = _eapi.RADIO640_SET_TXNRX_PIN_CONFIG
RADIO640_SET_CTRL_IN_PIN_CONFIG = _eapi.RADIO640_SET_CTRL_IN_PIN_CONFIG
RADIO640_GET_CTRL_OUT_PIN_VALUE = _eapi.RADIO640_GET_CTRL_OUT_PIN_VALUE
RADIO640_GET_CTRL_OUT_PIN_LOW_HIGH_VALUE = _eapi.RADIO640_GET_CTRL_OUT_PIN_LOW_HIGH_VALUE
RADIO640_SET_CTRL_OUT_CONFIG = _eapi.RADIO640_SET_CTRL_OUT_CONFIG
RADIO640_SET_POWER_MONITOR_MODE = _eapi.RADIO640_SET_POWER_MONITOR_MODE
RADIO640_SET_POWER_MONITOR_CONVERSION_TIME = _eapi.RADIO640_SET_POWER_MONITOR_CONVERSION_TIME
RADIO640_SET_POWER_MONITOR_AVERAGING = _eapi.RADIO640_SET_POWER_MONITOR_AVERAGING
RADIO640_READ_POWER_MONITOR_BUS_VOLTAGE = _eapi.RADIO640_READ_POWER_MONITOR_BUS_VOLTAGE
RADIO640_READ_POWER_MONITOR_BUS_POWER = _eapi.RADIO640_READ_POWER_MONITOR_BUS_POWER
RADIO640_READ_POWER_MONITOR_BUS_CURRENT = _eapi.RADIO640_READ_POWER_MONITOR_BUS_CURRENT
RADIO640_SET_TX_EXT_ATTENUATION = _eapi.RADIO640_SET_TX_EXT_ATTENUATION
RADIO640_TUNE_OSC = _eapi.RADIO640_TUNE_OSC
RADIO640_SET_TX_ENABLE_STATE = _eapi.RADIO640_SET_TX_ENABLE_STATE
RADIO640_SET_RX_ENABLE_STATE = _eapi.RADIO640_SET_RX_ENABLE_STATE
RADIO640_STORE_RX_FAST_LOCK_PROFILE = _eapi.RADIO640_STORE_RX_FAST_LOCK_PROFILE
RADIO640_RECALL_RX_FAST_LOCK_PROFILE = _eapi.RADIO640_RECALL_RX_FAST_LOCK_PROFILE
RADIO640_LOAD_RX_FAST_LOCK_PROFILE = _eapi.RADIO640_LOAD_RX_FAST_LOCK_PROFILE
RADIO640_SAVE_RX_FAST_LOCK_PROFILE = _eapi.RADIO640_SAVE_RX_FAST_LOCK_PROFILE
RADIO640_STORE_TX_FAST_LOCK_PROFILE = _eapi.RADIO640_STORE_TX_FAST_LOCK_PROFILE
RADIO640_RECALL_TX_FAST_LOCK_PROFILE = _eapi.RADIO640_RECALL_TX_FAST_LOCK_PROFILE
RADIO640_LOAD_TX_FAST_LOCK_PROFILE = _eapi.RADIO640_LOAD_TX_FAST_LOCK_PROFILE
RADIO640_SAVE_TX_FAST_LOCK_PROFILE = _eapi.RADIO640_SAVE_TX_FAST_LOCK_PROFILE
RADIO640_SET_RX_LO_EXT = _eapi.RADIO640_SET_RX_LO_EXT
RADIO640_SET_TX_LO_EXT = _eapi.RADIO640_SET_TX_LO_EXT
RADIO640_SET_TX_AUTO_CALIB_ENABLE = _eapi.RADIO640_SET_TX_AUTO_CALIB_ENABLE
RADIO640_GET_TX_AUTO_CALIB_ENABLE = _eapi.RADIO640_GET_TX_AUTO_CALIB_ENABLE
RADIO640_DO_CALIB = _eapi.RADIO640_DO_CALIB
RADIO640_SET_SYNC_INPUT_DELAY = _eapi.RADIO640_SET_SYNC_INPUT_DELAY
RADIO640_SET_RF_SWITCH_CONFIG = _eapi.RADIO640_SET_RF_SWITCH_CONFIG
RADIO640_SET_TRIGGER_DELAY = _eapi.RADIO640_SET_TRIGGER_DELAY
RADIO640_SET_TRIGGER_BITSLIP = _eapi.RADIO640_SET_TRIGGER_BITSLIP
RADIO640_READ_CLK_FREQ = _eapi.RADIO640_READ_CLK_FREQ
RADIO640_GET_EN_STATE_MACHINE_STATE = _eapi.RADIO640_GET_EN_STATE_MACHINE_STATE
RADIO640_GET_TRIGGER_VALUE = _eapi.RADIO640_GET_TRIGGER_VALUE
RADIO640_GET_TRIGGER_LOW_HIGH_VALUE = _eapi.RADIO640_GET_TRIGGER_LOW_HIGH_VALUE
RADIO640_GET_INPUT_SYNC_VALUE = _eapi.RADIO640_GET_INPUT_SYNC_VALUE
RADIO640_GET_INPUT_SYNC_LOW_HIGH_VALUE = _eapi.RADIO640_GET_INPUT_SYNC_LOW_HIGH_VALUE
RADIO640_SET_CLK_TO_EXTENDED_FMC_ENABLE = _eapi.RADIO640_SET_CLK_TO_EXTENDED_FMC_ENABLE
RADIO640_SET_REF_OUT_ENABLE = _eapi.RADIO640_SET_REF_OUT_ENABLE
RADIO640_SET_COMPLEX_MULTIPLIER = _eapi.RADIO640_SET_COMPLEX_MULTIPLIER
RADIO640_GET_COMPLEX_MULTIPLIER = _eapi.RADIO640_GET_COMPLEX_MULTIPLIER
RADIO640_SET_DATA_DELAY = _eapi.RADIO640_SET_DATA_DELAY
RADIO640_GET_DATA_DELAY = _eapi.RADIO640_GET_DATA_DELAY
OSCONFIG = _eapi.OSCONFIG
OSCONFIG_UNSET_PARAMETER = _eapi.OSCONFIG_UNSET_PARAMETER
OSCONFIG_GET_FIRST_PARAMETER = _eapi.OSCONFIG_GET_FIRST_PARAMETER
OSCONFIG_GET_NEXT_PARAMETER = _eapi.OSCONFIG_GET_NEXT_PARAMETER
OSCONFIG_GET_PARAMETER_VALUE = _eapi.OSCONFIG_GET_PARAMETER_VALUE
OSCONFIG_SET_PARAMETER_VALUE = _eapi.OSCONFIG_SET_PARAMETER_VALUE
OSCONFIG_LOAD_FILE = _eapi.OSCONFIG_LOAD_FILE
OSCONFIG_SAVE_FILE = _eapi.OSCONFIG_SAVE_FILE
OSCONFIG_CLEAR_FILE = _eapi.OSCONFIG_CLEAR_FILE
OSCONFIG_APPLY_FILE = _eapi.OSCONFIG_APPLY_FILE
OSCONFIG_SELECT_FILE = _eapi.OSCONFIG_SELECT_FILE
OSCONFIG_GET_FIRST_FILE = _eapi.OSCONFIG_GET_FIRST_FILE
OSCONFIG_GET_NEXT_FILE = _eapi.OSCONFIG_GET_NEXT_FILE
CCEOK = _eapi.CCEOK
CCETCPERROR = _eapi.CCETCPERROR
CCEUNIMPLEMENTED = _eapi.CCEUNIMPLEMENTED
CCEIOCTLERROR = _eapi.CCEIOCTLERROR
CCEINVALIDVALUE = _eapi.CCEINVALIDVALUE
CCEMEMORY = _eapi.CCEMEMORY
CCEBUFFER2BIG = _eapi.CCEBUFFER2BIG
CCEINVALIDMOD = _eapi.CCEINVALIDMOD
CCEINVALIDREG = _eapi.CCEINVALIDREG
CCEINVALIDINDEX = _eapi.CCEINVALIDINDEX
CCEINVALIDBITSTREAM = _eapi.CCEINVALIDBITSTREAM
CCEINVALIDPARTITIONTABLE = _eapi.CCEINVALIDPARTITIONTABLE
TRUE = _eapi.TRUE
FALSE = _eapi.FALSE
true = _eapi.true
false = _eapi.false
class string_enum_element_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string_enum_element_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string_enum_element_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enum_string"] = _eapi.string_enum_element_t_enum_string_set
    __swig_getmethods__["enum_string"] = _eapi.string_enum_element_t_enum_string_get
    if _newclass:enum_string = _swig_property(_eapi.string_enum_element_t_enum_string_get, _eapi.string_enum_element_t_enum_string_set)
    __swig_setmethods__["enum_value"] = _eapi.string_enum_element_t_enum_value_set
    __swig_getmethods__["enum_value"] = _eapi.string_enum_element_t_enum_value_get
    if _newclass:enum_value = _swig_property(_eapi.string_enum_element_t_enum_value_get, _eapi.string_enum_element_t_enum_value_set)
    def __init__(self): 
        this = _eapi.new_string_enum_element_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_string_enum_element_t
    __del__ = lambda self : None;
string_enum_element_t_swigregister = _eapi.string_enum_element_t_swigregister
string_enum_element_t_swigregister(string_enum_element_t)

ADP_INVALID_HANDLE = _eapi.ADP_INVALID_HANDLE
PRI_U64 = _eapi.PRI_U64
PRI_X64 = _eapi.PRI_X64
eProtocolCtrl = _eapi.eProtocolCtrl
eProtocolRTDEX = _eapi.eProtocolRTDEX
eProtocolRecPlay = _eapi.eProtocolRecPlay
eProtocolUser = _eapi.eProtocolUser
eMediaPcie = _eapi.eMediaPcie
eMediaEth = _eapi.eMediaEth
eMediaRs232 = _eapi.eMediaRs232
eMediaSocketIp = _eapi.eMediaSocketIp
eMediaSrio = _eapi.eMediaSrio
eMediaTcpIp = _eapi.eMediaTcpIp
eMediaAxi = _eapi.eMediaAxi
eToFpga = _eapi.eToFpga
eFromFpga = _eapi.eFromFpga
eSingle = _eapi.eSingle
eContinuous = _eapi.eContinuous
eRTDExWaitForever = _eapi.eRTDExWaitForever
eRTDExWaitTimeout = _eapi.eRTDExWaitTimeout
eRTDExDontWait = _eapi.eRTDExDontWait
eRTDExWaitTimeoutOrFirstError = _eapi.eRTDExWaitTimeoutOrFirstError
RTDEXOK = _eapi.RTDEXOK
RTDEXINVHANDLE = _eapi.RTDEXINVHANDLE
RTDEXINVCONTEXT = _eapi.RTDEXINVCONTEXT
RTDEXMEMALLOC = _eapi.RTDEXMEMALLOC
RTDEXINVCHANNELNUM = _eapi.RTDEXINVCHANNELNUM
RTDEXINVMUTEXHANDLE = _eapi.RTDEXINVMUTEXHANDLE
RTDEXMUTEXINIT = _eapi.RTDEXMUTEXINIT
RTDEXMUTEXLOCK = _eapi.RTDEXMUTEXLOCK
RTDEXMUTEXUNLOCK = _eapi.RTDEXMUTEXUNLOCK
RTDEXCONDINIT = _eapi.RTDEXCONDINIT
RTDEXCONDWAIT = _eapi.RTDEXCONDWAIT
RTDEXPTHREADARRAY = _eapi.RTDEXPTHREADARRAY
RTDEXINVFRAMESIZE = _eapi.RTDEXINVFRAMESIZE
RTDEXTRANSFERSIZENOTFRAMESIZEMULTIPLE = _eapi.RTDEXTRANSFERSIZENOTFRAMESIZEMULTIPLE
RTDEXBUFFERSIZETOOSMALL = _eapi.RTDEXBUFFERSIZETOOSMALL
RTDEXWAITTHREADCALL = _eapi.RTDEXWAITTHREADCALL
RTDEXWRONGDIRECTION = _eapi.RTDEXWRONGDIRECTION
RTDEXPCAPCOMPILE = _eapi.RTDEXPCAPCOMPILE
RTDEXPCAPSETFILTER = _eapi.RTDEXPCAPSETFILTER
RTDEXPCAPFINDALLDEVS = _eapi.RTDEXPCAPFINDALLDEVS
RTDEXINTERFACEITERATOR = _eapi.RTDEXINTERFACEITERATOR
RTDEXDEVICEITERATOR = _eapi.RTDEXDEVICEITERATOR
RTDEXADAPTORSINFO = _eapi.RTDEXADAPTORSINFO
RTDEXTHREADISDEAD = _eapi.RTDEXTHREADISDEAD
RTDEXINVINTERFACEDMAHANDLE = _eapi.RTDEXINVINTERFACEDMAHANDLE
RTDEXINVSOURCEINTERFACE = _eapi.RTDEXINVSOURCEINTERFACE
RTDEXSENDPACKET = _eapi.RTDEXSENDPACKET
RTDEXMEDIANOTSUPPORTED = _eapi.RTDEXMEDIANOTSUPPORTED
RTDEXINVALIDBUFFER = _eapi.RTDEXINVALIDBUFFER
RTDEXINVALIDBUFFERSIZE = _eapi.RTDEXINVALIDBUFFERSIZE
RTDEXFRAMESIZETOOBIG = _eapi.RTDEXFRAMESIZETOOBIG
RTDEXPCAPSEND = _eapi.RTDEXPCAPSEND
RTDEXBADCOREIDORVER = _eapi.RTDEXBADCOREIDORVER
RTDEXRESSOURCEBUSY = _eapi.RTDEXRESSOURCEBUSY
RTDEXINVALBUSACCESS = _eapi.RTDEXINVALBUSACCESS
RTDEXTRANSFERTSIZETOOBIG = _eapi.RTDEXTRANSFERTSIZETOOBIG
RTDEXTOOMANYDEVS = _eapi.RTDEXTOOMANYDEVS
RTDEXINVALRESSOURCE = _eapi.RTDEXINVALRESSOURCE
RTDEXINVALHOSTMACADDR = _eapi.RTDEXINVALHOSTMACADDR
RTDEXPEERMACADDRCONFLICT = _eapi.RTDEXPEERMACADDRCONFLICT
RTDEXPCIEPERSEUS2CPUFAIL = _eapi.RTDEXPCIEPERSEUS2CPUFAIL
RTDEXPCIEINTERR = _eapi.RTDEXPCIEINTERR
RTDEXPCIESYSERR = _eapi.RTDEXPCIESYSERR
RTDEXPCIEOPEN = _eapi.RTDEXPCIEOPEN
RTDEXPCIEREAD = _eapi.RTDEXPCIEREAD
RTDEXPCIEWRITE = _eapi.RTDEXPCIEWRITE
RTDEXPCIEIOCTL = _eapi.RTDEXPCIEIOCTL
RTDEXPCIEEOF = _eapi.RTDEXPCIEEOF
RTDEXPCIETIMEOUT = _eapi.RTDEXPCIETIMEOUT
RTDEXRECEIVESENDSIZEISTOLARGE = _eapi.RTDEXRECEIVESENDSIZEISTOLARGE
RTDEXOLDETHNOTSUPPORTED = _eapi.RTDEXOLDETHNOTSUPPORTED
RTDEXBADTESTLOGICCOREID = _eapi.RTDEXBADTESTLOGICCOREID
RTDEXTCPIPWSASTART = _eapi.RTDEXTCPIPWSASTART
RTDEXTCPIPSOCKET = _eapi.RTDEXTCPIPSOCKET
RTDEXTCPIPSETSOCK = _eapi.RTDEXTCPIPSETSOCK
RTDEXTCPIPSERVER = _eapi.RTDEXTCPIPSERVER
RTDEXTCPIPCONNECT = _eapi.RTDEXTCPIPCONNECT
RTDEXTCPIPSEND = _eapi.RTDEXTCPIPSEND
RTDEXTCPIPRECEIVE = _eapi.RTDEXTCPIPRECEIVE
RTDEXAXIOPEN = _eapi.RTDEXAXIOPEN
RTDEXAXISEND = _eapi.RTDEXAXISEND
RTDEXAXIRECEIVE = _eapi.RTDEXAXIRECEIVE
RTDEXPCIEDRIVER_FIRST = _eapi.RTDEXPCIEDRIVER_FIRST
RTDEXPCIEDRIVER_LAST = _eapi.RTDEXPCIEDRIVER_LAST
ePerseus = _eapi.ePerseus
eHost = _eapi.eHost
eHostToFpga = _eapi.eHostToFpga
eFpgaToHost = _eapi.eFpgaToHost
eFpgaToFpga = _eapi.eFpgaToFpga
class sEthernetRTDExStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sEthernetRTDExStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sEthernetRTDExStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["uSrcChannelId"] = _eapi.sEthernetRTDExStruct_uSrcChannelId_set
    __swig_getmethods__["uSrcChannelId"] = _eapi.sEthernetRTDExStruct_uSrcChannelId_get
    if _newclass:uSrcChannelId = _swig_property(_eapi.sEthernetRTDExStruct_uSrcChannelId_get, _eapi.sEthernetRTDExStruct_uSrcChannelId_set)
    __swig_setmethods__["uDstChannelId"] = _eapi.sEthernetRTDExStruct_uDstChannelId_set
    __swig_getmethods__["uDstChannelId"] = _eapi.sEthernetRTDExStruct_uDstChannelId_get
    if _newclass:uDstChannelId = _swig_property(_eapi.sEthernetRTDExStruct_uDstChannelId_get, _eapi.sEthernetRTDExStruct_uDstChannelId_set)
    __swig_setmethods__["eMode"] = _eapi.sEthernetRTDExStruct_eMode_set
    __swig_getmethods__["eMode"] = _eapi.sEthernetRTDExStruct_eMode_get
    if _newclass:eMode = _swig_property(_eapi.sEthernetRTDExStruct_eMode_get, _eapi.sEthernetRTDExStruct_eMode_set)
    __swig_setmethods__["eConnType"] = _eapi.sEthernetRTDExStruct_eConnType_set
    __swig_getmethods__["eConnType"] = _eapi.sEthernetRTDExStruct_eConnType_get
    if _newclass:eConnType = _swig_property(_eapi.sEthernetRTDExStruct_eConnType_get, _eapi.sEthernetRTDExStruct_eConnType_set)
    __swig_setmethods__["pDataBuffer"] = _eapi.sEthernetRTDExStruct_pDataBuffer_set
    __swig_getmethods__["pDataBuffer"] = _eapi.sEthernetRTDExStruct_pDataBuffer_get
    if _newclass:pDataBuffer = _swig_property(_eapi.sEthernetRTDExStruct_pDataBuffer_get, _eapi.sEthernetRTDExStruct_pDataBuffer_set)
    __swig_setmethods__["pStreamingPipe"] = _eapi.sEthernetRTDExStruct_pStreamingPipe_set
    __swig_getmethods__["pStreamingPipe"] = _eapi.sEthernetRTDExStruct_pStreamingPipe_get
    if _newclass:pStreamingPipe = _swig_property(_eapi.sEthernetRTDExStruct_pStreamingPipe_get, _eapi.sEthernetRTDExStruct_pStreamingPipe_set)
    __swig_setmethods__["u32BufferSize"] = _eapi.sEthernetRTDExStruct_u32BufferSize_set
    __swig_getmethods__["u32BufferSize"] = _eapi.sEthernetRTDExStruct_u32BufferSize_get
    if _newclass:u32BufferSize = _swig_property(_eapi.sEthernetRTDExStruct_u32BufferSize_get, _eapi.sEthernetRTDExStruct_u32BufferSize_set)
    __swig_setmethods__["u32PipeSize"] = _eapi.sEthernetRTDExStruct_u32PipeSize_set
    __swig_getmethods__["u32PipeSize"] = _eapi.sEthernetRTDExStruct_u32PipeSize_get
    if _newclass:u32PipeSize = _swig_property(_eapi.sEthernetRTDExStruct_u32PipeSize_get, _eapi.sEthernetRTDExStruct_u32PipeSize_set)
    __swig_setmethods__["resLastError"] = _eapi.sEthernetRTDExStruct_resLastError_set
    __swig_getmethods__["resLastError"] = _eapi.sEthernetRTDExStruct_resLastError_get
    if _newclass:resLastError = _swig_property(_eapi.sEthernetRTDExStruct_resLastError_get, _eapi.sEthernetRTDExStruct_resLastError_set)
    __swig_setmethods__["u32FrameSize"] = _eapi.sEthernetRTDExStruct_u32FrameSize_set
    __swig_getmethods__["u32FrameSize"] = _eapi.sEthernetRTDExStruct_u32FrameSize_get
    if _newclass:u32FrameSize = _swig_property(_eapi.sEthernetRTDExStruct_u32FrameSize_get, _eapi.sEthernetRTDExStruct_u32FrameSize_set)
    __swig_setmethods__["u32TransferSize"] = _eapi.sEthernetRTDExStruct_u32TransferSize_set
    __swig_getmethods__["u32TransferSize"] = _eapi.sEthernetRTDExStruct_u32TransferSize_get
    if _newclass:u32TransferSize = _swig_property(_eapi.sEthernetRTDExStruct_u32TransferSize_get, _eapi.sEthernetRTDExStruct_u32TransferSize_set)
    __swig_setmethods__["bIsThreadCall"] = _eapi.sEthernetRTDExStruct_bIsThreadCall_set
    __swig_getmethods__["bIsThreadCall"] = _eapi.sEthernetRTDExStruct_bIsThreadCall_get
    if _newclass:bIsThreadCall = _swig_property(_eapi.sEthernetRTDExStruct_bIsThreadCall_get, _eapi.sEthernetRTDExStruct_bIsThreadCall_set)
    __swig_setmethods__["bThreadIsDead"] = _eapi.sEthernetRTDExStruct_bThreadIsDead_set
    __swig_getmethods__["bThreadIsDead"] = _eapi.sEthernetRTDExStruct_bThreadIsDead_get
    if _newclass:bThreadIsDead = _swig_property(_eapi.sEthernetRTDExStruct_bThreadIsDead_get, _eapi.sEthernetRTDExStruct_bThreadIsDead_set)
    __swig_setmethods__["uThreadFrameNbr"] = _eapi.sEthernetRTDExStruct_uThreadFrameNbr_set
    __swig_getmethods__["uThreadFrameNbr"] = _eapi.sEthernetRTDExStruct_uThreadFrameNbr_get
    if _newclass:uThreadFrameNbr = _swig_property(_eapi.sEthernetRTDExStruct_uThreadFrameNbr_get, _eapi.sEthernetRTDExStruct_uThreadFrameNbr_set)
    __swig_setmethods__["uNbTransfers"] = _eapi.sEthernetRTDExStruct_uNbTransfers_set
    __swig_getmethods__["uNbTransfers"] = _eapi.sEthernetRTDExStruct_uNbTransfers_get
    if _newclass:uNbTransfers = _swig_property(_eapi.sEthernetRTDExStruct_uNbTransfers_get, _eapi.sEthernetRTDExStruct_uNbTransfers_set)
    __swig_setmethods__["pSourceInterface"] = _eapi.sEthernetRTDExStruct_pSourceInterface_set
    __swig_getmethods__["pSourceInterface"] = _eapi.sEthernetRTDExStruct_pSourceInterface_get
    if _newclass:pSourceInterface = _swig_property(_eapi.sEthernetRTDExStruct_pSourceInterface_get, _eapi.sEthernetRTDExStruct_pSourceInterface_set)
    __swig_setmethods__["pSourceInterfaceList"] = _eapi.sEthernetRTDExStruct_pSourceInterfaceList_set
    __swig_getmethods__["pSourceInterfaceList"] = _eapi.sEthernetRTDExStruct_pSourceInterfaceList_get
    if _newclass:pSourceInterfaceList = _swig_property(_eapi.sEthernetRTDExStruct_pSourceInterfaceList_get, _eapi.sEthernetRTDExStruct_pSourceInterfaceList_set)
    __swig_setmethods__["pInterfaceDmaHandle"] = _eapi.sEthernetRTDExStruct_pInterfaceDmaHandle_set
    __swig_getmethods__["pInterfaceDmaHandle"] = _eapi.sEthernetRTDExStruct_pInterfaceDmaHandle_get
    if _newclass:pInterfaceDmaHandle = _swig_property(_eapi.sEthernetRTDExStruct_pInterfaceDmaHandle_get, _eapi.sEthernetRTDExStruct_pInterfaceDmaHandle_set)
    __swig_setmethods__["pSrcMacAddr"] = _eapi.sEthernetRTDExStruct_pSrcMacAddr_set
    __swig_getmethods__["pSrcMacAddr"] = _eapi.sEthernetRTDExStruct_pSrcMacAddr_get
    if _newclass:pSrcMacAddr = _swig_property(_eapi.sEthernetRTDExStruct_pSrcMacAddr_get, _eapi.sEthernetRTDExStruct_pSrcMacAddr_set)
    __swig_setmethods__["pDstMacAddr"] = _eapi.sEthernetRTDExStruct_pDstMacAddr_set
    __swig_getmethods__["pDstMacAddr"] = _eapi.sEthernetRTDExStruct_pDstMacAddr_get
    if _newclass:pDstMacAddr = _swig_property(_eapi.sEthernetRTDExStruct_pDstMacAddr_get, _eapi.sEthernetRTDExStruct_pDstMacAddr_set)
    __swig_setmethods__["eProtId"] = _eapi.sEthernetRTDExStruct_eProtId_set
    __swig_getmethods__["eProtId"] = _eapi.sEthernetRTDExStruct_eProtId_get
    if _newclass:eProtId = _swig_property(_eapi.sEthernetRTDExStruct_eProtId_get, _eapi.sEthernetRTDExStruct_eProtId_set)
    __swig_setmethods__["bAllreadyAllocated"] = _eapi.sEthernetRTDExStruct_bAllreadyAllocated_set
    __swig_getmethods__["bAllreadyAllocated"] = _eapi.sEthernetRTDExStruct_bAllreadyAllocated_get
    if _newclass:bAllreadyAllocated = _swig_property(_eapi.sEthernetRTDExStruct_bAllreadyAllocated_get, _eapi.sEthernetRTDExStruct_bAllreadyAllocated_set)
    __swig_setmethods__["bGetBroadCast"] = _eapi.sEthernetRTDExStruct_bGetBroadCast_set
    __swig_getmethods__["bGetBroadCast"] = _eapi.sEthernetRTDExStruct_bGetBroadCast_get
    if _newclass:bGetBroadCast = _swig_property(_eapi.sEthernetRTDExStruct_bGetBroadCast_get, _eapi.sEthernetRTDExStruct_bGetBroadCast_set)
    __swig_setmethods__["uPacketNumber"] = _eapi.sEthernetRTDExStruct_uPacketNumber_set
    __swig_getmethods__["uPacketNumber"] = _eapi.sEthernetRTDExStruct_uPacketNumber_get
    if _newclass:uPacketNumber = _swig_property(_eapi.sEthernetRTDExStruct_uPacketNumber_get, _eapi.sEthernetRTDExStruct_uPacketNumber_set)
    __swig_setmethods__["uExpectedRxFrameNumber"] = _eapi.sEthernetRTDExStruct_uExpectedRxFrameNumber_set
    __swig_getmethods__["uExpectedRxFrameNumber"] = _eapi.sEthernetRTDExStruct_uExpectedRxFrameNumber_get
    if _newclass:uExpectedRxFrameNumber = _swig_property(_eapi.sEthernetRTDExStruct_uExpectedRxFrameNumber_get, _eapi.sEthernetRTDExStruct_uExpectedRxFrameNumber_set)
    __swig_setmethods__["uFpga2HostFrameLostCount"] = _eapi.sEthernetRTDExStruct_uFpga2HostFrameLostCount_set
    __swig_getmethods__["uFpga2HostFrameLostCount"] = _eapi.sEthernetRTDExStruct_uFpga2HostFrameLostCount_get
    if _newclass:uFpga2HostFrameLostCount = _swig_property(_eapi.sEthernetRTDExStruct_uFpga2HostFrameLostCount_get, _eapi.sEthernetRTDExStruct_uFpga2HostFrameLostCount_set)
    __swig_setmethods__["uFpga2HostFrameCount"] = _eapi.sEthernetRTDExStruct_uFpga2HostFrameCount_set
    __swig_getmethods__["uFpga2HostFrameCount"] = _eapi.sEthernetRTDExStruct_uFpga2HostFrameCount_get
    if _newclass:uFpga2HostFrameCount = _swig_property(_eapi.sEthernetRTDExStruct_uFpga2HostFrameCount_get, _eapi.sEthernetRTDExStruct_uFpga2HostFrameCount_set)
    __swig_setmethods__["uHost2FpgaFrameCount"] = _eapi.sEthernetRTDExStruct_uHost2FpgaFrameCount_set
    __swig_getmethods__["uHost2FpgaFrameCount"] = _eapi.sEthernetRTDExStruct_uHost2FpgaFrameCount_get
    if _newclass:uHost2FpgaFrameCount = _swig_property(_eapi.sEthernetRTDExStruct_uHost2FpgaFrameCount_get, _eapi.sEthernetRTDExStruct_uHost2FpgaFrameCount_set)
    def __init__(self): 
        this = _eapi.new_sEthernetRTDExStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_sEthernetRTDExStruct
    __del__ = lambda self : None;
sEthernetRTDExStruct_swigregister = _eapi.sEthernetRTDExStruct_swigregister
sEthernetRTDExStruct_swigregister(sEthernetRTDExStruct)

class sMediaRTDExStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sMediaRTDExStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sMediaRTDExStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eMedia"] = _eapi.sMediaRTDExStruct_eMedia_set
    __swig_getmethods__["eMedia"] = _eapi.sMediaRTDExStruct_eMedia_get
    if _newclass:eMedia = _swig_property(_eapi.sMediaRTDExStruct_eMedia_get, _eapi.sMediaRTDExStruct_eMedia_set)
    __swig_setmethods__["state"] = _eapi.sMediaRTDExStruct_state_set
    __swig_getmethods__["state"] = _eapi.sMediaRTDExStruct_state_get
    if _newclass:state = _swig_property(_eapi.sMediaRTDExStruct_state_get, _eapi.sMediaRTDExStruct_state_set)
    __swig_setmethods__["DstMediaState"] = _eapi.sMediaRTDExStruct_DstMediaState_set
    __swig_getmethods__["DstMediaState"] = _eapi.sMediaRTDExStruct_DstMediaState_get
    if _newclass:DstMediaState = _swig_property(_eapi.sMediaRTDExStruct_DstMediaState_get, _eapi.sMediaRTDExStruct_DstMediaState_set)
    __swig_setmethods__["hMediaRTDexConn"] = _eapi.sMediaRTDExStruct_hMediaRTDexConn_set
    __swig_getmethods__["hMediaRTDexConn"] = _eapi.sMediaRTDExStruct_hMediaRTDexConn_get
    if _newclass:hMediaRTDexConn = _swig_property(_eapi.sMediaRTDExStruct_hMediaRTDexConn_get, _eapi.sMediaRTDExStruct_hMediaRTDexConn_set)
    __swig_setmethods__["u64RTDExFpgaBaseAddr"] = _eapi.sMediaRTDExStruct_u64RTDExFpgaBaseAddr_set
    __swig_getmethods__["u64RTDExFpgaBaseAddr"] = _eapi.sMediaRTDExStruct_u64RTDExFpgaBaseAddr_get
    if _newclass:u64RTDExFpgaBaseAddr = _swig_property(_eapi.sMediaRTDExStruct_u64RTDExFpgaBaseAddr_get, _eapi.sMediaRTDExStruct_u64RTDExFpgaBaseAddr_set)
    def __init__(self): 
        this = _eapi.new_sMediaRTDExStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_sMediaRTDExStruct
    __del__ = lambda self : None;
sMediaRTDExStruct_swigregister = _eapi.sMediaRTDExStruct_swigregister
sMediaRTDExStruct_swigregister(sMediaRTDExStruct)

g_uNormalFrames = _eapi.g_uNormalFrames
g_uJumboFrames = _eapi.g_uJumboFrames
g_uSnapHeaders = _eapi.g_uSnapHeaders
g_uLyrtechHeaders = _eapi.g_uLyrtechHeaders
g_uSubId = _eapi.g_uSubId
RTDEX_ACCESS_COREIDVERS = _eapi.RTDEX_ACCESS_COREIDVERS
RTDEX_COREIDVER_VER_BO = _eapi.RTDEX_COREIDVER_VER_BO
RTDEX_COREIDVER_VER_BM = _eapi.RTDEX_COREIDVER_VER_BM
RTDEX_COREVER = _eapi.RTDEX_COREVER
RTDEX_COREIDVER_ID_BO = _eapi.RTDEX_COREIDVER_ID_BO
RTDEX_COREIDVER_ID_BM = _eapi.RTDEX_COREIDVER_ID_BM
RTDEX_COREID = _eapi.RTDEX_COREID
RTDEX_ACCESS_CORERST = _eapi.RTDEX_ACCESS_CORERST
RTDEX_CORERST_BM = _eapi.RTDEX_CORERST_BM
RTDEX_ACCESS_RXTXFIFORST = _eapi.RTDEX_ACCESS_RXTXFIFORST
RTDEX_RXFIFORESET_BO = _eapi.RTDEX_RXFIFORESET_BO
RTDEX_TXFIFORESET_BO = _eapi.RTDEX_TXFIFORESET_BO
RTDEX_ACCESS_PEERMACADDRLO = _eapi.RTDEX_ACCESS_PEERMACADDRLO
RTDEX_ACCESS_PEERMACADDRHI = _eapi.RTDEX_ACCESS_PEERMACADDRHI
RTDEX_ACCESS_FPGAMACADDRLO = _eapi.RTDEX_ACCESS_FPGAMACADDRLO
RTDEX_ACCESS_FPGAMACADDRHI = _eapi.RTDEX_ACCESS_FPGAMACADDRHI
RTDEX_ACCESS_RX_TX_MODE = _eapi.RTDEX_ACCESS_RX_TX_MODE
RTDEX_RXTXMODE_TX_CONTINUOUS_BM = _eapi.RTDEX_RXTXMODE_TX_CONTINUOUS_BM
RTDEX_RXTXMODE_RX_CONTINUOUS_BM = _eapi.RTDEX_RXTXMODE_RX_CONTINUOUS_BM
RTDEX_ACCESS_RX_TIMEOUT_2DROPFRM = _eapi.RTDEX_ACCESS_RX_TIMEOUT_2DROPFRM
RTDEX_ACCESS_RX_CONFIG_INFO = _eapi.RTDEX_ACCESS_RX_CONFIG_INFO
RTDEX_RXCFGINF_NBCHNL_BM = _eapi.RTDEX_RXCFGINF_NBCHNL_BM
RTDEX_RXCFGINF_FIFODEPTH_BO = _eapi.RTDEX_RXCFGINF_FIFODEPTH_BO
RTDEX_RXCFGINF_FIFODEPTH_BM = _eapi.RTDEX_RXCFGINF_FIFODEPTH_BM
RTDEX_RXCFGINF_STATSENABLED_BM = _eapi.RTDEX_RXCFGINF_STATSENABLED_BM
RTDEX_RXCFGINF_PAUSEERCSENDCAP_BM = _eapi.RTDEX_RXCFGINF_PAUSEERCSENDCAP_BM
RTDEX_ACCESS_RXSTARTNEWTRANSFER = _eapi.RTDEX_ACCESS_RXSTARTNEWTRANSFER
RTDEX_ACCESS_RXFRAMECNT_ARRAY = _eapi.RTDEX_ACCESS_RXFRAMECNT_ARRAY
RTDEX_ACCESS_RX_ERR_STATUS = _eapi.RTDEX_ACCESS_RX_ERR_STATUS
RTDEX_RXERRSTATUS_BAD_FRAME_BM = _eapi.RTDEX_RXERRSTATUS_BAD_FRAME_BM
RTDEX_RXERRSTATUS_LOST_FRAME_BM = _eapi.RTDEX_RXERRSTATUS_LOST_FRAME_BM
RTDEX_RXERRSTATUS_DROP_FRAME_BM = _eapi.RTDEX_RXERRSTATUS_DROP_FRAME_BM
RTDEX_ACCESS_RXBADFRAMECNT = _eapi.RTDEX_ACCESS_RXBADFRAMECNT
RTDEX_ACCESS_RXFRAMELOSTCNT_ARRAY = _eapi.RTDEX_ACCESS_RXFRAMELOSTCNT_ARRAY
RTDEX_ACCESS_RX_DROP_FRAME_CNT_ARRAY = _eapi.RTDEX_ACCESS_RX_DROP_FRAME_CNT_ARRAY
RTDEX_ACCESS_TXFRAMESIZE_ARRAY = _eapi.RTDEX_ACCESS_TXFRAMESIZE_ARRAY
RTDEX_ACCESS_TXTRANSFERSIZE_ARRAY = _eapi.RTDEX_ACCESS_TXTRANSFERSIZE_ARRAY
RTDEX_ACCESS_TXFRAMEGAP = _eapi.RTDEX_ACCESS_TXFRAMEGAP
RTDEX_ACCESS_TXFRAMEBURST = _eapi.RTDEX_ACCESS_TXFRAMEBURST
RTDEX_TXFRMBURST_BM = _eapi.RTDEX_TXFRMBURST_BM
RTDEX_ACCESS_TX_CONFIG_INFO = _eapi.RTDEX_ACCESS_TX_CONFIG_INFO
RTDEX_TXCFGINF_NBCHNL_BM = _eapi.RTDEX_TXCFGINF_NBCHNL_BM
RTDEX_TXCFGINF_FIFODEPTH_BO = _eapi.RTDEX_TXCFGINF_FIFODEPTH_BO
RTDEX_TXCFGINF_FIFODEPTH_BM = _eapi.RTDEX_TXCFGINF_FIFODEPTH_BM
RTDEX_TXCFGINF_STATSENABLED_BM = _eapi.RTDEX_TXCFGINF_STATSENABLED_BM
RTDEX_ACCESS_TXSTARTNEWTRANSFER = _eapi.RTDEX_ACCESS_TXSTARTNEWTRANSFER
RTDEX_ACCESS_TXFRAMECNT_ARRAY = _eapi.RTDEX_ACCESS_TXFRAMECNT_ARRAY
RTDEX_ACCESS_TXDATACNT_ARRAY = _eapi.RTDEX_ACCESS_TXDATACNT_ARRAY
RTDEX_ACCESS_FIFOFULL = _eapi.RTDEX_ACCESS_FIFOFULL
RTDEX_ACCESS_FIFOEMPTY = _eapi.RTDEX_ACCESS_FIFOEMPTY

def RTDExResetFifo(*args):
  return _eapi.RTDExResetFifo(*args)
RTDExResetFifo = _eapi.RTDExResetFifo

def RTDExClose(*args):
  return _eapi.RTDExClose(*args)
RTDExClose = _eapi.RTDExClose

def RTDExStart(*args):
  return _eapi.RTDExStart(*args)
RTDExStart = _eapi.RTDExStart

def RTDExReceive(*args):
  return _eapi.RTDExReceive(*args)
RTDExReceive = _eapi.RTDExReceive

def RTDExSend(*args):
  return _eapi.RTDExSend(*args)
RTDExSend = _eapi.RTDExSend

def RTDExGetLastError(*args):
  return _eapi.RTDExGetLastError(*args)
RTDExGetLastError = _eapi.RTDExGetLastError

def RTDExGetRxFramesCnt(*args):
  return _eapi.RTDExGetRxFramesCnt(*args)
RTDExGetRxFramesCnt = _eapi.RTDExGetRxFramesCnt

def RTDExGetTxFramesCnt(*args):
  return _eapi.RTDExGetTxFramesCnt(*args)
RTDExGetTxFramesCnt = _eapi.RTDExGetTxFramesCnt

def RTDExGetTxFifoDataCnt(*args):
  return _eapi.RTDExGetTxFifoDataCnt(*args)
RTDExGetTxFifoDataCnt = _eapi.RTDExGetTxFifoDataCnt
class sTcpIpRTDExStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sTcpIpRTDExStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sTcpIpRTDExStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_server_ip"] = _eapi.sTcpIpRTDExStruct_m_server_ip_set
    __swig_getmethods__["m_server_ip"] = _eapi.sTcpIpRTDExStruct_m_server_ip_get
    if _newclass:m_server_ip = _swig_property(_eapi.sTcpIpRTDExStruct_m_server_ip_get, _eapi.sTcpIpRTDExStruct_m_server_ip_set)
    __swig_setmethods__["m_sock"] = _eapi.sTcpIpRTDExStruct_m_sock_set
    __swig_getmethods__["m_sock"] = _eapi.sTcpIpRTDExStruct_m_sock_get
    if _newclass:m_sock = _swig_property(_eapi.sTcpIpRTDExStruct_m_sock_get, _eapi.sTcpIpRTDExStruct_m_sock_set)
    def __init__(self): 
        this = _eapi.new_sTcpIpRTDExStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_sTcpIpRTDExStruct
    __del__ = lambda self : None;
sTcpIpRTDExStruct_swigregister = _eapi.sTcpIpRTDExStruct_swigregister
sTcpIpRTDExStruct_swigregister(sTcpIpRTDExStruct)


def RTDExOpenTcpIp(*args):
  return _eapi.RTDExOpenTcpIp(*args)
RTDExOpenTcpIp = _eapi.RTDExOpenTcpIp

def RTDExCloseTcpIp(*args):
  return _eapi.RTDExCloseTcpIp(*args)
RTDExCloseTcpIp = _eapi.RTDExCloseTcpIp

def RTDExStartTcpIp(*args):
  return _eapi.RTDExStartTcpIp(*args)
RTDExStartTcpIp = _eapi.RTDExStartTcpIp

def RTDExSendTcpIp(*args):
  return _eapi.RTDExSendTcpIp(*args)
RTDExSendTcpIp = _eapi.RTDExSendTcpIp

def RTDExReceiveTcpIp(*args):
  return _eapi.RTDExReceiveTcpIp(*args)
RTDExReceiveTcpIp = _eapi.RTDExReceiveTcpIp
RECPLAY_TRIGGERADDRMASK_1G = _eapi.RECPLAY_TRIGGERADDRMASK_1G
RECPLAY_TRIGGERADDRMASK_4G = _eapi.RECPLAY_TRIGGERADDRMASK_4G
eRecPlayTrigExternal = _eapi.eRecPlayTrigExternal
eRecPlayTrigSoft = _eapi.eRecPlayTrigSoft
erecPlayTrigNone = _eapi.erecPlayTrigNone
RECPLAY_DDR3SIZE_UNDEFINED = _eapi.RECPLAY_DDR3SIZE_UNDEFINED
RECPLAY_DDR3SIZE_1G = _eapi.RECPLAY_DDR3SIZE_1G
RECPLAY_DDR3SIZE_4G = _eapi.RECPLAY_DDR3SIZE_4G
class sRecPlayStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sRecPlayStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sRecPlayStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _eapi.sRecPlayStruct_state_set
    __swig_getmethods__["state"] = _eapi.sRecPlayStruct_state_get
    if _newclass:state = _swig_property(_eapi.sRecPlayStruct_state_get, _eapi.sRecPlayStruct_state_set)
    __swig_setmethods__["u64RecPlayFpgaBaseAdd"] = _eapi.sRecPlayStruct_u64RecPlayFpgaBaseAdd_set
    __swig_getmethods__["u64RecPlayFpgaBaseAdd"] = _eapi.sRecPlayStruct_u64RecPlayFpgaBaseAdd_get
    if _newclass:u64RecPlayFpgaBaseAdd = _swig_property(_eapi.sRecPlayStruct_u64RecPlayFpgaBaseAdd_get, _eapi.sRecPlayStruct_u64RecPlayFpgaBaseAdd_set)
    __swig_setmethods__["uRecordModeValue"] = _eapi.sRecPlayStruct_uRecordModeValue_set
    __swig_getmethods__["uRecordModeValue"] = _eapi.sRecPlayStruct_uRecordModeValue_get
    if _newclass:uRecordModeValue = _swig_property(_eapi.sRecPlayStruct_uRecordModeValue_get, _eapi.sRecPlayStruct_uRecordModeValue_set)
    __swig_setmethods__["uPlayBackSingleModeValue"] = _eapi.sRecPlayStruct_uPlayBackSingleModeValue_set
    __swig_getmethods__["uPlayBackSingleModeValue"] = _eapi.sRecPlayStruct_uPlayBackSingleModeValue_get
    if _newclass:uPlayBackSingleModeValue = _swig_property(_eapi.sRecPlayStruct_uPlayBackSingleModeValue_get, _eapi.sRecPlayStruct_uPlayBackSingleModeValue_set)
    __swig_setmethods__["uPlayBackContinuousModeValue"] = _eapi.sRecPlayStruct_uPlayBackContinuousModeValue_set
    __swig_getmethods__["uPlayBackContinuousModeValue"] = _eapi.sRecPlayStruct_uPlayBackContinuousModeValue_get
    if _newclass:uPlayBackContinuousModeValue = _swig_property(_eapi.sRecPlayStruct_uPlayBackContinuousModeValue_get, _eapi.sRecPlayStruct_uPlayBackContinuousModeValue_set)
    __swig_setmethods__["uRtdexMem2HostModeValue"] = _eapi.sRecPlayStruct_uRtdexMem2HostModeValue_set
    __swig_getmethods__["uRtdexMem2HostModeValue"] = _eapi.sRecPlayStruct_uRtdexMem2HostModeValue_get
    if _newclass:uRtdexMem2HostModeValue = _swig_property(_eapi.sRecPlayStruct_uRtdexMem2HostModeValue_get, _eapi.sRecPlayStruct_uRtdexMem2HostModeValue_set)
    __swig_setmethods__["uRtdexHost2MemModeValue"] = _eapi.sRecPlayStruct_uRtdexHost2MemModeValue_set
    __swig_getmethods__["uRtdexHost2MemModeValue"] = _eapi.sRecPlayStruct_uRtdexHost2MemModeValue_get
    if _newclass:uRtdexHost2MemModeValue = _swig_property(_eapi.sRecPlayStruct_uRtdexHost2MemModeValue_get, _eapi.sRecPlayStruct_uRtdexHost2MemModeValue_set)
    __swig_setmethods__["DDR3Size"] = _eapi.sRecPlayStruct_DDR3Size_set
    __swig_getmethods__["DDR3Size"] = _eapi.sRecPlayStruct_DDR3Size_get
    if _newclass:DDR3Size = _swig_property(_eapi.sRecPlayStruct_DDR3Size_get, _eapi.sRecPlayStruct_DDR3Size_set)
    def __init__(self): 
        this = _eapi.new_sRecPlayStruct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eapi.delete_sRecPlayStruct
    __del__ = lambda self : None;
sRecPlayStruct_swigregister = _eapi.sRecPlayStruct_swigregister
sRecPlayStruct_swigregister(sRecPlayStruct)

RECPLAYOK = _eapi.RECPLAYOK
RECPLAYINVHANDLE = _eapi.RECPLAYINVHANDLE
RECPLAYMEMALLOC = _eapi.RECPLAYMEMALLOC
RECPLAYINVARGSIZE = _eapi.RECPLAYINVARGSIZE
RECPLAYINVTRIGOFFSET = _eapi.RECPLAYINVTRIGOFFSET
RECPLAYINVDELAY = _eapi.RECPLAYINVDELAY
RECPLAYWRONGCOREID = _eapi.RECPLAYWRONGCOREID
RECPLAYINVSTARTADDR = _eapi.RECPLAYINVSTARTADDR
RECPLAYSTATUSTIMEOUT = _eapi.RECPLAYSTATUSTIMEOUT
RECPLAYINVNUMPORT = _eapi.RECPLAYINVNUMPORT
RECPLAYINVDATAPORT = _eapi.RECPLAYINVDATAPORT
RECPLAYINVDDR3 = _eapi.RECPLAYINVDDR3
RECPLAYTRANSFERTIMEOUT = _eapi.RECPLAYTRANSFERTIMEOUT
RECPLAY_ACCESS_COREID = _eapi.RECPLAY_ACCESS_COREID
RECPLAY_ACCESS_COREID_INDEX = _eapi.RECPLAY_ACCESS_COREID_INDEX
RECPLAY_ACCESS_CONTROL_INDEX = _eapi.RECPLAY_ACCESS_CONTROL_INDEX
RECPLAY_ACCESS_SETMODE_INDEX = _eapi.RECPLAY_ACCESS_SETMODE_INDEX
RECPLAY_ACCESS_MODEVALUE_INDEX = _eapi.RECPLAY_ACCESS_MODEVALUE_INDEX
RECPLAY_ACCESS_SETSTARTADDR_INDEX = _eapi.RECPLAY_ACCESS_SETSTARTADDR_INDEX
RECPLAY_ACCESS_STARTADDR_INDEX = _eapi.RECPLAY_ACCESS_STARTADDR_INDEX
RECPLAY_ACCESS_DELAYVAL_INDEX = _eapi.RECPLAY_ACCESS_DELAYVAL_INDEX
RECPLAY_ACCESS_SETTRANSFERSIZE_INDEX = _eapi.RECPLAY_ACCESS_SETTRANSFERSIZE_INDEX
RECPLAY_ACCESS_TRANSFERSIZE_INDEX = _eapi.RECPLAY_ACCESS_TRANSFERSIZE_INDEX
RECPLAY_ACCESS_TRIGGERADDR_INDEX = _eapi.RECPLAY_ACCESS_TRIGGERADDR_INDEX
RECPLAY_ACCESS_TRIGGERADDROFFSET_INDEX = _eapi.RECPLAY_ACCESS_TRIGGERADDROFFSET_INDEX
RECPLAY_ACCESS_TRANSFEROVER_INDEX = _eapi.RECPLAY_ACCESS_TRANSFEROVER_INDEX
RECPLAY_ACCESS_MODERECORD_INDEX = _eapi.RECPLAY_ACCESS_MODERECORD_INDEX
RECPLAY_ACCESS_MODEPLAYBACKSINGLE_INDEX = _eapi.RECPLAY_ACCESS_MODEPLAYBACKSINGLE_INDEX
RECPLAY_ACCESS_MODEPLAYBACKCONTINOUS_INDEX = _eapi.RECPLAY_ACCESS_MODEPLAYBACKCONTINOUS_INDEX
RECPLAY_ACCESS_MODERTDEXMEM2HOST_INDEX = _eapi.RECPLAY_ACCESS_MODERTDEXMEM2HOST_INDEX
RECPLAY_ACCESS_MODERTDEXHOST2MEM_INDEX = _eapi.RECPLAY_ACCESS_MODERTDEXHOST2MEM_INDEX
RECPLAY_ACCESS_PFULLASSERT_INDEX = _eapi.RECPLAY_ACCESS_PFULLASSERT_INDEX
RECPLAY_ACCESS_PFULLNEGATE_INDEX = _eapi.RECPLAY_ACCESS_PFULLNEGATE_INDEX
RECPLAY_ACCESS_PARITY_INDEX = _eapi.RECPLAY_ACCESS_PARITY_INDEX
RECPLAY_ACCESS_NBRECPORT_INDEX = _eapi.RECPLAY_ACCESS_NBRECPORT_INDEX
RECPLAY_ACCESS_NBPLAYPORT_INDEX = _eapi.RECPLAY_ACCESS_NBPLAYPORT_INDEX
RECPLAY_ACCESS_RECPORTWIDTH_INDEX = _eapi.RECPLAY_ACCESS_RECPORTWIDTH_INDEX
RECPLAY_ACCESS_PLAYPORTWIDTH_INDEX = _eapi.RECPLAY_ACCESS_PLAYPORTWIDTH_INDEX
RECPLAY_ACCESS_RECTRIGMUX_INDEX = _eapi.RECPLAY_ACCESS_RECTRIGMUX_INDEX
RECPLAY_ACCESS_RECSOFTTRIG_INDEX = _eapi.RECPLAY_ACCESS_RECSOFTTRIG_INDEX
RECPLAY_ACCESS_PLAYTRIGMUX_INDEX = _eapi.RECPLAY_ACCESS_PLAYTRIGMUX_INDEX
RECPLAY_ACCESS_PLAYSOFTTRIG_INDEX = _eapi.RECPLAY_ACCESS_PLAYSOFTTRIG_INDEX
RECPLAY_ACCESS_DDR3SIZE_INDEX = _eapi.RECPLAY_ACCESS_DDR3SIZE_INDEX
RECPLAY_ACCESS_RECORDSTORAGECNT_INDEX = _eapi.RECPLAY_ACCESS_RECORDSTORAGECNT_INDEX
RECPLAY_ACCESS_RTDEXSTORAGECNT_INDEX = _eapi.RECPLAY_ACCESS_RTDEXSTORAGECNT_INDEX
RECPLAY_ACCESS_PLAYBACKREADCNT_INDEX = _eapi.RECPLAY_ACCESS_PLAYBACKREADCNT_INDEX
RECPLAY_ACCESS_RTDEXREADCNT_INDEX = _eapi.RECPLAY_ACCESS_RTDEXREADCNT_INDEX

def RecPlay_Open(*args):
  return _eapi.RecPlay_Open(*args)
RecPlay_Open = _eapi.RecPlay_Open

def RecPlay_Close(*args):
  return _eapi.RecPlay_Close(*args)
RecPlay_Close = _eapi.RecPlay_Close

def RecPlayResetMemory(*args):
  return _eapi.RecPlayResetMemory(*args)
RecPlayResetMemory = _eapi.RecPlayResetMemory

def RecPlayResetCore(*args):
  return _eapi.RecPlayResetCore(*args)
RecPlayResetCore = _eapi.RecPlayResetCore

def RecPlayGetMemoryInitDoneStatus(*args):
  return _eapi.RecPlayGetMemoryInitDoneStatus(*args)
RecPlayGetMemoryInitDoneStatus = _eapi.RecPlayGetMemoryInitDoneStatus

def RecPlayGetTransferStatus(*args):
  return _eapi.RecPlayGetTransferStatus(*args)
RecPlayGetTransferStatus = _eapi.RecPlayGetTransferStatus

def RecPlayWaitTransferDone(*args):
  return _eapi.RecPlayWaitTransferDone(*args)
RecPlayWaitTransferDone = _eapi.RecPlayWaitTransferDone

def RecPlaySetModeRecord(*args):
  return _eapi.RecPlaySetModeRecord(*args)
RecPlaySetModeRecord = _eapi.RecPlaySetModeRecord

def RecPlayGetTriggerPos(*args):
  return _eapi.RecPlayGetTriggerPos(*args)
RecPlayGetTriggerPos = _eapi.RecPlayGetTriggerPos

def RecPlaySetModePlayBackSingle(*args):
  return _eapi.RecPlaySetModePlayBackSingle(*args)
RecPlaySetModePlayBackSingle = _eapi.RecPlaySetModePlayBackSingle

def RecPlaySetModePlayBackContinuous(*args):
  return _eapi.RecPlaySetModePlayBackContinuous(*args)
RecPlaySetModePlayBackContinuous = _eapi.RecPlaySetModePlayBackContinuous

def RecPlaySetModeRtdexHost2Mem(*args):
  return _eapi.RecPlaySetModeRtdexHost2Mem(*args)
RecPlaySetModeRtdexHost2Mem = _eapi.RecPlaySetModeRtdexHost2Mem

def RecPlaySetModeRtdexMem2Host(*args):
  return _eapi.RecPlaySetModeRtdexMem2Host(*args)
RecPlaySetModeRtdexMem2Host = _eapi.RecPlaySetModeRtdexMem2Host

def RecPlayGetRecordNbPortAndWdt(*args):
  return _eapi.RecPlayGetRecordNbPortAndWdt(*args)
RecPlayGetRecordNbPortAndWdt = _eapi.RecPlayGetRecordNbPortAndWdt

def RecPlayGetPlaybackNbPortAndWdt(*args):
  return _eapi.RecPlayGetPlaybackNbPortAndWdt(*args)
RecPlayGetPlaybackNbPortAndWdt = _eapi.RecPlayGetPlaybackNbPortAndWdt

def RecordSetTriggerSource(*args):
  return _eapi.RecordSetTriggerSource(*args)
RecordSetTriggerSource = _eapi.RecordSetTriggerSource

def RecordSoftTrig(*args):
  return _eapi.RecordSoftTrig(*args)
RecordSoftTrig = _eapi.RecordSoftTrig

def PlaybackSetTriggerSource(*args):
  return _eapi.PlaybackSetTriggerSource(*args)
PlaybackSetTriggerSource = _eapi.PlaybackSetTriggerSource

def PlaybackSoftTrig(*args):
  return _eapi.PlaybackSoftTrig(*args)
PlaybackSoftTrig = _eapi.PlaybackSoftTrig

def RecordData(*args):
  return _eapi.RecordData(*args)
RecordData = _eapi.RecordData

def PlaybackData(*args):
  return _eapi.PlaybackData(*args)
PlaybackData = _eapi.PlaybackData

def PlaybackStop(*args):
  return _eapi.PlaybackStop(*args)
PlaybackStop = _eapi.PlaybackStop

def RetrieveRecordedData(*args):
  return _eapi.RetrieveRecordedData(*args)
RetrieveRecordedData = _eapi.RetrieveRecordedData

def RetrieveRecordedDataFromTrigger(*args):
  return _eapi.RetrieveRecordedDataFromTrigger(*args)
RetrieveRecordedDataFromTrigger = _eapi.RetrieveRecordedDataFromTrigger

def RetrieveRecordedDataToFile(*args):
  return _eapi.RetrieveRecordedDataToFile(*args)
RetrieveRecordedDataToFile = _eapi.RetrieveRecordedDataToFile

def RetrieveRecordedDataFromTriggerToFile(*args):
  return _eapi.RetrieveRecordedDataFromTriggerToFile(*args)
RetrieveRecordedDataFromTriggerToFile = _eapi.RetrieveRecordedDataFromTriggerToFile

def LoadDataToPlayback(*args):
  return _eapi.LoadDataToPlayback(*args)
LoadDataToPlayback = _eapi.LoadDataToPlayback

def LoadDataToPlaybackFromFile(*args):
  return _eapi.LoadDataToPlaybackFromFile(*args)
LoadDataToPlaybackFromFile = _eapi.LoadDataToPlaybackFromFile
# This file is compatible with both classic and new-style classes.


